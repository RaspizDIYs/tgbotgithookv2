using System.Text.Json;

namespace TelegramGitHubBot.Services;

public class GifTextEditorService
{
    private readonly HttpClient _httpClient;

    public GifTextEditorService(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<byte[]?> AddTextToGifAsync(string gifUrl, string text, TextPosition position = TextPosition.Bottom, string textColor = "white")
    {
        try
        {
            // –°–∫–∞—á–∏–≤–∞–µ–º GIF
            var gifBytes = await _httpClient.GetByteArrayAsync(gifUrl);
            
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GIF —Å –∑–∞–≥–ª—É—à–∫–æ–π
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            Console.WriteLine($"üìù Adding text '{text}' to GIF with position {position} and color {textColor}");
            
            // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GIF
            // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ GIF
            return gifBytes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå GIF editing error: {ex.Message}");
            return null;
        }
    }

    public async Task<byte[]?> AddTextToGifFromBytesAsync(byte[] gifBytes, string text, TextPosition position = TextPosition.Bottom, string textColor = "white")
    {
        try
        {
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GIF —Å –∑–∞–≥–ª—É—à–∫–æ–π
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            Console.WriteLine($"üìù Adding text '{text}' to GIF bytes with position {position} and color {textColor}");
            
            // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π GIF
            // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ GIF
            return gifBytes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå GIF editing error: {ex.Message}");
            return null;
        }
    }
}

public enum TextPosition
{
    Top,
    Center,
    Bottom
}

// –ü—Ä–æ—Å—Ç–æ–π GIF —ç–Ω–∫–æ–¥–µ—Ä
[SupportedOSPlatform("windows")]
public class GifEncoder : IDisposable
{
    private readonly MemoryStream _stream;
    private readonly BinaryWriter _writer;
    private bool _disposed = false;

    public GifEncoder(MemoryStream stream)
    {
        _stream = stream;
        _writer = new BinaryWriter(stream);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ GIF
        _writer.Write("GIF89a"u8.ToArray());
    }

    public void AddFrame(Bitmap frame, int delay)
    {
        if (_disposed) return;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä –≤ GIF —Ñ–æ—Ä–º–∞—Ç
        using var frameStream = new MemoryStream();
#pragma warning disable CA1416 // Validate platform compatibility
        frame.Save(frameStream, ImageFormat.Gif);
#pragma warning restore CA1416 // Validate platform compatibility
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        var frameBytes = frameStream.ToArray();
        _stream.Write(frameBytes, 13, frameBytes.Length - 13); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }

    public void Finish()
    {
        if (_disposed) return;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä
        _writer.Write((byte)0x3B);
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _writer?.Dispose();
            _disposed = true;
        }
    }
}
