using System.Text.Json;

namespace TelegramGitHubBot.Services;

public class ChatMessage
{
    public string Role { get; set; } = ""; // "user" –∏–ª–∏ "assistant"
    public string Content { get; set; } = "";
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;
}

public class GeminiManager
{
    private readonly List<GeminiAgent> _agents = new();
    private readonly HttpClient _httpClient;
    private int _currentAgentIndex = 0;
    private readonly object _lockObject = new object();
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ —á–∞—Ç–∞–º
    private readonly Dictionary<long, List<ChatMessage>> _chatContexts = new();
    private const int MAX_CONTEXT_MESSAGES = 50;

    public GeminiManager(HttpClient httpClient, IConfiguration configuration)
    {
        _httpClient = httpClient;
        InitializeAgents(configuration);
    }

    private void InitializeAgents(IConfiguration configuration)
    {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
        var primaryApiKey = configuration["GEMINI_API_KEY"];
        Console.WriteLine($"üîë GEMINI_API_KEY: {(string.IsNullOrEmpty(primaryApiKey) ? "–ù–ï –ù–ê–ô–î–ï–ù" : $"{primaryApiKey.Substring(0, Math.Min(10, primaryApiKey.Length))}...")}");
        
        if (!string.IsNullOrEmpty(primaryApiKey))
        {
            if (primaryApiKey.Length < 20)
            {
                Console.WriteLine($"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: GEMINI_API_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({primaryApiKey.Length} —Å–∏–º–≤–æ–ª–æ–≤). –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –Ω–µ–ø–æ–ª–Ω—ã–π!");
            }
            _agents.Add(new GeminiAgent(_httpClient, primaryApiKey, "Gemini Primary"));
        }
        else
        {
            Console.WriteLine("‚ùå –û–®–ò–ë–ö–ê: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
        var secondaryApiKey = configuration["GEMINI_API_KEY_2"];
        Console.WriteLine($"üîë GEMINI_API_KEY_2: {(string.IsNullOrEmpty(secondaryApiKey) ? "–ù–ï –ù–ê–ô–î–ï–ù" : $"{secondaryApiKey.Substring(0, Math.Min(10, secondaryApiKey.Length))}...")}");
        
        if (!string.IsNullOrEmpty(secondaryApiKey))
        {
            _agents.Add(new GeminiAgent(_httpClient, secondaryApiKey, "Gemini Secondary"));
        }

        var tertiaryApiKey = configuration["GEMINI_API_KEY_3"];
        Console.WriteLine($"üîë GEMINI_API_KEY_3: {(string.IsNullOrEmpty(tertiaryApiKey) ? "–ù–ï –ù–ê–ô–î–ï–ù" : $"{tertiaryApiKey.Substring(0, Math.Min(10, tertiaryApiKey.Length))}...")}");
        
        if (!string.IsNullOrEmpty(tertiaryApiKey))
        {
            _agents.Add(new GeminiAgent(_httpClient, tertiaryApiKey, "Gemini Tertiary"));
        }

        Console.WriteLine($"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {_agents.Count}");

        if (_agents.Count == 0)
        {
            throw new InvalidOperationException("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ Gemini API –∫–ª—é—á–∞!");
        }
    }

    public async Task<string> GenerateResponseAsync(string prompt)
    {
        if (_agents.Count == 0)
        {
            return "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞!";
        }

        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        var attempts = 0;
        var startIndex = _currentAgentIndex;
        Exception? lastException = null;

        while (attempts < _agents.Count)
        {
            GeminiAgent currentAgent;
            lock (_lockObject)
            {
                currentAgent = _agents[_currentAgentIndex];
            }

            try
            {
                Console.WriteLine($"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts + 1}/{_agents.Count}: {currentAgent.Name}");
                var response = await currentAgent.GenerateResponseAsync(prompt);
                
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                if (!response.Contains("‚ùå") && !response.Contains("‚ö†Ô∏è"))
                {
                    Console.WriteLine($"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {currentAgent.Name}");
                    return response;
                }
                
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                Console.WriteLine($"‚ö†Ô∏è {currentAgent.Name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç {currentAgent.Name}: {ex.Message}");
                lastException = ex;
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            lock (_lockObject)
            {
                _currentAgentIndex = (_currentAgentIndex + 1) % _agents.Count;
            }
            attempts++;
        }

        // –ï—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        var errorMessage = $"‚ùå **–í—Å–µ AI –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!**\n\n";
        errorMessage += $"üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {attempts}\n";
        errorMessage += $"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {_agents.Count(a => a.IsAvailable)}/{_agents.Count}\n";
        
        if (lastException != null)
        {
            errorMessage += $"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {lastException.Message}";
        }

        return errorMessage;
    }

    public string GetAllAgentsStatus()
    {
        if (_agents.Count == 0)
        {
            return "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞!";
        }

        var status = "ü§ñ **–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö AI –∞–≥–µ–Ω—Ç–æ–≤:**\n\n";
        
        for (int i = 0; i < _agents.Count; i++)
        {
            var agent = _agents[i];
            var currentIndicator = i == _currentAgentIndex ? " üëà **–¢–ï–ö–£–©–ò–ô**" : "";
            status += $"**{i + 1}.** {agent.GetStatus()}{currentIndicator}\n";
        }

        var availableCount = _agents.Count(a => a.IsAvailable);
        status += $"\nüìä **–ò—Ç–æ–≥–æ:** {availableCount}/{_agents.Count} –∞–≥–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ";

        return status;
    }

    public string GetCurrentAgentStatus()
    {
        if (_agents.Count == 0)
        {
            return "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞!";
        }

        var currentAgent = _agents[_currentAgentIndex];
        return $"ü§ñ **–¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç:**\n\n{currentAgent.GetStatus()}";
    }

    public void SwitchToNextAgent()
    {
        lock (_lockObject)
        {
            _currentAgentIndex = (_currentAgentIndex + 1) % _agents.Count;
            Console.WriteLine($"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞: {_agents[_currentAgentIndex].Name}");
        }
    }

    public void SwitchToAgent(int agentIndex)
    {
        lock (_lockObject)
        {
            if (agentIndex >= 0 && agentIndex < _agents.Count)
            {
                _currentAgentIndex = agentIndex;
                Console.WriteLine($"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞: {_agents[_currentAgentIndex].Name}");
            }
        }
    }

    public void SwitchToWorkingAgent()
    {
        lock (_lockObject)
        {
            var workingAgent = _agents.FirstOrDefault(a => a.IsAvailable);
            if (workingAgent != null)
            {
                _currentAgentIndex = _agents.IndexOf(workingAgent);
                Console.WriteLine($"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π –∞–≥–µ–Ω—Ç: {workingAgent.Name}");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è");
            }
        }
    }

    public int GetAgentsCount()
    {
        return _agents.Count;
    }

    public bool HasAvailableAgents()
    {
        return _agents.Any(a => a.IsAvailable);
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    public async Task<string> GenerateResponseWithContextAsync(string prompt, long chatId)
    {
        if (_agents.Count == 0)
        {
            return "‚ùå **–û—à–∏–±–∫–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞!";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        AddMessageToContext(chatId, "user", prompt);

        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        var attempts = 0;
        Exception? lastException = null;

        while (attempts < _agents.Count)
        {
            GeminiAgent currentAgent;
            lock (_lockObject)
            {
                currentAgent = _agents[_currentAgentIndex];
            }

            try
            {
                Console.WriteLine($"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts + 1}/{_agents.Count}: {currentAgent.Name} (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)");
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                var contextPrompt = BuildContextPrompt(chatId);
                var response = await currentAgent.GenerateResponseAsync(contextPrompt);
                
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                if (!response.Contains("‚ùå") && !response.Contains("‚ö†Ô∏è"))
                {
                    Console.WriteLine($"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {currentAgent.Name}");
                    AddMessageToContext(chatId, "assistant", response);
                    return response;
                }
                
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                Console.WriteLine($"‚ö†Ô∏è {currentAgent.Name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç {currentAgent.Name}: {ex.Message}");
                lastException = ex;
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            lock (_lockObject)
            {
                _currentAgentIndex = (_currentAgentIndex + 1) % _agents.Count;
            }
            attempts++;
        }

        // –ï—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        var errorMessage = $"‚ùå **–í—Å–µ AI –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!**\n\n";
        errorMessage += $"üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {attempts}\n";
        errorMessage += $"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {_agents.Count(a => a.IsAvailable)}/{_agents.Count}\n";
        
        if (lastException != null)
        {
            errorMessage += $"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {lastException.Message}";
        }

        return errorMessage;
    }

    private void AddMessageToContext(long chatId, string role, string content)
    {
        if (!_chatContexts.ContainsKey(chatId))
        {
            _chatContexts[chatId] = new List<ChatMessage>();
        }

        _chatContexts[chatId].Add(new ChatMessage
        {
            Role = role,
            Content = content,
            Timestamp = DateTime.UtcNow
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if (_chatContexts[chatId].Count > MAX_CONTEXT_MESSAGES)
        {
            _chatContexts[chatId] = _chatContexts[chatId]
                .TakeLast(MAX_CONTEXT_MESSAGES)
                .ToList();
        }
    }

    private string BuildContextPrompt(long chatId)
    {
        if (!_chatContexts.ContainsKey(chatId) || _chatContexts[chatId].Count == 0)
        {
            return _chatContexts[chatId].LastOrDefault()?.Content ?? "";
        }

        var context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n";
        
        foreach (var message in _chatContexts[chatId].TakeLast(10)) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        {
            context += $"{message.Role}: {message.Content}\n\n";
        }

        return context;
    }

    public void ClearContext(long chatId)
    {
        if (_chatContexts.ContainsKey(chatId))
        {
            _chatContexts[chatId].Clear();
        }
    }

    public int GetTotalRequests()
    {
        lock (_lockObject)
        {
            return _agents.Sum(agent => agent.GetRequestCount());
        }
    }
}