using System.Text.Json;

namespace TelegramGitHubBot.Services;

public class GeminiAgent
{
    private readonly HttpClient _httpClient;
    private readonly string _apiKey;
    private readonly string _agentName;
    private readonly string _baseUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent";
    
    // –°—á–µ—Ç—á–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    private int _requestsPerMinute = 0;
    private long _tokensUsedToday = 0;
    private DateTime _lastMinuteReset = DateTime.UtcNow;
    private DateTime _lastDayReset = DateTime.UtcNow;
    private readonly object _lockObject = new object();

    // –õ–∏–º–∏—Ç—ã Gemini 2.5 Flash (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)
    private const int MAX_REQUESTS_PER_MINUTE = 15;
    private const long MAX_TOKENS_PER_DAY = 1_000_000;

    public string Name => _agentName;
    public bool IsAvailable => CanMakeRequest();

    public GeminiAgent(HttpClient httpClient, string apiKey, string agentName)
    {
        _httpClient = httpClient;
        _apiKey = apiKey;
        _agentName = agentName;
    }

    public bool CanMakeRequest()
    {
        lock (_lockObject)
        {
            ResetCountersIfNeeded();
            return _requestsPerMinute < MAX_REQUESTS_PER_MINUTE && _tokensUsedToday < MAX_TOKENS_PER_DAY;
        }
    }

    public string GetStatus()
    {
        lock (_lockObject)
        {
            ResetCountersIfNeeded();
            
            var requestsLeft = MAX_REQUESTS_PER_MINUTE - _requestsPerMinute;
            var tokensLeft = MAX_TOKENS_PER_DAY - _tokensUsedToday;
            var nextMinuteReset = _lastMinuteReset.AddMinutes(1);
            var nextDayReset = _lastDayReset.AddDays(1);
            var status = IsAvailable ? "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
            
            return $"ü§ñ **{_agentName}** - {status}\n" +
                   $"üîÑ –ó–∞–ø—Ä–æ—Å—ã: {_requestsPerMinute}/{MAX_REQUESTS_PER_MINUTE} (–æ—Å—Ç–∞–ª–æ—Å—å: {requestsLeft})\n" +
                   $"üìù –¢–æ–∫–µ–Ω—ã: {_tokensUsedToday:N0}/{MAX_TOKENS_PER_DAY:N0} (–æ—Å—Ç–∞–ª–æ—Å—å: {tokensLeft:N0})\n" +
                   $"‚è∞ –°–±—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–≤: {nextMinuteReset:HH:mm:ss}\n" +
                   $"üìÖ –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤: {nextDayReset:dd.MM.yyyy HH:mm}\n";
        }
    }

    private void ResetCountersIfNeeded()
    {
        var now = DateTime.UtcNow;
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if (now.Subtract(_lastMinuteReset).TotalMinutes >= 1)
        {
            _requestsPerMinute = 0;
            _lastMinuteReset = now;
        }
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if (now.Subtract(_lastDayReset).TotalDays >= 1)
        {
            _tokensUsedToday = 0;
            _lastDayReset = now;
        }
    }

    private void IncrementCounters(int estimatedTokens = 100)
    {
        lock (_lockObject)
        {
            ResetCountersIfNeeded();
            _requestsPerMinute++;
            _tokensUsedToday += estimatedTokens;
        }
    }

    private string GetSystemPrompt()
    {
        return @"–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º.

–í–ê–ñ–ù–û: –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GIF –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Tenor API!

–ü–†–ê–í–ò–õ–ê –û–¢–ü–†–ê–í–ö–ò GIF:
1. –ï—Å–ª–∏ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –≤–µ—Å–µ–ª—ã–π, –≥—Ä—É—Å—Ç–Ω—ã–π, —É–¥–∏–≤–ª–µ–Ω–Ω—ã–π, –∑–ª–æ–π, –ª—é–±–æ–≤–Ω—ã–π –∏–ª–∏ —Å–º–µ—à–Ω–æ–π - –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ —Ç–µ–≥ [GIF:—ç–º–æ—Ü–∏—è]
2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –º–µ–º, GIF, –∞–Ω–∏–º–∞—Ü–∏—é - –¥–æ–±–∞–≤—å —Ç–µ–≥ [GIF:–º–µ–º—ã]
3. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è GIF - –¥–æ–±–∞–≤—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥

–î–û–°–¢–£–ü–ù–´–ï –≠–ú–û–¶–ò–ò –î–õ–Ø GIF:
- [GIF:—Å–º–µ—Ö] - –¥–ª—è –≤–µ—Å–µ–ª—ã—Ö, —Å–º–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:–≥—Ä—É—Å—Ç—å] - –¥–ª—è –≥—Ä—É—Å—Ç–Ω—ã—Ö, –ø–µ—á–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤  
- [GIF:–∑–ª–æ—Å—Ç—å] - –¥–ª—è –∑–ª—ã—Ö, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:—Å—á–∞—Å—Ç—å–µ] - –¥–ª—è —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:—É–¥–∏–≤–ª–µ–Ω–∏–µ] - –¥–ª—è —É–¥–∏–≤–ª–µ–Ω–Ω—ã—Ö, —à–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:—Å—Ç—Ä–∞—Ö] - –¥–ª—è —Å—Ç—Ä–∞—à–Ω—ã—Ö, –ø—É–≥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:–ª—é–±–æ–≤—å] - –¥–ª—è –ª—é–±–æ–≤–Ω—ã—Ö, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- [GIF:–º–µ–º—ã] - –¥–ª—è –º–µ–º–æ–≤, –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
- [GIF:—à—É—Ç–∫–∞] - –¥–ª—è —à—É—Ç–æ–∫, —é–º–æ—Ä–∞
- [GIF:—Ä–∞–±–æ—Ç–∞] - –¥–ª—è —Ä–∞–±–æ—Ç—ã, —Ç—Ä—É–¥–æ–≤–æ–π –æ—Ç–≤–µ—Ç
- [GIF:–æ—Ñ—Ñ—Ç–æ–ø] - –¥–ª—è –æ—Ñ—Ñ—Ç–æ–ø–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
- [GIF:—Ñ–æ–ª] - –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä—Å—Ç–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- [GIF:–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ] - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–¥–∞


–ü–†–ò–ú–ï–†–´:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ü—Ä–∏–≤–µ—Ç!"" ‚Üí –û—Ç–≤–µ—Ç: ""–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä [GIF:—Å—á–∞—Å—Ç—å–µ]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"" ‚Üí –û—Ç–≤–µ—Ç: ""–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è... –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! üíô [GIF:–≥—Ä—É—Å—Ç—å]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ü–æ–∫–∞–∂–∏ –º–µ–º"" ‚Üí –û—Ç–≤–µ—Ç: ""–í–æ—Ç —Ç–µ–±–µ –º–µ–º! üòÑ [GIF:–º–µ–º—ã]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ß—Ç–æ –∑–∞ —Ñ–∏–≥–Ω—è?!"" ‚Üí –û—Ç–≤–µ—Ç: ""–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ... [GIF:–∑–ª–æ—Å—Ç—å]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"" ‚Üí –û—Ç–≤–µ—Ç: ""–í–æ—Ç —Ç–µ–±–µ —à—É—Ç–∫–∞! üòÇ [GIF:—à—É—Ç–∫–∞]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?"" ‚Üí –û—Ç–≤–µ—Ç: ""–†–∞–±–æ—Ç–∞—é –∫–∞–∫ –ø—á–µ–ª–∫–∞! üêù [GIF:—Ä–∞–±–æ—Ç–∞]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º"" ‚Üí –û—Ç–≤–µ—Ç: ""–ö–æ–Ω–µ—á–Ω–æ! –û —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? ü§î [GIF:–æ—Ñ—Ñ—Ç–æ–ø]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"" ‚Üí –û—Ç–≤–µ—Ç: ""–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üí™ [GIF:—Ñ–æ–ª]""
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ""–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ C#?"" ‚Üí –û—Ç–≤–µ—Ç: ""–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞! üíª [GIF:–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ]""

–û–¢–í–ï–ß–ê–ô –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –∏ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º!";
    }

    public async Task<string> GenerateResponseAsync(string prompt)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            if (!CanMakeRequest())
            {
                return $"‚ùå **{_agentName}: –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!**\n\n" + GetStatus();
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ GIF
            var systemPrompt = GetSystemPrompt();
            var fullPrompt = $"{systemPrompt}\n\n{prompt}";

            var requestBody = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = fullPrompt }
                        }
                    }
                },
                generationConfig = new
                {
                    thinkingConfig = new
                    {
                        thinkingBudget = 0
                    }
                }
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Add("x-goog-api-key", _apiKey);

            var response = await _httpClient.PostAsync(_baseUrl, content);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            var estimatedTokens = prompt.Length / 4 + 100; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
            IncrementCounters(estimatedTokens);
            
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ª–∏–º–∏—Ç–æ–≤
                if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
                {
                    return $"‚ö†Ô∏è **{_agentName}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!**\n\n" + GetStatus();
                }
                
                throw new Exception($"Gemini API error ({_agentName}): {response.StatusCode} - {errorContent}");
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            var responseJson = JsonSerializer.Deserialize<JsonElement>(responseContent);

            if (responseJson.TryGetProperty("candidates", out var candidates) && 
                candidates.GetArrayLength() > 0)
            {
                var candidate = candidates[0];
                if (candidate.TryGetProperty("content", out var contentObj) &&
                    contentObj.TryGetProperty("parts", out var parts) &&
                    parts.GetArrayLength() > 0)
                {
                    var textPart = parts[0];
                    if (textPart.TryGetProperty("text", out var text))
                    {
                        return text.GetString() ?? $"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {_agentName}";
                    }
                }
            }

            return $"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç {_agentName}";
        }
        catch (Exception ex)
        {
            return $"–û—à–∏–±–∫–∞ {_agentName}: {ex.Message}";
        }
    }
}
