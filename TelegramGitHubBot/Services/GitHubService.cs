using Octokit;

namespace TelegramGitHubBot.Services;

public class GitHubService
{
    private readonly GitHubClient _client;
    private const string Owner = "RaspizDIYs";
    private const string Repo = "goodluckv2";

    public GitHubService(GitHubClient client)
    {
        _client = client;
    }

    public async Task<string> GetRepositoryStatusAsync()
    {
        try
        {
            var repository = await _client.Repository.Get(Owner, Repo);
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var defaultBranch = branches.FirstOrDefault(b => b.Name == repository.DefaultBranch);

            var status = $"üìä *–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}*\n\n" +
                        $"üåü –ó–≤–µ–∑–¥—ã: {repository.StargazersCount}\n" +
                        $"üç¥ –§–æ—Ä–∫–∏: {repository.ForksCount}\n" +
                        $"üìÇ –†–∞–∑–º–µ—Ä: {repository.Size} KB\n" +
                        $"üîß –Ø–∑—ã–∫: {repository.Language}\n" +
                        $"üìÖ –°–æ–∑–¥–∞–Ω: {repository.CreatedAt:dd.MM.yyyy}\n" +
                        $"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {repository.UpdatedAt:dd.MM.yyyy}\n" +
                        $"üéØ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞: {repository.DefaultBranch}\n";

            if (defaultBranch?.Commit != null)
            {
                var latestCommit = await _client.Repository.Commit.Get(Owner, Repo, defaultBranch.Commit.Sha);
                status += $"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:\n" +
                         $"‚Ä¢ SHA: `{latestCommit.Sha[..8]}`\n" +
                         $"‚Ä¢ –ê–≤—Ç–æ—Ä: {latestCommit.Commit.Author.Name}\n" +
                         $"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {latestCommit.Commit.Message.Split('\n')[0]}\n" +
                         $"‚Ä¢ –î–∞—Ç–∞: {latestCommit.Commit.Author.Date:dd.MM.yyyy HH:mm}";
            }

            return status;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {ex.Message}";
        }
    }

    public async Task<string> GetRecentCommitsAsync(string branch, int count)
    {
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Sha = branch }, new ApiOptions { PageSize = count, PageCount = 1 });

            if (!commits.Any())
                return $"‚ùå –í –≤–µ—Ç–∫–µ '{branch}' –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∏–ª–∏ –≤–µ—Ç–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";

            var result = $"üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, commits.Count)} –∫–æ–º–º–∏—Ç–æ–≤ –≤ –≤–µ—Ç–∫–µ {branch}:*\n\n";

            foreach (var commit in commits.Take(count))
            {
                var author = commit.Commit.Author.Name;
                var message = commit.Commit.Message.Split('\n')[0];
                var date = commit.Commit.Author.Date;
                var sha = commit.Sha[..8];

                result += $"üîπ `{sha}` - {author}\n" +
                         $"   _{message}_\n" +
                         $"   üìÖ {date:dd.MM.yyyy HH:mm}\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetBranchesAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var repository = await _client.Repository.Get(Owner, Repo);
            var defaultBranch = repository.DefaultBranch;

            var result = $"üåø *–í–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}:*\n\n";

            foreach (var branch in branches.OrderByDescending(b => b.Name == defaultBranch))
            {
                var isDefault = branch.Name == defaultBranch ? " (–æ—Å–Ω–æ–≤–Ω–∞—è)" : "";
                var protectedBadge = branch.Protected ? "üîí" : "üîì";

                result += $"{protectedBadge} `{branch.Name}`{isDefault}\n";

                if (branch.Commit != null)
                {
                    try
                    {
                        var commit = await _client.Repository.Commit.Get(Owner, Repo, branch.Commit.Sha);
                        result += $"   üìù {commit.Commit.Author.Name}: {commit.Commit.Message.Split('\n')[0]}\n" +
                                 $"   üìÖ {commit.Commit.Author.Date:dd.MM.yyyy HH:mm}\n\n";
                    }
                    catch
                    {
                        result += $"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {branch.Commit.Sha[..8]}\n\n";
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}";
        }
    }

    public async Task<string> GetPullRequestsAsync()
    {
        try
        {
            var prs = await _client.PullRequest.GetAllForRepository(Owner, Repo,
                new PullRequestRequest { State = ItemStateFilter.Open });

            if (!prs.Any())
                return "‚úÖ *–û—Ç–∫—Ä—ã—Ç—ã—Ö pull requests –Ω–µ—Ç*";

            var result = $"üîÑ *–û—Ç–∫—Ä—ã—Ç—ã–µ pull requests ({prs.Count}):*\n\n";

            foreach (var pr in prs.OrderByDescending(p => p.CreatedAt))
            {
                var status = pr.Draft ? "üìù Draft" : "‚úÖ Ready";
                var reviews = pr.RequestedReviewers?.Any() == true ? $" üëÄ {pr.RequestedReviewers.Count}" : "";

                result += $"#{pr.Number} {status}{reviews}\n" +
                         $"üìã *{pr.Title}*\n" +
                         $"üë§ {pr.User.Login}\n" +
                         $"üìä {pr.Commits} commits, {pr.ChangedFiles} files\n" +
                         $"üìÖ –°–æ–∑–¥–∞–Ω: {pr.CreatedAt:dd.MM.yyyy HH:mm}\n";

                if (!string.IsNullOrEmpty(pr.Body))
                {
                    var description = pr.Body.Length > 100 ? pr.Body[..97] + "..." : pr.Body;
                    result += $"üìù {description.Replace('\n', ' ').Replace('\r', ' ')}\n";
                }

                result += $"\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å PR]({pr.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pull requests: {ex.Message}";
        }
    }

    public async Task<string> GetWorkflowRunsAsync(string? branch = null, int count = 5)
    {
        try
        {
            var request = new WorkflowRunsRequest();
            if (!string.IsNullOrEmpty(branch))
                request.Branch = branch!;

            var runs = await _client.Actions.Workflows.Runs.List(Owner, Repo, request,
                new ApiOptions { PageSize = count, PageCount = 1 });

            if (!runs.WorkflowRuns.Any())
                return $"‚ùå CI/CD –∑–∞–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–µ—Ç–∫–∏ '{branch ?? "–≤—Å–µ"}'";

            var result = $"‚öôÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, runs.WorkflowRuns.Count)} CI/CD –∑–∞–ø—É—Å–∫–æ–≤:*\n\n";

            foreach (var run in runs.WorkflowRuns.OrderByDescending(r => r.CreatedAt))
            {
                var status = run.Status.StringValue switch
                {
                    "completed" => run.Conclusion?.StringValue switch
                    {
                        "success" => "‚úÖ",
                        "failure" => "‚ùå",
                        "cancelled" => "üö´",
                        _ => "‚ö†Ô∏è"
                    },
                    "in_progress" => "üîÑ",
                    "queued" => "‚è≥",
                    _ => "‚ùì"
                };

                result += $"{status} `{run.Name}` #{run.RunNumber}\n" +
                         $"üåø –í–µ—Ç–∫–∞: {run.HeadBranch}\n" +
                         $"üìÖ {run.CreatedAt:dd.MM.yyyy HH:mm} - {run.UpdatedAt:dd.MM.yyyy HH:mm}\n" +
                         $"üë§ {run.TriggeringActor.Login}\n" +
                         $"üîó [–î–µ—Ç–∞–ª–∏]({run.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}";
        }
    }
}
