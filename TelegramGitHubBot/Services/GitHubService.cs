using Octokit;

namespace TelegramGitHubBot.Services;

public class GitHubService
{
    private readonly GitHubClient _client;
    private const string Owner = "RaspizDIYs";
    private const string Repo = "goodluckv2";

    public GitHubService(GitHubClient client)
    {
        _client = client;
    }

    public async Task<string> GetRepositoryStatusAsync()
    {
        try
        {
            var repository = await _client.Repository.Get(Owner, Repo);
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var defaultBranch = branches.FirstOrDefault(b => b.Name == repository.DefaultBranch);

            var status = $"üìä *–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}*\n\n" +
                        $"üåü –ó–≤–µ–∑–¥—ã: {repository.StargazersCount}\n" +
                        $"üç¥ –§–æ—Ä–∫–∏: {repository.ForksCount}\n" +
                        $"üìÇ –†–∞–∑–º–µ—Ä: {repository.Size} KB\n" +
                        $"üîß –Ø–∑—ã–∫: {repository.Language}\n" +
                        $"üìÖ –°–æ–∑–¥–∞–Ω: {repository.CreatedAt:dd.MM.yyyy}\n" +
                        $"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {repository.UpdatedAt:dd.MM.yyyy}\n" +
                        $"üéØ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞: {repository.DefaultBranch}\n";

            if (defaultBranch?.Commit != null)
            {
                var latestCommit = await _client.Repository.Commit.Get(Owner, Repo, defaultBranch.Commit.Sha);
                status += $"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:\n" +
                         $"‚Ä¢ SHA: `{latestCommit.Sha[..8]}`\n" +
                         $"‚Ä¢ –ê–≤—Ç–æ—Ä: {latestCommit.Commit.Author.Name}\n" +
                         $"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {latestCommit.Commit.Message.Split('\n')[0]}\n" +
                         $"‚Ä¢ –î–∞—Ç–∞: {latestCommit.Commit.Author.Date:dd.MM.yyyy HH:mm}";
            }

            return status;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {ex.Message}";
        }
    }

    public async Task<string> GetRecentCommitsAsync(string branch, int count)
    {
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Sha = branch }, new ApiOptions { PageSize = count, PageCount = 1 });

            if (!commits.Any())
                return $"‚ùå –í –≤–µ—Ç–∫–µ '{branch}' –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∏–ª–∏ –≤–µ—Ç–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";

            var result = $"üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, commits.Count)} –∫–æ–º–º–∏—Ç–æ–≤ –≤ –≤–µ—Ç–∫–µ {branch}:*\n\n";

            foreach (var commit in commits.Take(count))
            {
                var author = commit.Commit.Author.Name;
                var message = commit.Commit.Message.Split('\n')[0];
                var date = commit.Commit.Author.Date;
                var sha = commit.Sha[..8];

                result += $"üîπ `{sha}` - {author}\n" +
                         $"   _{message}_\n" +
                         $"   üìÖ {date:dd.MM.yyyy HH:mm}\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetBranchesAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var repository = await _client.Repository.Get(Owner, Repo);
            var defaultBranch = repository.DefaultBranch;

            var result = $"üåø *–í–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}:*\n\n";

            foreach (var branch in branches.OrderByDescending(b => b.Name == defaultBranch))
            {
                var isDefault = branch.Name == defaultBranch ? " (–æ—Å–Ω–æ–≤–Ω–∞—è)" : "";
                var protectedBadge = branch.Protected ? "üîí" : "üîì";

                result += $"{protectedBadge} `{branch.Name}`{isDefault}\n";

                if (branch.Commit != null)
                {
                    try
                    {
                        var commit = await _client.Repository.Commit.Get(Owner, Repo, branch.Commit.Sha);
                        result += $"   üìù {commit.Commit.Author.Name}: {commit.Commit.Message.Split('\n')[0]}\n" +
                                 $"   üìÖ {commit.Commit.Author.Date:dd.MM.yyyy HH:mm}\n\n";
                    }
                    catch
                    {
                        result += $"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {branch.Commit.Sha[..8]}\n\n";
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}";
        }
    }

    public async Task<string> GetPullRequestsAsync()
    {
        try
        {
            var prs = await _client.PullRequest.GetAllForRepository(Owner, Repo,
                new PullRequestRequest { State = ItemStateFilter.Open });

            if (!prs.Any())
                return "‚úÖ *–û—Ç–∫—Ä—ã—Ç—ã—Ö pull requests –Ω–µ—Ç*";

            var result = $"üîÑ *–û—Ç–∫—Ä—ã—Ç—ã–µ pull requests ({prs.Count}):*\n\n";

            foreach (var pr in prs.OrderByDescending(p => p.CreatedAt))
            {
                var status = pr.Draft ? "üìù Draft" : "‚úÖ Ready";
                var reviews = pr.RequestedReviewers?.Any() == true ? $" üëÄ {pr.RequestedReviewers.Count}" : "";

                result += $"#{pr.Number} {status}{reviews}\n" +
                         $"üìã *{pr.Title}*\n" +
                         $"üë§ {pr.User.Login}\n" +
                         $"üìä {pr.Commits} commits, {pr.ChangedFiles} files\n" +
                         $"üìÖ –°–æ–∑–¥–∞–Ω: {pr.CreatedAt:dd.MM.yyyy HH:mm}\n";

                if (!string.IsNullOrEmpty(pr.Body))
                {
                    var description = pr.Body.Length > 100 ? pr.Body[..97] + "..." : pr.Body;
                    result += $"üìù {description.Replace('\n', ' ').Replace('\r', ' ')}\n";
                }

                result += $"\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å PR]({pr.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pull requests: {ex.Message}";
        }
    }

    public async Task<string> GetWorkflowRunsAsync(string? branch = null, int count = 5)
    {
        try
        {
            var request = new WorkflowRunsRequest();
            if (!string.IsNullOrEmpty(branch))
                request.Branch = branch!;

            var runs = await _client.Actions.Workflows.Runs.List(Owner, Repo, request,
                new ApiOptions { PageSize = count, PageCount = 1 });

            if (!runs.WorkflowRuns.Any())
                return $"‚ùå CI/CD –∑–∞–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–µ—Ç–∫–∏ '{branch ?? "–≤—Å–µ"}'";

            var result = $"‚öôÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, runs.WorkflowRuns.Count)} CI/CD –∑–∞–ø—É—Å–∫–æ–≤:*\n\n";

            foreach (var run in runs.WorkflowRuns.OrderByDescending(r => r.CreatedAt))
            {
                var status = run.Status.StringValue switch
                {
                    "completed" => run.Conclusion?.StringValue switch
                    {
                        "success" => "‚úÖ",
                        "failure" => "‚ùå",
                        "cancelled" => "üö´",
                        _ => "‚ö†Ô∏è"
                    },
                    "in_progress" => "üîÑ",
                    "queued" => "‚è≥",
                    _ => "‚ùì"
                };

                result += $"{status} `{run.Name}` #{run.RunNumber}\n" +
                         $"üåø –í–µ—Ç–∫–∞: {run.HeadBranch}\n" +
                         $"üìÖ {run.CreatedAt:dd.MM.yyyy HH:mm} - {run.UpdatedAt:dd.MM.yyyy HH:mm}\n" +
                         $"üë§ {run.TriggeringActor.Login}\n" +
                         $"üîó [–î–µ—Ç–∞–ª–∏]({run.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetCommitDetailsAsync(string commitSha)
    {
        try
        {
            var commit = await _client.Repository.Commit.Get(Owner, Repo, commitSha);

            var details = $"üìã *–î–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞*\n\n" +
                         $"üë§ –ê–≤—Ç–æ—Ä: {commit.Commit.Author.Name}\n" +
                         $"üìÖ –î–∞—Ç–∞: {commit.Commit.Author.Date:dd.MM.yyyy HH:mm:ss}\n\n" +
                         $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n```\n{commit.Commit.Message}\n```\n";

            if (commit.Files?.Any() == true)
            {
                details += $"üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({commit.Files.Count}):\n";

                foreach (var file in commit.Files.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
                {
                    var changeType = file.Status switch
                    {
                        "added" => "üü¢",
                        "modified" => "üü°",
                        "removed" => "üî¥",
                        "renamed" => "üîµ",
                        _ => "‚ö™"
                    };

                    details += $"{changeType} `{file.Filename}`\n";

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    try
                    {
                        var previousFileName = file.GetType().GetProperty("PreviousFileName")?.GetValue(file) as string;
                        if (!string.IsNullOrEmpty(previousFileName) && previousFileName != file.Filename)
                        {
                            details += $"   ‚Ü≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏–∑ `{previousFileName}`\n";
                        }
                    }
                    catch
                    {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    }
                }

                if (commit.Files.Count > 10)
                {
                    details += $"... –∏ –µ—â—ë {commit.Files.Count - 10} —Ñ–∞–π–ª–æ–≤\n";
                }

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                var additions = commit.Stats?.Additions ?? 0;
                var deletions = commit.Stats?.Deletions ?? 0;
                var totalChanges = commit.Stats?.Total ?? 0;

                details += $"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                          $"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {additions} —Å—Ç—Ä–æ–∫\n" +
                          $"‚ûñ –£–¥–∞–ª–µ–Ω–æ: {deletions} —Å—Ç—Ä–æ–∫\n" +
                          $"üìà –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {totalChanges} —Å—Ç—Ä–æ–∫\n";
            }

            if (commit.Parents?.Any() == true)
            {
                details += $"\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã:\n";
                foreach (var parent in commit.Parents.Take(3))
                {
                    details += $"‚Ä¢ `{parent.Sha[..8]}`\n";
                }
            }

            details += $"\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ GitHub]({commit.HtmlUrl})";

            return details;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞ {commitSha}: {ex.Message}";
        }
    }

    public class AuthorStats
    {
        public int Commits { get; set; }
        public int Additions { get; set; }
        public int Deletions { get; set; }
        public int TotalChanges => Additions + Deletions;
    }

    public async Task<(Dictionary<string, int> BranchStats, Dictionary<string, AuthorStats> AuthorStats)> GetDailyCommitStatsAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var branchStats = new Dictionary<string, int>();
            var authorStats = new Dictionary<string, AuthorStats>();
            var yesterday = DateTime.UtcNow.AddDays(-1);
            var today = DateTime.UtcNow;

            foreach (var branch in branches)
            {
                try
                {
                    var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                        new CommitRequest { Sha = branch.Name, Since = yesterday, Until = today });

                    branchStats[branch.Name] = commits.Count;

                    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    foreach (var commit in commits)
                    {
                        var author = commit.Commit.Author.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
                        
                        if (!authorStats.ContainsKey(author))
                        {
                            authorStats[author] = new AuthorStats();
                        }

                        authorStats[author].Commits++;

                        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        try
                        {
                            var detailedCommit = await _client.Repository.Commit.Get(Owner, Repo, commit.Sha);
                            if (detailedCommit.Stats != null)
                            {
                                authorStats[author].Additions += detailedCommit.Stats.Additions;
                                authorStats[author].Deletions += detailedCommit.Stats.Deletions;
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error getting detailed commit {commit.Sha}: {ex.Message}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error getting commits for branch {branch.Name}: {ex.Message}");
                    branchStats[branch.Name] = 0;
                }
            }

            return (branchStats, authorStats);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting daily commit stats: {ex.Message}");
            return (new Dictionary<string, int>(), new Dictionary<string, AuthorStats>());
        }
    }

    public async Task<(int Success, int Failure)> GetDailyWorkflowStatsAsync()
    {
        try
        {
            var yesterday = DateTime.UtcNow.AddDays(-1);
            var request = new WorkflowRunsRequest { Created = $">{yesterday.ToString("yyyy-MM-ddTHH:mm:ssZ")}" };

            var runs = await _client.Actions.Workflows.Runs.List(Owner, Repo, request);

            var successCount = runs.WorkflowRuns.Count(r => r.Status.StringValue == "completed" && r.Conclusion?.StringValue == "success");
            var failureCount = runs.WorkflowRuns.Count(r => r.Status.StringValue == "completed" && r.Conclusion?.StringValue == "failure");

            return (successCount, failureCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting daily workflow stats: {ex.Message}");
            return (0, 0);
        }
    }

    public async Task<List<string>> GetBranchesListAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            return branches.Select(b => b.Name).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting branches list: {ex.Message}");
            return new List<string>();
        }
    }

    public async Task<string> SearchCommitsAsync(string query, int limit = 10)
    {
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo, 
                new CommitRequest(), new ApiOptions { PageSize = 50, PageCount = 1 });

            var filteredCommits = commits
                .Where(c => c.Commit.Message.Contains(query, StringComparison.OrdinalIgnoreCase))
                .Take(limit)
                .ToList();

            if (!filteredCommits.Any())
                return "";

            var result = $"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':*\n\n";

            foreach (var commit in filteredCommits)
            {
                var author = commit.Commit.Author.Name;
                var message = commit.Commit.Message.Split('\n')[0];
                var date = commit.Commit.Author.Date;
                var sha = commit.Sha[..8];

                result += $"üîπ `{sha}` - {author}\n" +
                         $"   _{message}_\n" +
                         $"   üìÖ {date:dd.MM.yyyy HH:mm}\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}";
        }
    }

    public async Task<string> GetActiveAuthorsAsync(int days = 30)
    {
        try
        {
            var since = DateTime.UtcNow.AddDays(-days);
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = since }, new ApiOptions { PageSize = 100, PageCount = 1 });

            var authorStats = commits
                .GroupBy(c => c.Commit.Author.Name)
                .Select(g => new { Author = g.Key, Count = g.Count() })
                .OrderByDescending(a => a.Count)
                .Take(10)
                .ToList();

            if (!authorStats.Any())
                return "üë• *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*";

            var result = $"üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –∑–∞ {days} –¥–Ω–µ–π:*\n\n";

            foreach (var author in authorStats)
            {
                result += $"üë§ {author.Author}: {author.Count} –∫–æ–º–º–∏—Ç{(author.Count != 1 ? "–æ–≤" : "")}\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetCommitFilesAsync(string commitSha)
    {
        try
        {
            var commit = await _client.Repository.Commit.Get(Owner, Repo, commitSha);

            if (commit.Files?.Any() != true)
                return $"üìÅ *–§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ {commitSha[..8]}:*\n\n–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";

            var result = $"üìÅ *–§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ {commitSha[..8]}:*\n\n";

            foreach (var file in commit.Files.Take(15))
            {
                var changeType = file.Status switch
                {
                    "added" => "üü¢ –î–æ–±–∞–≤–ª–µ–Ω",
                    "modified" => "üü° –ò–∑–º–µ–Ω–µ–Ω",
                    "removed" => "üî¥ –£–¥–∞–ª–µ–Ω",
                    "renamed" => "üîµ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω",
                    _ => "‚ö™ –ò–∑–º–µ–Ω–µ–Ω"
                };

                result += $"{changeType}: `{file.Filename}`\n";
                
                if (file.Additions > 0 || file.Deletions > 0)
                {
                    result += $"   üìä +{file.Additions} -{file.Deletions}\n";
                }
                result += "\n";
            }

            if (commit.Files.Count > 15)
            {
                result += $"... –∏ –µ—â—ë {commit.Files.Count - 15} —Ñ–∞–π–ª–æ–≤\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–º–º–∏—Ç–∞: {ex.Message}";
        }
    }
}
