using Octokit;

namespace TelegramGitHubBot.Services;

public class GitHubService
{
    private readonly GitHubClient _client;
    private const string Owner = "RaspizDIYs";
    private const string Repo = "goodluckv2";

    public GitHubService(GitHubClient client)
    {
        _client = client;
    }

    public class GitCommitInfo
    {
        public string Sha { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public int Additions { get; set; }
        public int Deletions { get; set; }
    }

    public async Task<List<GitCommitInfo>> GetRecentCommitsWithStatsAsync(string branch, int count = 10)
    {
        var result = new List<GitCommitInfo>();
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Sha = branch }, new ApiOptions { PageSize = count, PageCount = 1 });

            foreach (var c in commits.Take(count))
            {
                var authorName = c.Commit.Author?.Name ?? c.Author?.Login ?? "Unknown";
                var authorEmail = c.Commit.Author?.Email ?? string.Empty;
                var date = c.Commit.Author?.Date.DateTime ?? DateTime.UtcNow;
                var message = c.Commit.Message ?? string.Empty;

                int additions = 0, deletions = 0;
                try
                {
                    var detailed = await _client.Repository.Commit.Get(Owner, Repo, c.Sha);
                    additions = detailed.Stats?.Additions ?? 0;
                    deletions = detailed.Stats?.Deletions ?? 0;
                }
                catch { }

                result.Add(new GitCommitInfo
                {
                    Sha = c.Sha,
                    Author = authorName,
                    Email = authorEmail,
                    Date = date,
                    Message = message,
                    Additions = additions,
                    Deletions = deletions
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting commits for branch {branch}: {ex.Message}");
        }

        return result;
    }

    public async Task<string> GetRepositoryStatusAsync()
    {
        try
        {
            var repository = await _client.Repository.Get(Owner, Repo);
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var defaultBranch = branches.FirstOrDefault(b => b.Name == repository.DefaultBranch);

            var status = $"üìä *–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}*\n\n" +
                        $"üåü –ó–≤–µ–∑–¥—ã: {repository.StargazersCount}\n" +
                        $"üç¥ –§–æ—Ä–∫–∏: {repository.ForksCount}\n" +
                        $"üìÇ –†–∞–∑–º–µ—Ä: {repository.Size} KB\n" +
                        $"üîß –Ø–∑—ã–∫: {repository.Language}\n" +
                        $"üìÖ –°–æ–∑–¥–∞–Ω: {repository.CreatedAt:dd.MM.yyyy}\n" +
                        $"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {repository.UpdatedAt:dd.MM.yyyy}\n" +
                        $"üéØ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞: {repository.DefaultBranch}\n";

            if (defaultBranch?.Commit != null)
            {
                var latestCommit = await _client.Repository.Commit.Get(Owner, Repo, defaultBranch.Commit.Sha);
                status += $"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:\n" +
                         $"‚Ä¢ SHA: `{latestCommit.Sha[..8]}`\n" +
                         $"‚Ä¢ –ê–≤—Ç–æ—Ä: {latestCommit.Commit.Author.Name}\n" +
                         $"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {latestCommit.Commit.Message.Split('\n')[0]}\n" +
                         $"‚Ä¢ –î–∞—Ç–∞: {latestCommit.Commit.Author.Date:dd.MM.yyyy HH:mm}";
            }

            return status;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {ex.Message}";
        }
    }

    public async Task<string> GetRecentCommitsAsync(string branch, int count)
    {
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Sha = branch }, new ApiOptions { PageSize = count, PageCount = 1 });

            if (!commits.Any())
                return $"‚ùå –í –≤–µ—Ç–∫–µ '{branch}' –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∏–ª–∏ –≤–µ—Ç–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";

            var result = $"üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, commits.Count)} –∫–æ–º–º–∏—Ç–æ–≤ –≤ –≤–µ—Ç–∫–µ {branch}:*\n\n";

            foreach (var commit in commits.Take(count))
            {
                var author = commit.Commit.Author.Name;
                var message = commit.Commit.Message.Split('\n')[0];
                var date = commit.Commit.Author.Date;
                var sha = commit.Sha[..8];

                result += $"üîπ `{sha}` - {author}\n" +
                         $"   _{message}_\n" +
                         $"   üìÖ {date:dd.MM.yyyy HH:mm}\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetBranchesAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var repository = await _client.Repository.Get(Owner, Repo);
            var defaultBranch = repository.DefaultBranch;

            var result = $"üåø *–í–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {Owner}/{Repo}:*\n\n";

            foreach (var branch in branches.OrderByDescending(b => b.Name == defaultBranch))
            {
                var isDefault = branch.Name == defaultBranch ? " (–æ—Å–Ω–æ–≤–Ω–∞—è)" : "";
                var protectedBadge = branch.Protected ? "üîí" : "üîì";

                result += $"{protectedBadge} `{branch.Name}`{isDefault}\n";

                if (branch.Commit != null)
                {
                    try
                    {
                        var commit = await _client.Repository.Commit.Get(Owner, Repo, branch.Commit.Sha);
                        result += $"   üìù {commit.Commit.Author.Name}: {commit.Commit.Message.Split('\n')[0]}\n" +
                                 $"   üìÖ {commit.Commit.Author.Date:dd.MM.yyyy HH:mm}\n\n";
                    }
                    catch
                    {
                        result += $"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {branch.Commit.Sha[..8]}\n\n";
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}";
        }
    }

    public async Task<string> GetPullRequestsAsync()
    {
        try
        {
            var prs = await _client.PullRequest.GetAllForRepository(Owner, Repo,
                new PullRequestRequest { State = ItemStateFilter.Open });

            if (!prs.Any())
                return "‚úÖ *–û—Ç–∫—Ä—ã—Ç—ã—Ö pull requests –Ω–µ—Ç*";

            var result = $"üîÑ *–û—Ç–∫—Ä—ã—Ç—ã–µ pull requests ({prs.Count}):*\n\n";

            foreach (var pr in prs.OrderByDescending(p => p.CreatedAt))
            {
                var status = pr.Draft ? "üìù Draft" : "‚úÖ Ready";
                var reviews = pr.RequestedReviewers?.Any() == true ? $" üëÄ {pr.RequestedReviewers.Count}" : "";

                result += $"#{pr.Number} {status}{reviews}\n" +
                         $"üìã *{pr.Title}*\n" +
                         $"üë§ {pr.User.Login}\n" +
                         $"üìä {pr.Commits} commits, {pr.ChangedFiles} files\n" +
                         $"üìÖ –°–æ–∑–¥–∞–Ω: {pr.CreatedAt:dd.MM.yyyy HH:mm}\n";

                if (!string.IsNullOrEmpty(pr.Body))
                {
                    var description = pr.Body.Length > 100 ? pr.Body[..97] + "..." : pr.Body;
                    result += $"üìù {description.Replace('\n', ' ').Replace('\r', ' ')}\n";
                }

                result += $"\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å PR]({pr.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pull requests: {ex.Message}";
        }
    }

    public async Task<string> GetWorkflowRunsAsync(string? branch = null, int count = 5)
    {
        try
        {
            var request = new WorkflowRunsRequest();
            if (!string.IsNullOrEmpty(branch))
                request.Branch = branch!;

            var runs = await _client.Actions.Workflows.Runs.List(Owner, Repo, request,
                new ApiOptions { PageSize = count, PageCount = 1 });

            if (!runs.WorkflowRuns.Any())
                return $"‚ùå CI/CD –∑–∞–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–µ—Ç–∫–∏ '{branch ?? "–≤—Å–µ"}'";

            var result = $"‚öôÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {Math.Min(count, runs.WorkflowRuns.Count)} CI/CD –∑–∞–ø—É—Å–∫–æ–≤:*\n\n";

            foreach (var run in runs.WorkflowRuns.OrderByDescending(r => r.CreatedAt))
            {
                var status = run.Status.StringValue switch
                {
                    "completed" => run.Conclusion?.StringValue switch
                    {
                        "success" => "‚úÖ",
                        "failure" => "‚ùå",
                        "cancelled" => "üö´",
                        _ => "‚ö†Ô∏è"
                    },
                    "in_progress" => "üîÑ",
                    "queued" => "‚è≥",
                    _ => "‚ùì"
                };

                result += $"{status} `{run.Name}` #{run.RunNumber}\n" +
                         $"üåø –í–µ—Ç–∫–∞: {run.HeadBranch}\n" +
                         $"üìÖ {run.CreatedAt:dd.MM.yyyy HH:mm} - {run.UpdatedAt:dd.MM.yyyy HH:mm}\n" +
                         $"üë§ {run.TriggeringActor.Login}\n" +
                         $"üîó [–î–µ—Ç–∞–ª–∏]({run.HtmlUrl})\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetCommitDetailsAsync(string commitSha)
    {
        try
        {
            var commit = await _client.Repository.Commit.Get(Owner, Repo, commitSha);

            var details = $"üìã *–î–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞*\n\n" +
                         $"üë§ –ê–≤—Ç–æ—Ä: {commit.Commit.Author.Name}\n" +
                         $"üìÖ –î–∞—Ç–∞: {commit.Commit.Author.Date:dd.MM.yyyy HH:mm:ss}\n\n" +
                         $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n```\n{commit.Commit.Message}\n```\n";

            if (commit.Files?.Any() == true)
            {
                details += $"üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({commit.Files.Count}):\n";

                foreach (var file in commit.Files.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
                {
                    var changeType = file.Status switch
                    {
                        "added" => "üü¢",
                        "modified" => "üü°",
                        "removed" => "üî¥",
                        "renamed" => "üîµ",
                        _ => "‚ö™"
                    };

                    details += $"{changeType} `{file.Filename}`\n";

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    try
                    {
                        var previousFileName = file.GetType().GetProperty("PreviousFileName")?.GetValue(file) as string;
                        if (!string.IsNullOrEmpty(previousFileName) && previousFileName != file.Filename)
                        {
                            details += $"   ‚Ü≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏–∑ `{previousFileName}`\n";
                        }
                    }
                    catch
                    {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    }
                }

                if (commit.Files.Count > 10)
                {
                    details += $"... –∏ –µ—â—ë {commit.Files.Count - 10} —Ñ–∞–π–ª–æ–≤\n";
                }

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                var additions = commit.Stats?.Additions ?? 0;
                var deletions = commit.Stats?.Deletions ?? 0;
                var totalChanges = commit.Stats?.Total ?? 0;

                details += $"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                          $"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {additions} —Å—Ç—Ä–æ–∫\n" +
                          $"‚ûñ –£–¥–∞–ª–µ–Ω–æ: {deletions} —Å—Ç—Ä–æ–∫\n" +
                          $"üìà –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {totalChanges} —Å—Ç—Ä–æ–∫\n";
            }

            if (commit.Parents?.Any() == true)
            {
                details += $"\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã:\n";
                foreach (var parent in commit.Parents.Take(3))
                {
                    details += $"‚Ä¢ `{parent.Sha[..8]}`\n";
                }
            }

            details += $"\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ GitHub]({commit.HtmlUrl})";

            return details;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞ {commitSha}: {ex.Message}";
        }
    }

    public async Task<(int additions, int deletions, int total)> GetCommitStatsAsync(string commitSha)
    {
        try
        {
            var commit = await _client.Repository.Commit.Get(Owner, Repo, commitSha);
            var additions = commit.Stats?.Additions ?? 0;
            var deletions = commit.Stats?.Deletions ?? 0;
            var total = commit.Stats?.Total ?? additions + deletions;
            return (additions, deletions, total);
        }
        catch
        {
            return (0, 0, 0);
        }
    }

    public class AuthorStats
    {
        public int Commits { get; set; }
        public int Additions { get; set; }
        public int Deletions { get; set; }
        public int TotalChanges => Additions + Deletions;
    }

    public async Task<(Dictionary<string, int> BranchStats, Dictionary<string, AuthorStats> AuthorStats)> GetDailyCommitStatsAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            var branchStats = new Dictionary<string, int>();
            var authorStats = new Dictionary<string, AuthorStats>();
            var yesterday = DateTime.UtcNow.AddDays(-1);
            var today = DateTime.UtcNow;

            foreach (var branch in branches)
            {
                try
                {
                    var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                        new CommitRequest { Sha = branch.Name, Since = yesterday, Until = today });

                    branchStats[branch.Name] = commits.Count;

                    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    foreach (var commit in commits)
                    {
                        var author = commit.Commit.Author.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
                        
                        if (!authorStats.ContainsKey(author))
                        {
                            authorStats[author] = new AuthorStats();
                        }

                        authorStats[author].Commits++;

                        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        try
                        {
                            var detailedCommit = await _client.Repository.Commit.Get(Owner, Repo, commit.Sha);
                            if (detailedCommit.Stats != null)
                            {
                                authorStats[author].Additions += detailedCommit.Stats.Additions;
                                authorStats[author].Deletions += detailedCommit.Stats.Deletions;
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error getting detailed commit {commit.Sha}: {ex.Message}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error getting commits for branch {branch.Name}: {ex.Message}");
                    branchStats[branch.Name] = 0;
                }
            }

            return (branchStats, authorStats);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting daily commit stats: {ex.Message}");
            return (new Dictionary<string, int>(), new Dictionary<string, AuthorStats>());
        }
    }

    public async Task<(int Success, int Failure)> GetDailyWorkflowStatsAsync()
    {
        try
        {
            var yesterday = DateTime.UtcNow.AddDays(-1);
            var request = new WorkflowRunsRequest { Created = $">{yesterday.ToString("yyyy-MM-ddTHH:mm:ssZ")}" };

            var runs = await _client.Actions.Workflows.Runs.List(Owner, Repo, request);

            var successCount = runs.WorkflowRuns.Count(r => r.Status.StringValue == "completed" && r.Conclusion?.StringValue == "success");
            var failureCount = runs.WorkflowRuns.Count(r => r.Status.StringValue == "completed" && r.Conclusion?.StringValue == "failure");

            return (successCount, failureCount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting daily workflow stats: {ex.Message}");
            return (0, 0);
        }
    }

    public async Task<List<string>> GetBranchesListAsync()
    {
        try
        {
            var branches = await _client.Repository.Branch.GetAll(Owner, Repo);
            return branches.Select(b => b.Name).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting branches list: {ex.Message}");
            return new List<string>();
        }
    }

    public async Task<string> SearchCommitsAsync(string query, int limit = 10)
    {
        try
        {
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo, 
                new CommitRequest(), new ApiOptions { PageSize = 50, PageCount = 1 });

            var filteredCommits = commits
                .Where(c => c.Commit.Message.Contains(query, StringComparison.OrdinalIgnoreCase))
                .Take(limit)
                .ToList();

            if (!filteredCommits.Any())
                return "";

            var result = $"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':*\n\n";

            foreach (var commit in filteredCommits)
            {
                var author = commit.Commit.Author.Name;
                var message = commit.Commit.Message.Split('\n')[0];
                var date = commit.Commit.Author.Date;
                var sha = commit.Sha[..8];

                result += $"üîπ `{sha}` - {author}\n" +
                         $"   _{message}_\n" +
                         $"   üìÖ {date:dd.MM.yyyy HH:mm}\n\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}";
        }
    }

    public async Task<string> GetActiveAuthorsAsync(int days = 30)
    {
        try
        {
            var since = DateTime.UtcNow.AddDays(-days);
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = since }, new ApiOptions { PageSize = 100, PageCount = 1 });

            var authorStats = commits
                .GroupBy(c => c.Commit.Author.Name)
                .Select(g => new { Author = g.Key, Count = g.Count() })
                .OrderByDescending(a => a.Count)
                .Take(10)
                .ToList();

            if (!authorStats.Any())
                return "üë• *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*";

            var result = $"üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –∑–∞ {days} –¥–Ω–µ–π:*\n\n";

            foreach (var author in authorStats)
            {
                result += $"üë§ {author.Author}: {author.Count} –∫–æ–º–º–∏—Ç{(author.Count != 1 ? "–æ–≤" : "")}\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤: {ex.Message}";
        }
    }

    public async Task<string> GetCommitFilesAsync(string commitSha)
    {
        try
        {
            var commit = await _client.Repository.Commit.Get(Owner, Repo, commitSha);

            if (commit.Files?.Any() != true)
                return $"üìÅ *–§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ {commitSha[..8]}:*\n\n–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";

            var result = $"üìÅ *–§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ {commitSha[..8]}:*\n\n";

            foreach (var file in commit.Files.Take(15))
            {
                var changeType = file.Status switch
                {
                    "added" => "üü¢ –î–æ–±–∞–≤–ª–µ–Ω",
                    "modified" => "üü° –ò–∑–º–µ–Ω–µ–Ω",
                    "removed" => "üî¥ –£–¥–∞–ª–µ–Ω",
                    "renamed" => "üîµ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω",
                    _ => "‚ö™ –ò–∑–º–µ–Ω–µ–Ω"
                };

                result += $"{changeType}: `{file.Filename}`\n";
                
                if (file.Additions > 0 || file.Deletions > 0)
                {
                    result += $"   üìä +{file.Additions} -{file.Deletions}\n";
                }
                result += "\n";
            }

            if (commit.Files.Count > 15)
            {
                result += $"... –∏ –µ—â—ë {commit.Files.Count - 15} —Ñ–∞–π–ª–æ–≤\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–º–º–∏—Ç–∞: {ex.Message}";
        }
    }

    public async Task<string> GetWeeklyStatsAsync(int weekOffset = 0)
    {
        try
        {
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var nowMsk = TimeZoneInfo.ConvertTime(DateTime.UtcNow, mskTimeZone);
            
            var weekStart = nowMsk.AddDays(-7 * weekOffset - (int)nowMsk.DayOfWeek + 1).Date;
            var weekEnd = weekStart.AddDays(7);

            var result = $"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é {weekStart:dd.MM} - {weekEnd.AddDays(-1):dd.MM.yyyy}*\n\n";

            var dailyStats = new Dictionary<string, (int commits, int additions, int deletions)>();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
            for (int i = 0; i < 7; i++)
            {
                var day = weekStart.AddDays(i);
                var dayEnd = day.AddDays(1);
                
                var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                    new CommitRequest { Since = day, Until = dayEnd });

                var dayCommits = 0;
                var dayAdditions = 0;
                var dayDeletions = 0;

                foreach (var commit in commits)
                {
                    dayCommits++;
                    try
                    {
                        var detailedCommit = await _client.Repository.Commit.Get(Owner, Repo, commit.Sha);
                        if (detailedCommit.Stats != null)
                        {
                            dayAdditions += detailedCommit.Stats.Additions;
                            dayDeletions += detailedCommit.Stats.Deletions;
                        }
                    }
                    catch { }
                }

                var dayName = day.ToString("ddd", new System.Globalization.CultureInfo("ru-RU"));
                dailyStats[dayName] = (dayCommits, dayAdditions, dayDeletions);
            }

            // –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            result += "üìà *–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n";
            var maxCommits = dailyStats.Values.Max(x => x.commits);
            
            foreach (var (day, (commits, additions, deletions)) in dailyStats)
            {
                var barLength = maxCommits > 0 ? (commits * 10 / maxCommits) : 0;
                var bar = new string('‚ñà', Math.Max(1, barLength));
                
                result += $"{day}: {bar} {commits}\n";
            }

            result += "\nüìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n";
            var totalCommits = dailyStats.Values.Sum(x => x.commits);
            var totalAdditions = dailyStats.Values.Sum(x => x.additions);
            var totalDeletions = dailyStats.Values.Sum(x => x.deletions);

            result += $"üìù –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: {totalCommits}\n";
            result += $"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {totalAdditions}\n";
            result += $"‚ûñ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {totalDeletions}\n";
            result += $"üìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {totalAdditions + totalDeletions}\n\n";

            // –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
            var mostActiveDay = dailyStats.OrderByDescending(x => x.Value.commits).First();
            if (mostActiveDay.Value.commits > 0)
            {
                result += $"üî• –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {mostActiveDay.Key} ({mostActiveDay.Value.commits} –∫–æ–º–º–∏—Ç–æ–≤)\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}";
        }
    }

    public async Task<string> GetDeveloperRatingAsync(int days = 30)
    {
        try
        {
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var since = TimeZoneInfo.ConvertTime(DateTime.UtcNow.AddDays(-days), mskTimeZone);
            
            var commits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = since }, new ApiOptions { PageSize = 200, PageCount = 1 });

            var developerStats = new Dictionary<string, (int commits, int additions, int deletions, double score)>();

            foreach (var commit in commits)
            {
                var author = commit.Commit.Author.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
                
                if (!developerStats.ContainsKey(author))
                {
                    developerStats[author] = (0, 0, 0, 0);
                }

                var stats = developerStats[author];
                stats.commits++;

                try
                {
                    var detailedCommit = await _client.Repository.Commit.Get(Owner, Repo, commit.Sha);
                    if (detailedCommit.Stats != null)
                    {
                        stats.additions += detailedCommit.Stats.Additions;
                        stats.deletions += detailedCommit.Stats.Deletions;
                    }
                }
                catch { }

                // –§–æ—Ä–º—É–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: –∫–æ–º–º–∏—Ç—ã * 10 + –∏–∑–º–µ–Ω–µ–Ω–∏—è * 0.1
                stats.score = stats.commits * 10 + (stats.additions + stats.deletions) * 0.1;
                developerStats[author] = stats;
            }

            var result = $"üèÜ *–†–µ–π—Ç–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞ {days} –¥–Ω–µ–π:*\n\n";

            var sortedDevelopers = developerStats.OrderByDescending(x => x.Value.score).Take(10);
            var position = 1;

            foreach (var (author, stats) in sortedDevelopers)
            {
                var medal = position switch
                {
                    1 => "ü•á",
                    2 => "ü•à", 
                    3 => "ü•â",
                    _ => $"{position}."
                };

                result += $"{medal} *{author}*\n";
                result += $"   üìä –ë–∞–ª–ª—ã: {stats.score:F1}\n";
                result += $"   üìù –ö–æ–º–º–∏—Ç—ã: {stats.commits}\n";
                result += $"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{stats.additions} -{stats.deletions}\n\n";
                
                position++;
            }

            result += "üí° *–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:*\n";
            result += "‚Ä¢ 1 –∫–æ–º–º–∏—Ç = 10 –±–∞–ª–ª–æ–≤\n";
            result += "‚Ä¢ 1 –∏–∑–º–µ–Ω—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ = 0.1 –±–∞–ª–ª–∞";

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {ex.Message}";
        }
    }

    public async Task<string> GetActivityTrendsAsync()
    {
        try
        {
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var result = "üìâ *–¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n\n";

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
            var thisWeekStart = TimeZoneInfo.ConvertTime(DateTime.UtcNow, mskTimeZone).AddDays(-(int)DateTime.UtcNow.DayOfWeek + 1).Date;
            var lastWeekStart = thisWeekStart.AddDays(-7);

            var thisWeekCommits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = thisWeekStart });
            var lastWeekCommits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = lastWeekStart, Until = thisWeekStart });

            var thisWeekCount = thisWeekCommits.Count;
            var lastWeekCount = lastWeekCommits.Count;

            var trend = thisWeekCount > lastWeekCount ? "üìà" : thisWeekCount < lastWeekCount ? "üìâ" : "‚û°Ô∏è";
            var change = lastWeekCount > 0 ? ((double)(thisWeekCount - lastWeekCount) / lastWeekCount * 100) : 0;

            result += $"üìÖ *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å:*\n";
            result += $"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è: {thisWeekCount} –∫–æ–º–º–∏—Ç–æ–≤\n";
            result += $"–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: {lastWeekCount} –∫–æ–º–º–∏—Ç–æ–≤\n";
            result += $"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend} {change:+0.0;-0.0;0}%\n\n";

            // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü)
            var monthAgo = thisWeekStart.AddDays(-30);
            var monthCommits = await _client.Repository.Commit.GetAll(Owner, Repo,
                new CommitRequest { Since = monthAgo });

            var dayStats = new Dictionary<DayOfWeek, int>();
            foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
            {
                dayStats[day] = 0;
            }

            foreach (var commit in monthCommits)
            {
                var commitDate = TimeZoneInfo.ConvertTime(commit.Commit.Author.Date.DateTime, mskTimeZone);
                dayStats[commitDate.DayOfWeek]++;
            }

            result += "üìä *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*\n";
            var maxDayCommits = dayStats.Values.Max();
            
            var dayNames = new[] { "–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±" };
            for (int i = 0; i < 7; i++)
            {
                var day = (DayOfWeek)i;
                var commits = dayStats[day];
                var barLength = maxDayCommits > 0 ? (commits * 10 / maxDayCommits) : 0;
                var bar = new string('‚ñà', Math.Max(1, barLength));
                
                result += $"{dayNames[i]}: {bar} {commits}\n";
            }

            return result;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {ex.Message}";
        }
    }
}
