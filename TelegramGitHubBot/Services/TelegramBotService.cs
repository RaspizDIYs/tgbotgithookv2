using System.Collections.Generic;
using System.Timers;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace TelegramGitHubBot.Services;

public class NotificationSettings
{
    public bool PushNotifications { get; set; } = true;
    public bool PullRequestNotifications { get; set; } = true;
    public bool WorkflowNotifications { get; set; } = true;
    public bool ReleaseNotifications { get; set; } = true;
    public bool IssueNotifications { get; set; } = true;
}

public class TelegramBotService
{
    private readonly ITelegramBotClient _botClient;
    private readonly GitHubService _gitHubService;
    private readonly Dictionary<long, NotificationSettings> _chatSettings = new();
    private readonly HashSet<string> _processedCallbacks = new();
    private readonly Dictionary<string, System.Timers.Timer> _messageTimers = new();
    private System.Timers.Timer? _dailySummaryTimer;

    public TelegramBotService(ITelegramBotClient botClient, GitHubService gitHubService)
    {
        _botClient = botClient;
        _gitHubService = gitHubService ?? throw new ArgumentNullException(nameof(gitHubService));

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ 18:00 –ú–°–ö
        SetupDailySummaryTimer();
    }

    public async Task HandleUpdateAsync(HttpContext context)
    {
        try
        {
            var update = await context.Request.ReadFromJsonAsync<Update>();
            if (update == null) return;

            if (update.Message is { } message)
            {
                await HandleMessageAsync(message);
            }
            else if (update.CallbackQuery is { } callbackQuery)
            {
                await HandleCallbackQueryAsync(callbackQuery);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling Telegram update: {ex.Message}");
        }
    }

    public async Task HandleMessageAsync(Message message)
    {
        if (message.Text == null) return;

        var chatId = message.Chat.Id;
        var text = message.Text.Trim();

        // –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
        if (text.StartsWith("/"))
        {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–≥–æ–º –±–æ—Ç–∞ (/command@BotName)
            var cleanCommand = text.Split('@')[0]; // –£–±–∏—Ä–∞–µ–º @BotName –µ—Å–ª–∏ –µ—Å—Ç—å
            await HandleCommandAsync(chatId, cleanCommand, message.From?.Username);
        }
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    }

    private NotificationSettings GetOrCreateSettings(long chatId)
    {
        if (!_chatSettings.TryGetValue(chatId, out var settings))
        {
            settings = new NotificationSettings();
            _chatSettings[chatId] = settings;
        }
        return settings;
    }

    private async Task HandleCommandAsync(long chatId, string command, string? username)
    {
        try
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var cmd = parts[0].ToLower();

            switch (cmd)
            {
                case "/start":
                    await SendWelcomeMessageAsync(chatId);
                    break;

                case "/help":
                    await SendHelpMessageAsync(chatId);
                    break;

                case "/settings":
                case "/manage":
                    await SendSettingsMessageAsync(chatId);
                    break;

                case "/status":
                    await HandleStatusCommandAsync(chatId);
                    break;

                case "/commits":
                    if (parts.Length > 1)
                    {
                        var branch = parts[1];
                        var count = parts.Length > 2 && int.TryParse(parts[2], out var c) ? c : 5;
                        await HandleCommitsCommandAsync(chatId, branch, count);
                    }
                    else
                    {
                        await ShowBranchSelectionAsync(chatId, "commits");
                    }
                    break;

                case "/branches":
                    await HandleBranchesCommandAsync(chatId);
                    break;

                case "/prs":
                case "/pulls":
                    await HandlePullRequestsCommandAsync(chatId);
                    break;

                case "/ci":
                case "/workflows":
                    if (parts.Length > 1)
                    {
                        var wfBranch = parts[1];
                        var wfCount = parts.Length > 2 && int.TryParse(parts[2], out var wc) ? wc : 5;
                        await HandleWorkflowsCommandAsync(chatId, wfBranch, wfCount);
                    }
                    else
                    {
                        await ShowBranchSelectionAsync(chatId, "workflows");
                    }
                    break;

                case "/deploy":
                    if (parts.Length > 1)
                    {
                        await HandleDeployCommandAsync(chatId, parts[1], username);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è: /deploy staging –∏–ª–∏ /deploy production", disableNotification: true);
                    }
                    break;

                case "/laststats":
                    await SendDailySummaryAsync(chatId);
                    break;

                case "/search":
                    if (parts.Length > 1)
                    {
                        var query = string.Join(" ", parts.Skip(1));
                        await HandleSearchCommandAsync(chatId, query);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n–ü—Ä–∏–º–µ—Ä: /search fix bug", disableNotification: true);
                    }
                    break;

                case "/authors":
                    await HandleAuthorsCommandAsync(chatId);
                    break;

                case "/files":
                    if (parts.Length > 1)
                    {
                        var commitSha = parts[1];
                        await HandleFilesCommandAsync(chatId, commitSha);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /files <sha –∫–æ–º–º–∏—Ç–∞>", disableNotification: true);
                    }
                    break;

                case "/–ø–µ–¥–∏–∫":
                    await _botClient.SendTextMessageAsync(chatId, "–°–∞–º —Ç—ã –ø–µ–¥–∏–∫", disableNotification: true);
                    break;

                default:

                    break;
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {ex.Message}", disableNotification: true);
        }
    }

    private async Task SendWelcomeMessageAsync(long chatId)
    {
        var message = @"ü§ñ GitHub Monitor Bot
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è goodluckv2

üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ö–æ–º–º–∏—Ç–∞—Ö
‚Ä¢ PR/MR
‚Ä¢ CI/CD
‚Ä¢ –†–µ–ª–∏–∑–∞—Ö

üí° *–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* —á–µ—Ä–µ–∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å", "/status"),
                InlineKeyboardButton.WithCallbackData("üìù –ö–æ–º–º–∏—Ç—ã", "/commits"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåø –í–µ—Ç–∫–∏", "/branches"),
                InlineKeyboardButton.WithCallbackData("üîÑ PR", "/prs"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è CI/CD", "/ci"),
                InlineKeyboardButton.WithCallbackData("üöÄ –î–µ–ø–ª–æ–π", "/deploy"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/laststats"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"),
                InlineKeyboardButton.WithCallbackData("‚ùì –°–ø—Ä–∞–≤–∫–∞", "/help"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task SendSettingsMessageAsync(long chatId)
    {
        var settings = GetOrCreateSettings(chatId);

        var message = @"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.PushNotifications ? "‚úÖ" : "‚ùå")} –ö–æ–º–º–∏—Ç—ã",
                    $"toggle:push:{chatId}"),
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.PullRequestNotifications ? "‚úÖ" : "‚ùå")} PR/MR",
                    $"toggle:pr:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.WorkflowNotifications ? "‚úÖ" : "‚ùå")} CI/CD",
                    $"toggle:ci:{chatId}"),
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.ReleaseNotifications ? "‚úÖ" : "‚ùå")} –†–µ–ª–∏–∑—ã",
                    $"toggle:release:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.IssueNotifications ? "‚úÖ" : "‚ùå")} –ó–∞–¥–∞—á–∏",
                    $"toggle:issue:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task SendHelpMessageAsync(long chatId)
    {
        var message = @"üìã *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

üìä /status - –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
üìù /commits [–≤–µ—Ç–∫–∞] [–∫–æ–ª-–≤–æ] - –ö–æ–º–º–∏—Ç—ã (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
üåø /branches - –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
üîÑ /prs - –û—Ç–∫—Ä—ã—Ç—ã–µ PR
‚öôÔ∏è /ci [–≤–µ—Ç–∫–∞] - CI/CD —Å—Ç–∞—Ç—É—Å (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
üöÄ /deploy [—Å—Ä–µ–¥–∞] - –î–µ–ø–ª–æ–π
üìà /laststats - –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üîç *–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑:*
üîé /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–º–∏—Ç–∞–º
üë• /authors - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã
üìÅ /files <sha> - –§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üìã /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å", "/status"),
                InlineKeyboardButton.WithCallbackData("üìù –ö–æ–º–º–∏—Ç—ã", "/commits"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåø –í–µ—Ç–∫–∏", "/branches"),
                InlineKeyboardButton.WithCallbackData("üîÑ PR", "/prs"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è CI/CD", "/ci"),
                InlineKeyboardButton.WithCallbackData("üöÄ –î–µ–ø–ª–æ–π", "/deploy"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/laststats"),
                InlineKeyboardButton.WithCallbackData("üë• –ê–≤—Ç–æ—Ä—ã", "/authors"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîç –ü–æ–∏—Å–∫", "search_menu"),
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task HandleWorkflowsCommandAsync(long chatId, string? branch, int count)
    {
        try
        {
            var workflows = await _gitHubService.GetWorkflowRunsAsync(branch ?? string.Empty, count);
            await _botClient.SendTextMessageAsync(chatId, workflows, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleDeployCommandAsync(long chatId, string environment, string? username)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (string.IsNullOrEmpty(username))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disableNotification: true);
                return;
            }

            var allowedUsers = new[] { "your_username" }; // –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (!allowedUsers.Contains(username.ToLower()))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è", disableNotification: true);
                return;
            }

            if (environment.ToLower() != "staging" && environment.ToLower() != "production")
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: staging, production", disableNotification: true);
                return;
            }

            var message = $"üöÄ *–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ {environment}*\n\n" +
                         $"üë§ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª: {username}\n" +
                         $"‚è∞ –í—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm}\n" +
                         $"üîÑ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflow
            // await _gitHubService.TriggerDeploymentAsync(environment, username);

            var successMessage = $"‚úÖ *–î–µ–ø–ª–æ–π –≤ {environment} –∑–∞–ø—É—â–µ–Ω!*\n\n" +
                               $"üë§ {username}\n" +
                               $"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /ci";

            await _botClient.SendTextMessageAsync(chatId, successMessage, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleStatusCommandAsync(long chatId)
    {
        try
        {
            var status = await _gitHubService.GetRepositoryStatusAsync();
            await _botClient.SendTextMessageAsync(chatId, status, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleCommitsCommandAsync(long chatId, string branch, int count)
    {
        try
        {
            var commits = await _gitHubService.GetRecentCommitsAsync(branch, count);
            await _botClient.SendTextMessageAsync(chatId, commits, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleBranchesCommandAsync(long chatId)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesAsync();
            await _botClient.SendTextMessageAsync(chatId, branches, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandlePullRequestsCommandAsync(long chatId)
    {
        try
        {
            var prs = await _gitHubService.GetPullRequestsAsync();
            await _botClient.SendTextMessageAsync(chatId, prs, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PR: {ex.Message}", disableNotification: true);
        }
    }

    public async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        Console.WriteLine($"üéØ HandleCallbackQueryAsync called with data: '{callbackQuery.Data}'");

        var chatId = callbackQuery.Message?.Chat.Id ?? 0;
        var data = callbackQuery.Data;
        var messageId = callbackQuery.Message?.MessageId ?? 0;

        Console.WriteLine($"üìç ChatId: {chatId}, Data: '{data}', MessageId: {messageId}");

        if (chatId == 0 || string.IsNullOrEmpty(data) || messageId == 0)
        {
            Console.WriteLine("‚ùå Invalid callback query data");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
            return;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        var callbackKey = $"{callbackQuery.Id}:{data}";
        if (_processedCallbacks.Contains(callbackKey))
        {
            Console.WriteLine("‚ö†Ô∏è Callback already processed, ignoring");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ");
            return;
        }

        _processedCallbacks.Add(callbackKey);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        if (_processedCallbacks.Count > 1000)
        {
            _processedCallbacks.Clear();
        }

        try
        {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
            Console.WriteLine("‚úÖ Callback query answered");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            if (data.StartsWith("cd:") || data.StartsWith("commit_details:"))
            {
                Console.WriteLine("üìã Processing commit details request");
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await DeleteMessageAsync(chatId, messageId);
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
                await HandleCommitDetailsCallbackAsync(chatId, data);
            }
            else if (data.StartsWith("toggle:"))
            {
                Console.WriteLine("‚öôÔ∏è Processing notification toggle request");
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await HandleNotificationToggleAsync(chatId, data, messageId);
            }
            else if (data.StartsWith("branch_"))
            {
                Console.WriteLine("üåø Processing branch selection");
                await HandleBranchCallbackAsync(chatId, data, messageId);
            }
            else if (data == "search_menu")
            {
                Console.WriteLine("üîç Processing search menu");
                await ShowSearchMenuAsync(chatId, messageId);
            }
            else
            {
                Console.WriteLine("üìù Processing regular command");
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ callback data
                await HandleCommandAsync(chatId, data, callbackQuery.From?.Username);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Callback query error: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private async Task DeleteMessageAsync(long chatId, int messageId)
    {
        try
        {
            await _botClient.DeleteMessageAsync(chatId, messageId);
            Console.WriteLine($"üóëÔ∏è Deleted message {messageId} from chat {chatId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to delete message {messageId}: {ex.Message}");
        }
    }

    private async Task RestorePushMessageAsync(long chatId, string commitSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            var author = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
            var message = "–ö–æ–º–º–∏—Ç";
            var shortSha = commitSha[..8];

            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            var lines = commitDetails.Split('\n');
            foreach (var line in lines)
            {
                if (line.StartsWith("üë§ –ê–≤—Ç–æ—Ä: "))
                {
                    author = line.Replace("üë§ –ê–≤—Ç–æ—Ä: ", "").Trim();
                }
                else if (line.StartsWith("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:"))
                {
                    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "üìù –°–æ–æ–±—â–µ–Ω–∏–µ:" —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
                    var messageIndex = Array.IndexOf(lines, line) + 1;
                    if (messageIndex < lines.Length)
                    {
                        message = lines[messageIndex].Trim('`', '*').Replace("```\n", "").Split('\n')[0];
                        if (message.Length > 50)
                        {
                            message = message[..47] + "...";
                        }
                    }
                    break;
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ
            var pushMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ RaspizDIYs/{repoName}*\n\n" +
                             $"üåø –í–µ—Ç–∫–∞: `main`\n" + // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é main, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ç–∫–µ
                             $"üì¶ –ö–æ–º–º–∏—Ç–æ–≤: 1\n\n" +
                             $"üîπ `{shortSha}` - {author}\n" +
                             $"   {message}\n\n" +
                             $"üë§ –ê–≤—Ç–æ—Ä: {author}";

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–æ"
            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìã –ü–æ–¥—Ä–æ–±–Ω–æ", $"cd:{shortSha}:{repoName}:details")
                }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: pushMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true,
                replyMarkup: inlineKeyboard
            );

            Console.WriteLine($"üîÑ Restored push message for commit {shortSha}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to restore push message: {ex.Message}");

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var fallbackMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ RaspizDIYs/{repoName}*\n\n" +
                                 $"üì¶ –ö–æ–º–º–∏—Ç: `{commitSha[..8]}`\n" +
                                 $"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ GitHub](https://github.com/RaspizDIYs/goodluckv2/commit/{commitSha})";

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: fallbackMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true
            );
        }
    }

    private async Task HandleCommitDetailsCallbackAsync(long chatId, string callbackData)
    {
        try
        {
            // –†–∞–∑–±–∏—Ä–∞–µ–º callback data: cd:shortSha:repo:action
            var parts = callbackData.Split(':');
            if (parts.Length < 4)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", disableNotification: true);
                return;
            }

            var shortSha = parts[1];
            var repoName = parts[2];
            var action = parts[3];

            // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ SHA –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ GitHub API –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É
            var commitSha = await GetFullShaFromShortAsync(shortSha, repoName);

            if (action == "details")
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞
                var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

                var callbackShortSha = commitSha[..8]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è callback
                var backKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"cd:{callbackShortSha}:{repoName}:back")
                    }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: commitDetails,
                    parseMode: ParseMode.Markdown,
                    disableWebPagePreview: true,
                    disableNotification: true,
                    replyMarkup: backKeyboard
                );
            }
            else if (action == "back")
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—à–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await RestorePushMessageAsync(chatId, commitSha, repoName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling commit details: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞", disableNotification: true);
        }
    }

    private async Task HandleNotificationToggleAsync(long chatId, string callbackData, int messageId)
    {
        try
        {
            // –†–∞–∑–±–∏—Ä–∞–µ–º callback data: toggle:type:chatId
            var parts = callbackData.Split(':');
            if (parts.Length < 3)
            {
                await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                return;
            }

            var type = parts[1];
            var targetChatId = long.Parse(parts[2]);

            if (chatId != targetChatId)
            {
                await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç");
                return;
            }

            var settings = GetOrCreateSettings(chatId);

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            string notificationType = "";
            switch (type)
            {
                case "push":
                    settings.PushNotifications = !settings.PushNotifications;
                    notificationType = "–ö–æ–º–º–∏—Ç—ã";
                    break;
                case "pr":
                    settings.PullRequestNotifications = !settings.PullRequestNotifications;
                    notificationType = "PR/MR";
                    break;
                case "ci":
                    settings.WorkflowNotifications = !settings.WorkflowNotifications;
                    notificationType = "CI/CD";
                    break;
                case "release":
                    settings.ReleaseNotifications = !settings.ReleaseNotifications;
                    notificationType = "–†–µ–ª–∏–∑—ã";
                    break;
                case "issue":
                    settings.IssueNotifications = !settings.IssueNotifications;
                    notificationType = "–ó–∞–¥–∞—á–∏";
                    break;
                default:
                    await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                    return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await UpdateSettingsMessageAsync(chatId, messageId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            var statusText = GetNotificationStatus(settings, type);
            await _botClient.AnswerCallbackQueryAsync(callbackData, $"{statusText} {notificationType}");

            Console.WriteLine($"‚öôÔ∏è Toggled {type} notifications for chat {chatId}: {statusText}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error toggling notification: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private async Task UpdateSettingsMessageAsync(long chatId, int messageId)
    {
        try
        {
            var settings = GetOrCreateSettings(chatId);

            var message = @"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:";

            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.PushNotifications ? "‚úÖ" : "‚ùå")} –ö–æ–º–º–∏—Ç—ã",
                        $"toggle:push:{chatId}"),
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.PullRequestNotifications ? "‚úÖ" : "‚ùå")} PR/MR",
                        $"toggle:pr:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.WorkflowNotifications ? "‚úÖ" : "‚ùå")} CI/CD",
                        $"toggle:ci:{chatId}"),
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.ReleaseNotifications ? "‚úÖ" : "‚ùå")} –†–µ–ª–∏–∑—ã",
                        $"toggle:release:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.IssueNotifications ? "‚úÖ" : "‚ùå")} –ó–∞–¥–∞—á–∏",
                        $"toggle:issue:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
                }
            });

            await _botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: messageId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                replyMarkup: inlineKeyboard
            );

            Console.WriteLine($"‚úÖ Updated settings message for chat {chatId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error updating settings message: {ex.Message}");
        }
    }

    private string GetNotificationStatus(NotificationSettings settings, string type)
    {
        return type switch
        {
            "push" => settings.PushNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "pr" => settings.PullRequestNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "ci" => settings.WorkflowNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "release" => settings.ReleaseNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "issue" => settings.IssueNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }

    public bool ShouldSendNotification(long chatId, string notificationType)
    {
        var settings = GetOrCreateSettings(chatId);

        Console.WriteLine($"üîç Checking notification settings for chat {chatId}, type: {notificationType}");
        Console.WriteLine($"   Push: {settings.PushNotifications}, PR: {settings.PullRequestNotifications}, CI: {settings.WorkflowNotifications}, Release: {settings.ReleaseNotifications}, Issues: {settings.IssueNotifications}");

        var result = notificationType switch
        {
            "push" => settings.PushNotifications,
            "pull_request" => settings.PullRequestNotifications,
            "workflow" => settings.WorkflowNotifications,
            "release" => settings.ReleaseNotifications,
            "issues" => settings.IssueNotifications,
            _ => true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
        };

        Console.WriteLine($"   Result for {notificationType}: {result}");
        return result;
    }

    public void ScheduleMessageDeletion(long chatId, int messageId, int delayMinutes = 30)
    {
        var timerKey = $"{chatId}:{messageId}";
        var timer = new System.Timers.Timer(delayMinutes * 60 * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        timer.Elapsed += async (sender, e) =>
        {
            try
            {
                Console.WriteLine($"üóëÔ∏è Auto-deleting message {messageId} from chat {chatId} after {delayMinutes} minutes");
                await _botClient.DeleteMessageAsync(chatId, messageId);
                Console.WriteLine($"‚úÖ Message {messageId} deleted successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Failed to delete message {messageId}: {ex.Message}");
            }
            finally
            {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                timer.Stop();
                timer.Dispose();
                _messageTimers.Remove(timerKey);
            }
        };

        timer.AutoReset = false; // –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer.Start();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        _messageTimers[timerKey] = timer;

        Console.WriteLine($"‚è∞ Scheduled deletion of message {messageId} from chat {chatId} in {delayMinutes} minutes");
    }

            public void CancelMessageDeletion(long chatId, int messageId)
        {
            var timerKey = $"{chatId}:{messageId}";
            if (_messageTimers.TryGetValue(timerKey, out var timer))
            {
                _messageTimers.Remove(timerKey);
                timer.Stop();
                timer.Dispose();
                Console.WriteLine($"üö´ Cancelled deletion of message {messageId} from chat {chatId}");
            }
        }

    public async Task SendAutoDeletingMessageAsync(long chatId, string text, int delayMinutes = 30, ParseMode? parseMode = null, IReplyMarkup? replyMarkup = null)
    {
        try
        {
            var message = await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: text,
                parseMode: parseMode,
                disableNotification: true,
                replyMarkup: replyMarkup
            );

            // –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            ScheduleMessageDeletion(chatId, message.MessageId, delayMinutes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to send auto-deleting message: {ex.Message}");
            throw;
        }
    }

    private async Task<string> GetFullShaFromShortAsync(string shortSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º main –≤–µ—Ç–∫—É)
            var commitMessage = await _gitHubService.GetRecentCommitsAsync("main", 20);

            // –ò—â–µ–º –∫–æ–º–º–∏—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º SHA
            // GetRecentCommitsAsync –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç string, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ-–¥—Ä—É–≥–æ–º—É
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π SHA –∫–∞–∫ –ø–æ–ª–Ω—ã–π
            return shortSha;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting full SHA: {ex.Message}");
            return shortSha; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private void SetupDailySummaryTimer()
    {
        _dailySummaryTimer = new System.Timers.Timer();
        if (_dailySummaryTimer != null)
        {
            _dailySummaryTimer.Elapsed += async (sender, e) => await SendDailySummaryAsync();
            _dailySummaryTimer.AutoReset = true;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ 18:00 –ú–°–ö
            var now = DateTime.Now;
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var nowMsk = TimeZoneInfo.ConvertTime(now, mskTimeZone);

            var nextRun = nowMsk.Date.AddHours(18);
            if (nowMsk >= nextRun)
            {
                nextRun = nextRun.AddDays(1);
            }

            var timeUntilNextRun = nextRun - nowMsk;
            _dailySummaryTimer.Interval = timeUntilNextRun.TotalMilliseconds;

            _dailySummaryTimer.Start();
            Console.WriteLine($"‚è∞ Daily summary timer set to run in {timeUntilNextRun.TotalHours:F1} hours");
        }
    }

    private async Task SendDailySummaryAsync(long? targetChatId = null)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var (branchStats, authorStats) = await _gitHubService.GetDailyCommitStatsAsync();
            var (workflowSuccess, workflowFailure) = await _gitHubService.GetDailyWorkflowStatsAsync();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Chat ID: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            long chatId;
            if (targetChatId.HasValue)
            {
                chatId = targetChatId.Value;
            }
            else
            {
                var configChatId = Environment.GetEnvironmentVariable("TELEGRAM_CHAT_ID") ??
                                  throw new InvalidOperationException("TELEGRAM_CHAT_ID not configured");

                if (!long.TryParse(configChatId, out chatId))
                {
                    Console.WriteLine("‚ùå Invalid TELEGRAM_CHAT_ID format");
                    return;
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π
            var title = targetChatId.HasValue
                ? $"üìä *–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {DateTime.Now.AddDays(-1):dd.MM.yyyy}*"
                : $"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {DateTime.Now.AddDays(-1):dd.MM.yyyy}*";
            var message = $"{title}\n\n";

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –≤–µ—Ç–∫–∞–º
            message += "üìù *–ö–æ–º–º–∏—Ç—ã –ø–æ –≤–µ—Ç–∫–∞–º:*\n";
            var totalCommits = 0;

            foreach (var (branch, count) in branchStats.OrderByDescending(x => x.Value))
            {
                if (count > 0)
                {
                    message += $"üåø `{branch}`: {count} –∫–æ–º–º–∏—Ç{(count != 1 ? "–æ–≤" : "")}\n";
                    totalCommits += count;
                }
            }

            if (totalCommits == 0)
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤—ã—Ö–æ–¥–Ω–æ–π" —Å –≥–∏—Ñ–∫–æ–π
                message = $"üç∫ *–í—ã—Ö–æ–¥–Ω–æ–π! {DateTime.Now.AddDays(-1):dd.MM.yyyy}*\n\n";
                message += "–ù–∏–∫—Ç–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–ª - –∑–Ω–∞—á–∏—Ç –æ—Ç–¥—ã—Ö–∞–µ–º! üéâ\n\n";
                message += "https://media.giphy.com/media/8Iv5lqKwKsZ2g/giphy.gif\n\n";
                message += "üçª –ü—å—ë–º –ø–∏–≤–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è –∂–∏–∑–Ω—å—é!";
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: message,
                    parseMode: ParseMode.Markdown,
                    disableNotification: targetChatId.HasValue
                );

                var weekendSummaryType = targetChatId.HasValue ? "requested" : "automatic";
                Console.WriteLine($"‚úÖ {weekendSummaryType} weekend summary sent to chat {chatId}");

                // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫
                if (_dailySummaryTimer != null && !targetChatId.HasValue)
                {
                    _dailySummaryTimer.Interval = 24 * 60 * 60 * 1000;
                }
                return;
            }
            else
            {
                message += $"\nüìà *–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤:* {totalCommits}\n\n";

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
                message += "üë• *–ö–æ–º–º–∏—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä–∞–º:*\n";
                foreach (var (author, stats) in authorStats.OrderByDescending(x => x.Value.Commits))
                {
                    var commitsText = stats.Commits == 1 ? "–∫–æ–º–º–∏—Ç" : "–∫–æ–º–º–∏—Ç–æ–≤";
                    var changesText = stats.TotalChanges == 1 ? "–∏–∑–º–µ–Ω–µ–Ω–∏–µ" : 
                                     stats.TotalChanges < 5 ? "–∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–∏–∑–º–µ–Ω–µ–Ω–∏–π";
                    
                    message += $"üë§ {author}: {stats.Commits} {commitsText}\n";
                    if (stats.TotalChanges > 0)
                    {
                        message += $"   üìä +{stats.Additions} -{stats.Deletions} ({stats.TotalChanges} {changesText})\n";
                    }
                }
                message += "\n";
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CI/CD
            message += "‚öôÔ∏è *CI/CD —Å—Ç–∞—Ç—É—Å—ã:*\n";
            if (workflowSuccess > 0 || workflowFailure > 0)
            {
                message += $"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {workflowSuccess}\n";
                message += $"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {workflowFailure}\n";
                var totalWorkflows = workflowSuccess + workflowFailure;
                var successRate = totalWorkflows > 0 ? (double)workflowSuccess / totalWorkflows * 100 : 0;
                message += $"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successRate:F1}%\n";
            }
            else
            {
                message += "üò¥ CI/CD –∑–∞–ø—É—Å–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n";
            }

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableNotification: targetChatId.HasValue // –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–≤–æ–¥–æ–∫, —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö
            );

            var summaryType = targetChatId.HasValue ? "requested" : "automatic";
            Console.WriteLine($"‚úÖ {summaryType} summary sent to chat {chatId}");

            // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫
            if (_dailySummaryTimer != null && !targetChatId.HasValue)
            {
                _dailySummaryTimer.Interval = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error sending daily summary: {ex.Message}");
        }
    }

    private async Task ShowBranchSelectionAsync(long chatId, string action)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesListAsync();
            
            if (!branches.Any())
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫", disableNotification: true);
                return;
            }

            var message = action switch
            {
                "commits" => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤:*",
                "workflows" => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ CI/CD:*",
                _ => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É:*"
            };

            var buttons = new List<InlineKeyboardButton[]>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–µ—Ç–æ–∫ (–º–∞–∫—Å–∏–º—É–º 8)
            foreach (var branch in branches.Take(8))
            {
                var callbackData = action switch
                {
                    "commits" => $"branch_commits:{branch}",
                    "workflows" => $"branch_workflows:{branch}",
                    _ => $"branch_select:{branch}"
                };
                
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"üåø {branch}", callbackData) });
            }

            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleSearchCommandAsync(long chatId, string query)
    {
        try
        {
            var results = await _gitHubService.SearchCommitsAsync(query);
            
            if (string.IsNullOrEmpty(results))
            {
                await _botClient.SendTextMessageAsync(chatId, $"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", disableNotification: true);
                return;
            }

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: results,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleAuthorsCommandAsync(long chatId)
    {
        try
        {
            var authors = await _gitHubService.GetActiveAuthorsAsync();
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: authors,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleFilesCommandAsync(long chatId, string commitSha)
    {
        try
        {
            var files = await _gitHubService.GetCommitFilesAsync(commitSha);
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üìã –î–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞", $"cd:{commitSha}:goodluckv2:details") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: files,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleBranchCallbackAsync(long chatId, string callbackData, int messageId)
    {
        try
        {
            var parts = callbackData.Split(':');
            if (parts.Length < 2) return;

            var action = parts[0];
            var branch = parts[1];

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–µ—Ç–∫–∏
            await DeleteMessageAsync(chatId, messageId);

            switch (action)
            {
                case "branch_commits":
                    await HandleCommitsCommandAsync(chatId, branch, 5);
                    break;
                case "branch_workflows":
                    await HandleWorkflowsCommandAsync(chatId, branch, 5);
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling branch callback: {ex.Message}");
        }
    }

    private async Task ShowSearchMenuAsync(long chatId, int messageId)
    {
        try
        {
            var message = "üîç *–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é*\n\n" +
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n" +
                         "üìù `/search <—Ç–µ–∫—Å—Ç>` - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–æ–º–º–∏—Ç–æ–≤\n" +
                         "üë§ `/authors` - –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã\n" +
                         "üìÅ `/files <sha>` - —Ñ–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã", "/authors") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: messageId,
                text: message,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error showing search menu: {ex.Message}");
        }
    }
}
