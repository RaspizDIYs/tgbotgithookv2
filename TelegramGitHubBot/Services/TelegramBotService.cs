using System.Collections.Generic;
using System.Timers;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
// using Telegram.Bot.Types.InputFiles; // deprecated in Telegram.Bot 19

namespace TelegramGitHubBot.Services;

public class NotificationSettings
{
    public bool PushNotifications { get; set; } = true;
    public bool PullRequestNotifications { get; set; } = true;
    public bool WorkflowNotifications { get; set; } = true;
    public bool ReleaseNotifications { get; set; } = true;
    public bool IssueNotifications { get; set; } = true;
}

public class TelegramBotService
{
    private readonly ITelegramBotClient _botClient;
    private readonly GitHubService _gitHubService;
    private readonly AchievementService _achievementService;
    private readonly GeminiManager _geminiManager;
    private readonly MessageStatsService _messageStatsService;
    private readonly Dictionary<long, NotificationSettings> _chatSettings = new();
    private readonly HashSet<string> _processedCallbacks = new();
    private readonly HashSet<int> _processedUpdateIds = new();
    private readonly Queue<(int id, DateTime ts)> _processedUpdateTimestamps = new();
    private readonly Dictionary<string, System.Timers.Timer> _messageTimers = new();
    private System.Timers.Timer? _dailySummaryTimer;
    private readonly Dictionary<long, int> _swearWordCounters = new();
    private readonly HashSet<string> _swearWords = new();
    private readonly Dictionary<long, bool> _geminiMode = new();
    private readonly Dictionary<long, GameState> _gameStates = new();
    private readonly TenorService _tenorService;
    private readonly GifTextEditorService _gifTextEditorService;
    private readonly Dictionary<long, string> _pendingGifTexts = new(); // –î–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è GIF
    private readonly ChatActivityTracker _chatActivityTracker;

    public TelegramBotService(ITelegramBotClient botClient, GitHubService gitHubService, AchievementService achievementService, GeminiManager geminiManager, MessageStatsService messageStatsService, TenorService tenorService, GifTextEditorService gifTextEditorService, ChatActivityTracker chatActivityTracker)
    {
        _botClient = botClient;
        _gitHubService = gitHubService ?? throw new ArgumentNullException(nameof(gitHubService));
        _achievementService = achievementService ?? throw new ArgumentNullException(nameof(achievementService));
        _geminiManager = geminiManager ?? throw new ArgumentNullException(nameof(geminiManager));
        _messageStatsService = messageStatsService ?? throw new ArgumentNullException(nameof(messageStatsService));
        _tenorService = tenorService ?? throw new ArgumentNullException(nameof(tenorService));
        _gifTextEditorService = gifTextEditorService ?? throw new ArgumentNullException(nameof(gifTextEditorService));
        _chatActivityTracker = chatActivityTracker ?? throw new ArgumentNullException(nameof(chatActivityTracker));

        InitializeSwearWords();
        SetupDailySummaryTimer();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        _ = StartScheduledUpdatesTimer();
    }

    public async Task HandleUpdateAsync(HttpContext context)
    {
        try
        {
            var update = await context.Request.ReadFromJsonAsync<Update>();
            if (update == null) return;

            // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ update.Id (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞)
            CleanupProcessedUpdates();
            if (_processedUpdateIds.Contains(update.Id))
            {
                Console.WriteLine($"‚ôªÔ∏è Duplicate update ignored: {update.Id}");
                return;
            }
            _processedUpdateIds.Add(update.Id);
            _processedUpdateTimestamps.Enqueue((update.Id, DateTime.UtcNow));

            if (update.Message is { } message)
            {
                await HandleMessageAsync(message);
            }
            else if (update.CallbackQuery is { } callbackQuery)
            {
                await HandleCallbackQueryAsync(callbackQuery);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling Telegram update: {ex.Message}");
        }
    }

    private void CleanupProcessedUpdates()
    {
        // –¥–µ—Ä–∂–∏–º –º–∞–∫—Å–∏–º—É–º 1000 id –∏ TTL 10 –º–∏–Ω—É—Ç
        var cutoff = DateTime.UtcNow.AddMinutes(-10);
        while (_processedUpdateTimestamps.Count > 0)
        {
            var (id, ts) = _processedUpdateTimestamps.Peek();
            if (_processedUpdateIds.Count > 1000 || ts < cutoff)
            {
                _processedUpdateTimestamps.Dequeue();
                _processedUpdateIds.Remove(id);
            }
            else
            {
                break;
            }
        }
    }

    public async Task HandleMessageAsync(Message message)
    {
        if (message.Text == null) return;

        var chatId = message.Chat.Id;
        var fromId = message.From?.Id ?? 0;
        var fromUsername = message.From?.Username ?? (message.From?.FirstName ?? "");
        var text = message.Text.Trim();

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        var (totalChat, totalUser, chatMilestoneHit, userMilestoneHit, chatMilestone, userMilestone) = _messageStatsService.RegisterMessage(chatId, fromId);

        // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —á–∞—Ç—É: 20000, 30000, 40000, ...
        if (chatMilestoneHit && chatMilestone >= 20000)
        {
            var chatMsg = GetChatMilestoneMessage(chatMilestone);
            try { await _botClient.SendTextMessageAsync(chatId, chatMsg, parseMode: ParseMode.Markdown, disableWebPagePreview: true, disableNotification: true); } catch {}
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ 10000 –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userMilestoneHit && userMilestone == 10000 && fromId != 0)
        {
            var mention = !string.IsNullOrWhiteSpace(fromUsername) ? $"@{fromUsername}" : $"id:{fromId}";
            var userMsg = $"{mention} –º–∞—Å—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è! –≠—Ç–æ –µ–≥–æ {userMilestone} —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!";
            try { await _botClient.SendTextMessageAsync(chatId, userMsg, parseMode: ParseMode.Markdown, disableWebPagePreview: true, disableNotification: true); } catch {}
        }

        // –î–µ—Ç–µ–∫—Ç–æ—Ä –º–∞—Ç–∞ (–ø—Ä–æ—Å—Ç—ã–µ —Ä—É—Å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã) - —É–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // if (ContainsProfanity(text))
        // {
        //     var mention = !string.IsNullOrWhiteSpace(fromUsername) ? $"@{fromUsername}" : $"id:{fromId}";
        //     var warn = $"–í—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –°–∫–≤–µ—Ä–Ω—É! {mention} –°–ö–í–ï–†–ù–û–°–õ–û–í!";
        //     try { await _botClient.SendTextMessageAsync(chatId, warn, parseMode: ParseMode.Markdown, disableWebPagePreview: true, disableNotification: true); } catch {}
        // }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (message.From != null)
        {
            await CheckSwearWordsAsync(chatId, message.From.Id, text);
        }

        // –ö–æ–º–∞–Ω–¥—ã Gemini
        if (text.StartsWith("/"))
        {
            var cleanCommand = text.Split('@')[0];
            
            if (cleanCommand == "/glaistart")
            {
                _geminiMode[chatId] = true;
                await _botClient.SendTextMessageAsync(chatId, "ü§ñ –†–µ–∂–∏–º Gemini –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª—å.", disableNotification: true);
                return;
            }
            else if (cleanCommand == "/glaistop")
            {
                // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∏–≥—Ä–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                if (_gameStates.ContainsKey(chatId) && _gameStates[chatId].IsActive)
                {
                    await StopGameAsync(chatId);
                }
                
                _geminiMode[chatId] = false;
                await _botClient.SendTextMessageAsync(chatId, "üõë –†–µ–∂–∏–º Gemini –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.", disableNotification: true);
                return;
            }
            else if (cleanCommand == "/glaistats")
            {
                var stats = _geminiManager.GetAllAgentsStatus();
                await _botClient.SendTextMessageAsync(chatId, stats, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            else if (cleanCommand == "/glaicurrent")
            {
                var stats = _geminiManager.GetCurrentAgentStatus();
                await _botClient.SendTextMessageAsync(chatId, stats, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            else if (cleanCommand == "/glaiswitch")
            {
                _geminiManager.SwitchToNextAgent();
                var stats = _geminiManager.GetCurrentAgentStatus();
                await _botClient.SendTextMessageAsync(chatId, $"üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞**\n\n{stats}", parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            else if (cleanCommand == "/glaiclear")
            {
                _geminiManager.ClearContext(chatId);
                await _botClient.SendTextMessageAsync(chatId, "üßπ **–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω!**", disableNotification: true);
                return;
            }
            else if (cleanCommand == "/game")
            {
                await ShowGameMenuAsync(chatId);
                return;
            }
            else if (cleanCommand == "/gamememe")
            {
                await ShowDifficultyMenuAsync(chatId, "meme");
                return;
            }
            else if (cleanCommand == "/gamelol")
            {
                await ShowDifficultyMenuAsync(chatId, "lol");
                return;
            }
            else if (cleanCommand == "/gameprogramming")
            {
                await ShowDifficultyMenuAsync(chatId, "programming");
                return;
            }
            else if (cleanCommand == "/gamestop")
            {
                await StopGameAsync(chatId);
                return;
            }
            else if (cleanCommand == "/gametest")
            {
                await TestGamePromptAsync(chatId);
                return;
            }
            else if (cleanCommand == "/gifsearch")
            {
                await HandleGifSearchAsync(chatId, text);
                return;
            }
            else if (cleanCommand == "/gifrandom")
            {
                await HandleRandomGifAsync(chatId);
                return;
            }
            else if (cleanCommand == "/gifemotion")
            {
                await HandleGifEmotionAsync(chatId, text);
                return;
            }
            else if (cleanCommand == "/giftext")
            {
                await HandleGifTextCommandAsync(chatId);
                return;
            }
            else if (cleanCommand == "/gifsettings")
            {
                await ShowGifSettingsAsync(chatId);
                return;
            }
            else if (cleanCommand == "/chatactivity")
            {
                await ShowChatActivityAsync(chatId);
                return;
            }
            else if (cleanCommand == "/resetactivity")
            {
                await ResetChatActivityAsync(chatId);
                return;
            }
            else if (cleanCommand == "/testtenor")
            {
                await TestTenorApiAsync(chatId);
                return;
            }
        }

        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∏–≥—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
        if (_gameStates.ContainsKey(chatId) && _gameStates[chatId].IsActive)
        {
            await ProcessGameAnswerAsync(chatId, text);
            return;
        }

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º Gemini –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI
        if (_geminiMode.ContainsKey(chatId) && _geminiMode[chatId])
        {
            try
            {
                var aiResponse = await _geminiManager.GenerateResponseWithContextAsync(text, chatId);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º
                await HandleAiResponseWithGifAsync(chatId, aiResponse, text);
            }
            catch (Exception ex)
            {
                var errorMessage = $"‚ùå **–û—à–∏–±–∫–∞ AI:** {ex.Message}\n\n" + _geminiManager.GetCurrentAgentStatus();
                await _botClient.SendTextMessageAsync(chatId, errorMessage, parseMode: ParseMode.Markdown, disableNotification: true);
            }
            return;
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        if (message.Animation != null && _pendingGifTexts.ContainsKey(chatId))
        {
            await HandleGifWithTextAsync(chatId, message.Animation.FileId, _pendingGifTexts[chatId]);
            _pendingGifTexts.Remove(chatId);
            return;
        }

        // –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (text.StartsWith("/"))
        {
            var cleanCommand = text.Split('@')[0];
            await HandleCommandAsync(chatId, cleanCommand, message.From?.Username);
            return;
        }

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ AI
        if (message.From != null && !string.IsNullOrWhiteSpace(text))
        {
            await _chatActivityTracker.TrackMessageAsync(
                chatId, 
                message.From.Id, 
                message.From.Username ?? message.From.FirstName, 
                text, 
                DateTime.UtcNow);
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    private static bool ContainsProfanity(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return false;
        var lower = text.ToLowerInvariant();
        // –ë–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã, –≥—Ä—É–±—ã–π —Ñ–∏–ª—å—Ç—Ä (–±–µ–∑ —Ä–µ–≥—ç–∫—Å–ø–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        string[] words = {
            "–±–ª—è", "–µ–±–∞", "–µ–±–∞—Ç", "—ë–±–∞", "—ë–±", "—Å—É–∫–∞", "—Ö—É–π", "–ø–∏–∑–¥", "—Å—É—á–∞—Ä", "–º—Ä–∞–∑", "–≥–∞–Ω–¥–æ–Ω", "–µ–±–∞–Ω", "—É—ë–±", "—É–µ–±"
        };
        foreach (var w in words)
        {
            if (lower.Contains(w)) return true;
        }
        return false;
    }

    private static string GetChatMilestoneMessage(long milestone)
    {
        // –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        var pool = new[]
        {
            $"–í—ã –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã! –ë—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª—ã—Ö {milestone} —Å–æ–æ–±—â–µ–Ω–∏–π!",
            $"–ß–∞—Ç –∫–∏–ø–∏—Ç! {milestone} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!",
            $"–û–≥–æ! –ú—ã –ø—Ä–æ–±–∏–ª–∏ –æ—Ç–º–µ—Ç–∫—É –≤ {milestone}!",
            $"{milestone}! –≠—Ç–æ —à–µ–¥–µ–≤—Ä –æ–±—â–µ–Ω–∏—è!",
            $"{milestone} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –∂–∞—Ä–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!"
        };
        var idx = (int)(milestone / 10000) % pool.Length;
        return pool[idx];
    }

    private NotificationSettings GetOrCreateSettings(long chatId)
    {
        if (!_chatSettings.TryGetValue(chatId, out var settings))
        {
            settings = new NotificationSettings();
            _chatSettings[chatId] = settings;
        }
        return settings;
    }

    private async Task HandleCommandAsync(long chatId, string command, string? username)
    {
        try
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var cmd = parts[0].ToLower();

            switch (cmd)
            {
                case "/start":
                    await SendWelcomeMessageAsync(chatId);
                    break;

                case "/help":
                    await SendHelpMessageAsync(chatId);
                    break;

                case "/settings":
                case "/manage":
                    await SendSettingsMessageAsync(chatId);
                    break;

                case "/status":
                    await HandleStatusCommandAsync(chatId);
                    break;

                case "/stats":
                    await HandleStatsCommandAsync(chatId);
                    break;

                case "/commits":
                    if (parts.Length > 1)
                    {
                        var branch = parts[1];
                        var count = parts.Length > 2 && int.TryParse(parts[2], out var c) ? c : 5;
                        await HandleCommitsCommandAsync(chatId, branch, count);
                    }
                    else
                    {
                        await ShowBranchSelectionAsync(chatId, "commits");
                    }
                    break;

                case "/branches":
                    await HandleBranchesCommandAsync(chatId);
                    break;

                case "/prs":
                case "/pulls":
                    await HandlePullRequestsCommandAsync(chatId);
                    break;

                case "/ci":
                case "/workflows":
                    if (parts.Length > 1)
                    {
                        var wfBranch = parts[1];
                        var wfCount = parts.Length > 2 && int.TryParse(parts[2], out var wc) ? wc : 5;
                        await HandleWorkflowsCommandAsync(chatId, wfBranch, wfCount);
                    }
                    else
                    {
                        await ShowBranchSelectionAsync(chatId, "workflows");
                    }
                    break;

                case "/deploy":
                    if (parts.Length > 1)
                    {
                        await HandleDeployCommandAsync(chatId, parts[1], username);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è: /deploy staging –∏–ª–∏ /deploy production", disableNotification: true);
                    }
                    break;

                case "/laststats":
                    await SendDailySummaryAsync(chatId);
                    break;

                case "/weekstats":
                    await ShowWeekSelectionAsync(chatId);
                    break;

                case "/rating":
                    await HandleRatingCommandAsync(chatId);
                    break;

                case "/trends":
                    await HandleTrendsCommandAsync(chatId);
                    break;

                case "/search":
                    if (parts.Length > 1)
                    {
                        var query = string.Join(" ", parts.Skip(1));
                        await HandleSearchCommandAsync(chatId, query);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n–ü—Ä–∏–º–µ—Ä: /search fix bug", disableNotification: true);
                    }
                    break;

                case "/authors":
                    await HandleAuthorsCommandAsync(chatId);
                    break;

                case "/files":
                    if (parts.Length > 1)
                    {
                        var commitSha = parts[1];
                        await HandleFilesCommandAsync(chatId, commitSha);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /files <sha –∫–æ–º–º–∏—Ç–∞>", disableNotification: true);
                    }
                    break;

                case "/achivelist":
                case "/achivementlist":
                case "/achievementlist":
                case "/achievlist":
                case "/achievements":
                case "/achievement":
                case "/achivement":
                    await ShowAchievementPageAsync(chatId, 0, null);
                    break;

                case "/leaderboard":
                case "/top":
                    await HandleLeaderboardCommandAsync(chatId);
                    break;

                case "/streaks":
                case "/streak":
                    await HandleStreaksCommandAsync(chatId);
                    break;
                case "/recalc":
                    await HandleRecalcCommandAsync(chatId);
                    break;

                case "/deep":
                    if (parts.Length > 1)
                    {
                        var deeplinkPath = string.Join(" ", parts.Skip(1)).Trim('"', '\'');
                        await HandleDeeplinkCommandAsync(chatId, deeplinkPath);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deep <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>\n–ü—Ä–∏–º–µ—Ä: /deep src/components/Button.tsx\n–ò–ª–∏: /deep src/components/Button.tsx:150:10", disableNotification: true);
                    }
                    break;

                case "/info":
                    await SendInfoMessageAsync(chatId);
                    break;

                case "/ratelimit":
                case "/limits":
                    await HandleRateLimitCommandAsync(chatId);
                    break;

                case "/cache":
                case "/cacheinfo":
                    await HandleCacheInfoCommandAsync(chatId);
                    break;

                case "/protection":
                case "/backup":
                    await HandleDataProtectionCommandAsync(chatId);
                    break;

                case "/–ø–µ–¥–∏–∫":
                    await _botClient.SendTextMessageAsync(chatId, "–°–∞–º —Ç—ã –ø–µ–¥–∏–∫", disableNotification: true);
                    break;

                default:

                    break;
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {ex.Message}", disableNotification: true);
        }
    }

    private async Task SendWelcomeMessageAsync(long chatId)
    {
        var message = @"ü§ñ *GitHub Monitor Bot*
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è goodluckv2

üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ö–æ–º–º–∏—Ç–∞—Ö
‚Ä¢ PR/MR
‚Ä¢ CI/CD
‚Ä¢ –†–µ–ª–∏–∑–∞—Ö

üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üì¶ Git", "menu:git"),
                InlineKeyboardButton.WithCallbackData("üìä Stats", "menu:stats"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üñ±Ô∏è Cursor", "menu:cursor"),
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è –ò–Ω—Ñ–æ", "/info"),
                InlineKeyboardButton.WithCallbackData("‚ùì –°–ø—Ä–∞–≤–∫–∞", "/help"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task SendSettingsMessageAsync(long chatId)
    {
        var settings = GetOrCreateSettings(chatId);

        var message = @"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.PushNotifications ? "‚úÖ" : "‚ùå")} –ö–æ–º–º–∏—Ç—ã",
                    $"toggle:push:{chatId}"),
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.PullRequestNotifications ? "‚úÖ" : "‚ùå")} PR/MR",
                    $"toggle:pr:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.WorkflowNotifications ? "‚úÖ" : "‚ùå")} CI/CD",
                    $"toggle:ci:{chatId}"),
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.ReleaseNotifications ? "‚úÖ" : "‚ùå")} –†–µ–ª–∏–∑—ã",
                    $"toggle:release:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{(settings.IssueNotifications ? "‚úÖ" : "‚ùå")} –ó–∞–¥–∞—á–∏",
                    $"toggle:issue:{chatId}")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task SendHelpMessageAsync(long chatId)
    {
        var message = @"üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

üè† /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ÑπÔ∏è /info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì¶ *Git - –†–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º:*
üìä /status - –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
üìù /commits [–≤–µ—Ç–∫–∞] [–∫–æ–ª-–≤–æ] - –ö–æ–º–º–∏—Ç—ã
üåø /branches - –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
üîÑ /prs - –û—Ç–∫—Ä—ã—Ç—ã–µ PR
‚öôÔ∏è /ci [–≤–µ—Ç–∫–∞] - CI/CD —Å—Ç–∞—Ç—É—Å
üöÄ /deploy [—Å—Ä–µ–¥–∞] - –î–µ–ø–ª–æ–π
üîé /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–º–∏—Ç–∞–º
üë• /authors - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã
üìÅ /files <sha> - –§–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ
üìà /ratelimit - GitHub API –ª–∏–º–∏—Ç—ã
üíæ /cache - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
üõ°Ô∏è /protection - –ó–∞—â–∏—Ç–∞ –≤–µ—Ç–æ–∫
üíæ /backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ

üìä *Stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
üìà /laststats - –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìä /weekstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º
üèÜ /rating - –†–µ–π—Ç–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
üìâ /trends - –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üèÖ /achievements - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—á–∏–≤–æ–∫
ü•á /leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
üî• /streaks - –¢–æ–ø —Å—Ç—Ä–∏–∫–æ–≤
üîÑ /recalc - –ü–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

ü§ñ *Gemini AI - –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:*
‚ñ∂Ô∏è /glaistart - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º AI
‚èπÔ∏è /glaistop - –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º AI
üìä /glaistats - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
üîç /glaicurrent - –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç
üîÑ /glaiswitch - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
üßπ /glaiclear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

üéÆ *–ò–≥—Ä—ã:*
üéØ /game - –ú–µ–Ω—é –∏–≥—Ä
üòÑ /gamememe - –ò–≥—Ä–∞ —Å –º–µ–º–∞–º–∏
üòÇ /gamelol - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ League of Legends
üíª /gameprogramming - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚èπÔ∏è /gamestop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
üß™ /gametest - –¢–µ—Å—Ç –∏–≥—Ä—ã

üé¨ *GIF - –†–∞–±–æ—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π:*
üîç /gifsearch <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ GIF
üé≤ /gifrandom - –°–ª—É—á–∞–π–Ω—ã–π GIF
üòä /gifemotion <—ç–º–æ—Ü–∏—è> - GIF –ø–æ —ç–º–æ—Ü–∏–∏
üìù /giftext - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ GIF
‚öôÔ∏è /gifsettings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GIF

ü§ñ *AI –î–∏–∞–ª–æ–≥–∏:*
üìä /chatactivity - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üîÑ /resetactivity - –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
üß™ /testtenor - –¢–µ—Å—Ç Tenor API

üñ±Ô∏è *Cursor - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*
üîó /deep <–ø—É—Ç—å> - –î–∏–ø–ª–∏–Ω–∫ –¥–ª—è Cursor
  –ü—Ä–∏–º–µ—Ä—ã:
  ‚Ä¢ /deep src/App.tsx
  ‚Ä¢ /deep src/App.tsx:42
  ‚Ä¢ /deep src/App.tsx:42:10

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –í —Ä–µ–∂–∏–º–µ Gemini –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ AI";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üì¶ Git", "menu:git"),
                InlineKeyboardButton.WithCallbackData("üìä Stats", "menu:stats"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("ü§ñ Gemini AI", "menu:gemini"),
                InlineKeyboardButton.WithCallbackData("üéÆ –ò–≥—Ä—ã", "menu:games"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üé¨ GIF", "menu:gif"),
                InlineKeyboardButton.WithCallbackData("üñ±Ô∏è Cursor", "menu:cursor"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è –ò–Ω—Ñ–æ", "/info"),
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableNotification: true,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task HandleWorkflowsCommandAsync(long chatId, string? branch, int count)
    {
        try
        {
            var workflows = await _gitHubService.GetWorkflowRunsAsync(branch ?? string.Empty, count);
            await _botClient.SendTextMessageAsync(chatId, workflows, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleDeployCommandAsync(long chatId, string environment, string? username)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (string.IsNullOrEmpty(username))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", disableNotification: true);
                return;
            }

            var allowedUsers = new[] { "your_username" }; // –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (!allowedUsers.Contains(username.ToLower()))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è", disableNotification: true);
                return;
            }

            if (environment.ToLower() != "staging" && environment.ToLower() != "production")
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: staging, production", disableNotification: true);
                return;
            }

            var message = $"üöÄ *–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ {environment}*\n\n" +
                         $"üë§ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª: {username}\n" +
                         $"‚è∞ –í—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm}\n" +
                         $"üîÑ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflow
            // await _gitHubService.TriggerDeploymentAsync(environment, username);

            var successMessage = $"‚úÖ *–î–µ–ø–ª–æ–π –≤ {environment} –∑–∞–ø—É—â–µ–Ω!*\n\n" +
                               $"üë§ {username}\n" +
                               $"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /ci";

            await _botClient.SendTextMessageAsync(chatId, successMessage, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleStatusCommandAsync(long chatId)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var scheduledKey = "status_main";
            var scheduledStatus = _achievementService.GetScheduledStats(scheduledKey);
            
            if (scheduledStatus != null)
            {
                await _botClient.SendTextMessageAsync(chatId, scheduledStatus, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var cacheKey = $"status_{DateTime.UtcNow:yyyyMMddHH}";
            var cachedStatus = _achievementService.GetCachedStats(cacheKey);
            
            if (cachedStatus != null)
            {
                await _botClient.SendTextMessageAsync(chatId, cachedStatus, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            var status = await _gitHubService.GetRepositoryStatusAsync();
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _achievementService.CacheStats(cacheKey, status, "status");
            
            await _botClient.SendTextMessageAsync(chatId, status, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleCommitsCommandAsync(long chatId, string branch, int count)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var scheduledKey = $"commits_{branch}_{count}";
            var scheduledCommits = _achievementService.GetScheduledStats(scheduledKey);
            
            if (scheduledCommits != null)
            {
                await _botClient.SendTextMessageAsync(chatId, scheduledCommits, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var cacheKey = $"commits_{branch}_{count}_{DateTime.UtcNow:yyyyMMddHH}";
            var cachedCommits = _achievementService.GetCachedStats(cacheKey);
            
            if (cachedCommits != null)
            {
                await _botClient.SendTextMessageAsync(chatId, cachedCommits, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            var commits = await _gitHubService.GetRecentCommitsAsync(branch, count);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _achievementService.CacheStats(cacheKey, commits, "commits");
            
            await _botClient.SendTextMessageAsync(chatId, commits, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleBranchesCommandAsync(long chatId)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesAsync();
            await _botClient.SendTextMessageAsync(chatId, branches, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandlePullRequestsCommandAsync(long chatId)
    {
        try
        {
            var prs = await _gitHubService.GetPullRequestsAsync();
            await _botClient.SendTextMessageAsync(chatId, prs, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PR: {ex.Message}", disableNotification: true);
        }
    }

    public async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        Console.WriteLine($"üéØ HandleCallbackQueryAsync called with data: '{callbackQuery.Data}'");

        var chatId = callbackQuery.Message?.Chat.Id ?? 0;
        var data = callbackQuery.Data;
        var messageId = callbackQuery.Message?.MessageId ?? 0;

        Console.WriteLine($"üìç ChatId: {chatId}, Data: '{data}', MessageId: {messageId}");

        if (chatId == 0 || string.IsNullOrEmpty(data) || messageId == 0)
        {
            Console.WriteLine("‚ùå Invalid callback query data");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
            return;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        var callbackKey = $"{callbackQuery.Id}:{data}";
        if (_processedCallbacks.Contains(callbackKey))
        {
            Console.WriteLine("‚ö†Ô∏è Callback already processed, ignoring");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ");
            return;
        }

        _processedCallbacks.Add(callbackKey);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        if (_processedCallbacks.Count > 1000)
        {
            _processedCallbacks.Clear();
        }

        try
        {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
            Console.WriteLine("‚úÖ Callback query answered");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            if (data.StartsWith("cd:") || data.StartsWith("commit_details:"))
            {
                Console.WriteLine("üìã Processing commit details request");
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await DeleteMessageAsync(chatId, messageId);
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
                await HandleCommitDetailsCallbackAsync(chatId, data);
            }
            else if (data.StartsWith("toggle:"))
            {
                Console.WriteLine("‚öôÔ∏è Processing notification toggle request");
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await HandleNotificationToggleAsync(chatId, data, messageId);
            }
            else if (data.StartsWith("branch_"))
            {
                Console.WriteLine("üåø Processing branch selection");
                await HandleBranchCallbackAsync(chatId, data, messageId);
            }
            else if (data.StartsWith("week_stats:"))
            {
                Console.WriteLine("üìä Processing week stats selection");
                await HandleWeekStatsCallbackAsync(chatId, data, messageId);
            }
            else if (data == "search_menu")
            {
                Console.WriteLine("üîç Processing search menu");
                await ShowSearchMenuAsync(chatId, messageId);
            }
            else if (data.StartsWith("achv:"))
            {
                Console.WriteLine("üèÜ Processing achievement navigation");
                var parts = data.Split(':');
                if (parts.Length >= 3)
                {
                    var dir = parts[1];
                    if (int.TryParse(parts[2], out var idx))
                    {
                        var delta = dir == "next" ? 1 : dir == "prev" ? -1 : 0;
                        await ShowAchievementPageAsync(chatId, idx + delta, messageId);
                    }
                }
            }
            else if (data.StartsWith("menu:"))
            {
                Console.WriteLine($"üìÇ Processing submenu: {data}");
                await HandleSubmenuAsync(chatId, messageId, data);
            }
            else if (data.StartsWith("difficulty:"))
            {
                Console.WriteLine($"üéØ Processing difficulty selection: {data}");
                await HandleDifficultySelectionAsync(chatId, messageId, data);
            }
            else if (data.StartsWith("copy_deeplink:"))
            {
                Console.WriteLine("üìã Processing deeplink copy request");
                var deeplink = data.Substring("copy_deeplink:".Length);
                await HandleDeeplinkCopyAsync(chatId, deeplink);
            }
            else
            {
                Console.WriteLine("üìù Processing regular command");
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ callback data
                await HandleCommandAsync(chatId, data, callbackQuery.From?.Username);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                if (ShouldDeletePreviousMessage(data))
                {
                    await DeleteMessageAsync(chatId, messageId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Callback query error: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private async Task ShowAchievementPageAsync(long chatId, int index, int? messageIdToEdit)
    {
        var list = _achievementService.GetAllAchievements().OrderBy(a => a.Name).ToList();
        if (list.Count == 0)
        {
            await _botClient.SendTextMessageAsync(chatId, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫", disableNotification: true);
            return;
        }

        var count = list.Count;
        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
        var idx = ((index % count) + count) % count;
        var a = list[idx];

        var status = a.IsUnlocked ? "‚úÖ" : "‚ùå";
        var holder = a.IsUnlocked && !string.IsNullOrEmpty(a.HolderName) ? $" (\u2014 {a.HolderName})" : "";
        var value = a.Value.HasValue ? $" [{a.Value}]" : "";
        var caption = $"{a.Emoji} *{a.Name}*\n{a.Description}{holder}{value}\n\n_{idx + 1}/{count}_";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è", $"achv:prev:{idx}"),
                InlineKeyboardButton.WithCallbackData("‚û°Ô∏è", $"achv:next:{idx}")
            },
            new [] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
        });

        try
        {
            if (messageIdToEdit.HasValue && messageIdToEdit.Value != 0)
            {
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è media
                await DeleteMessageAsync(chatId, messageIdToEdit.Value);
            }

            var url = a.GifUrl?.Trim() ?? string.Empty;
            try
            {
                await _botClient.SendAnimationAsync(
                    chatId: chatId,
                    animation: InputFile.FromUri(url),
                    caption: caption,
                    parseMode: ParseMode.Markdown,
                    disableNotification: true,
                    replyMarkup: keyboard
                );
            }
            catch (Telegram.Bot.Exceptions.ApiRequestException apiEx)
            {
                // –ê–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫: –µ—Å–ª–∏ —ç—Ç–æ .gif —Å media.tenor.com, –ø–æ–ø—Ä–æ–±—É–µ–º .mp4
                if (url.Contains("media.tenor.com") && url.EndsWith(".gif", StringComparison.OrdinalIgnoreCase))
                {
                    var mp4Url = url[..^4] + ".mp4";
                    Console.WriteLine($"‚ö†Ô∏è GIF failed, retrying MP4: {mp4Url}. Error: {apiEx.Message}");
                    await _botClient.SendAnimationAsync(
                        chatId: chatId,
                        animation: InputFile.FromUri(mp4Url),
                        caption: caption,
                        parseMode: ParseMode.Markdown,
                        disableNotification: true,
                        replyMarkup: keyboard
                    );
                }
                else
                {
                    throw;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to show achievement page: {ex.Message}");
            // –§–æ–ª–ª–±–µ–∫: —Ç–µ–∫—Å—Ç –±–µ–∑ –≥–∏—Ñ–∫–∏
            if (messageIdToEdit.HasValue && messageIdToEdit.Value != 0)
            {
                await _botClient.EditMessageTextAsync(chatId, messageIdToEdit.Value, caption, parseMode: ParseMode.Markdown, replyMarkup: keyboard);
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, caption, parseMode: ParseMode.Markdown, disableNotification: true, replyMarkup: keyboard);
            }
        }
    }

    private async Task DeleteMessageAsync(long chatId, int messageId)
    {
        try
        {
            await _botClient.DeleteMessageAsync(chatId, messageId);
            Console.WriteLine($"üóëÔ∏è Deleted message {messageId} from chat {chatId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to delete message {messageId}: {ex.Message}");
        }
    }

    private bool ShouldDeletePreviousMessage(string callbackData)
    {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        var deleteCommands = new[]
        {
            "/start",           // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            "/help",            // –°–ø—Ä–∞–≤–∫–∞
            "/info",            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "/settings",        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            "menu:git",         // Git –º–µ–Ω—é
            "menu:stats",       // Stats –º–µ–Ω—é
            "menu:gemini",      // Gemini AI –º–µ–Ω—é
            "menu:games",       // –ò–≥—Ä—ã –º–µ–Ω—é
            "menu:gif",         // GIF –º–µ–Ω—é
            "menu:cursor"       // Cursor –º–µ–Ω—é
        };

        return deleteCommands.Contains(callbackData);
    }

    private async Task RestorePushMessageAsync(long chatId, string commitSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            var author = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
            var message = "–ö–æ–º–º–∏—Ç";
            var shortSha = commitSha[..8];

            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            var lines = commitDetails.Split('\n');
            foreach (var line in lines)
            {
                if (line.StartsWith("üë§ –ê–≤—Ç–æ—Ä: "))
                {
                    author = line.Replace("üë§ –ê–≤—Ç–æ—Ä: ", "").Trim();
                }
                else if (line.StartsWith("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:"))
                {
                    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "üìù –°–æ–æ–±—â–µ–Ω–∏–µ:" —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
                    var messageIndex = Array.IndexOf(lines, line) + 1;
                    if (messageIndex < lines.Length)
                    {
                        message = lines[messageIndex].Trim('`', '*').Replace("```\n", "").Split('\n')[0];
                        if (message.Length > 50)
                        {
                            message = message[..47] + "...";
                        }
                    }
                    break;
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ
            var pushMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ RaspizDIYs/{repoName}*\n\n" +
                             $"üåø –í–µ—Ç–∫–∞: `main`\n" + // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é main, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ç–∫–µ
                             $"üì¶ –ö–æ–º–º–∏—Ç–æ–≤: 1\n\n" +
                             $"üîπ `{shortSha}` - {author}\n" +
                             $"   {message}\n\n" +
                             $"üë§ –ê–≤—Ç–æ—Ä: {author}";

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–æ"
            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìã –ü–æ–¥—Ä–æ–±–Ω–æ", $"cd:{shortSha}:{repoName}:details")
                }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: pushMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true,
                replyMarkup: inlineKeyboard
            );

            Console.WriteLine($"üîÑ Restored push message for commit {shortSha}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to restore push message: {ex.Message}");

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var owner = _gitHubService.OwnerName;
            var repo = _gitHubService.RepoName;
            var fallbackMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ {owner}/{repoName}*\n\n" +
                                 $"üì¶ –ö–æ–º–º–∏—Ç: `{commitSha[..8]}`\n" +
                                 $"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ GitHub](https://github.com/{owner}/{repo}/commit/{commitSha})";

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: fallbackMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true
            );
        }
    }

    private async Task HandleCommitDetailsCallbackAsync(long chatId, string callbackData)
    {
        try
        {
            // –†–∞–∑–±–∏—Ä–∞–µ–º callback data: cd:shortSha:repo:action
            var parts = callbackData.Split(':');
            if (parts.Length < 4)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", disableNotification: true);
                return;
            }

            var shortSha = parts[1];
            var repoName = parts[2];
            var action = parts[3];

            // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ SHA –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ GitHub API –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É
            var commitSha = await GetFullShaFromShortAsync(shortSha, repoName);

            if (action == "details")
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞
                var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

                var callbackShortSha = commitSha[..8]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è callback
                var backKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"cd:{callbackShortSha}:{repoName}:back")
                    }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: commitDetails,
                    parseMode: ParseMode.Markdown,
                    disableWebPagePreview: true,
                    disableNotification: true,
                    replyMarkup: backKeyboard
                );
            }
            else if (action == "back")
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—à–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await RestorePushMessageAsync(chatId, commitSha, repoName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling commit details: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞", disableNotification: true);
        }
    }

    private async Task HandleNotificationToggleAsync(long chatId, string callbackData, int messageId)
    {
        try
        {
            // –†–∞–∑–±–∏—Ä–∞–µ–º callback data: toggle:type:chatId
            var parts = callbackData.Split(':');
            if (parts.Length < 3)
            {
                await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                return;
            }

            var type = parts[1];
            var targetChatId = long.Parse(parts[2]);

            if (chatId != targetChatId)
            {
                await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç");
                return;
            }

            var settings = GetOrCreateSettings(chatId);

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            string notificationType = "";
            switch (type)
            {
                case "push":
                    settings.PushNotifications = !settings.PushNotifications;
                    notificationType = "–ö–æ–º–º–∏—Ç—ã";
                    break;
                case "pr":
                    settings.PullRequestNotifications = !settings.PullRequestNotifications;
                    notificationType = "PR/MR";
                    break;
                case "ci":
                    settings.WorkflowNotifications = !settings.WorkflowNotifications;
                    notificationType = "CI/CD";
                    break;
                case "release":
                    settings.ReleaseNotifications = !settings.ReleaseNotifications;
                    notificationType = "–†–µ–ª–∏–∑—ã";
                    break;
                case "issue":
                    settings.IssueNotifications = !settings.IssueNotifications;
                    notificationType = "–ó–∞–¥–∞—á–∏";
                    break;
                default:
                    await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                    return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await UpdateSettingsMessageAsync(chatId, messageId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            var statusText = GetNotificationStatus(settings, type);
            await _botClient.AnswerCallbackQueryAsync(callbackData, $"{statusText} {notificationType}");

            Console.WriteLine($"‚öôÔ∏è Toggled {type} notifications for chat {chatId}: {statusText}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error toggling notification: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackData, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private async Task UpdateSettingsMessageAsync(long chatId, int messageId)
    {
        try
        {
            var settings = GetOrCreateSettings(chatId);

            var message = @"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:";

            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.PushNotifications ? "‚úÖ" : "‚ùå")} –ö–æ–º–º–∏—Ç—ã",
                        $"toggle:push:{chatId}"),
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.PullRequestNotifications ? "‚úÖ" : "‚ùå")} PR/MR",
                        $"toggle:pr:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.WorkflowNotifications ? "‚úÖ" : "‚ùå")} CI/CD",
                        $"toggle:ci:{chatId}"),
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.ReleaseNotifications ? "‚úÖ" : "‚ùå")} –†–µ–ª–∏–∑—ã",
                        $"toggle:release:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        $"{(settings.IssueNotifications ? "‚úÖ" : "‚ùå")} –ó–∞–¥–∞—á–∏",
                        $"toggle:issue:{chatId}")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
                }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true,
                replyMarkup: inlineKeyboard
            );

            Console.WriteLine($"‚úÖ Updated settings message for chat {chatId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error updating settings message: {ex.Message}");
        }
    }

    private string GetNotificationStatus(NotificationSettings settings, string type)
    {
        return type switch
        {
            "push" => settings.PushNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "pr" => settings.PullRequestNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "ci" => settings.WorkflowNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "release" => settings.ReleaseNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            "issue" => settings.IssueNotifications ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }

    private async Task HandleStatsCommandAsync(long chatId)
    {
        var stats = _messageStatsService.GetChatStats(chatId);
        if (stats == null)
        {
            await _botClient.SendTextMessageAsync(chatId, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.", parseMode: ParseMode.Markdown, disableWebPagePreview: true, disableNotification: true);
            return;
        }

        var top = _messageStatsService.GetTopUsers(chatId, 5);
        var lines = new List<string>();
        lines.Add($"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {stats.TotalMessages}");
        if (top.Count > 0)
        {
            lines.Add("");
            lines.Add("–¢–æ–ø –∞–∫—Ç–∏–≤–∏—Å—Ç–æ–≤:");
            int rank = 1;
            foreach (var (userId, count) in top)
            {
                lines.Add($"{rank}. id:{userId} ‚Äî {count}");
                rank++;
            }
        }

        var text = string.Join("\n", lines);
        await _botClient.SendTextMessageAsync(chatId, text, parseMode: ParseMode.Markdown, disableWebPagePreview: true, disableNotification: true);
    }

    public bool ShouldSendNotification(long chatId, string notificationType)
    {
        var settings = GetOrCreateSettings(chatId);

        Console.WriteLine($"üîç Checking notification settings for chat {chatId}, type: {notificationType}");
        Console.WriteLine($"   Push: {settings.PushNotifications}, PR: {settings.PullRequestNotifications}, CI: {settings.WorkflowNotifications}, Release: {settings.ReleaseNotifications}, Issues: {settings.IssueNotifications}");

        var result = notificationType switch
        {
            "push" => settings.PushNotifications,
            "pull_request" => settings.PullRequestNotifications,
            "workflow" => settings.WorkflowNotifications,
            "release" => settings.ReleaseNotifications,
            "issues" => settings.IssueNotifications,
            _ => true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
        };

        Console.WriteLine($"   Result for {notificationType}: {result}");
        return result;
    }

    public void ScheduleMessageDeletion(long chatId, int messageId, int delayMinutes = 30)
    {
        var timerKey = $"{chatId}:{messageId}";
        var timer = new System.Timers.Timer(delayMinutes * 60 * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        timer.Elapsed += async (sender, e) =>
        {
            try
            {
                Console.WriteLine($"üóëÔ∏è Auto-deleting message {messageId} from chat {chatId} after {delayMinutes} minutes");
                await _botClient.DeleteMessageAsync(chatId, messageId);
                Console.WriteLine($"‚úÖ Message {messageId} deleted successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Failed to delete message {messageId}: {ex.Message}");
            }
            finally
            {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                timer.Stop();
                timer.Dispose();
                _messageTimers.Remove(timerKey);
            }
        };

        timer.AutoReset = false; // –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer.Start();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        _messageTimers[timerKey] = timer;

        Console.WriteLine($"‚è∞ Scheduled deletion of message {messageId} from chat {chatId} in {delayMinutes} minutes");
    }

            public void CancelMessageDeletion(long chatId, int messageId)
        {
            var timerKey = $"{chatId}:{messageId}";
            if (_messageTimers.TryGetValue(timerKey, out var timer))
            {
                _messageTimers.Remove(timerKey);
                timer.Stop();
                timer.Dispose();
                Console.WriteLine($"üö´ Cancelled deletion of message {messageId} from chat {chatId}");
            }
        }

    public async Task SendAutoDeletingMessageAsync(long chatId, string text, int delayMinutes = 30, ParseMode? parseMode = null, IReplyMarkup? replyMarkup = null)
    {
        try
        {
            var message = await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: text,
                parseMode: parseMode,
                disableNotification: true,
                replyMarkup: replyMarkup
            );

            // –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            ScheduleMessageDeletion(chatId, message.MessageId, delayMinutes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to send auto-deleting message: {ex.Message}");
            throw;
        }
    }

    private async Task<string> GetFullShaFromShortAsync(string shortSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º main –≤–µ—Ç–∫—É)
            var commitMessage = await _gitHubService.GetRecentCommitsAsync("main", 20);

            // –ò—â–µ–º –∫–æ–º–º–∏—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º SHA
            // GetRecentCommitsAsync –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç string, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ-–¥—Ä—É–≥–æ–º—É
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π SHA –∫–∞–∫ –ø–æ–ª–Ω—ã–π
            return shortSha;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting full SHA: {ex.Message}");
            return shortSha; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private string NormalizeTenorUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url)) return url;
        var u = url.Trim();
        // Replace known host variants to media.tenor.com
        if (u.Contains("tenor.com") && !u.Contains("media.tenor.com"))
        {
            u = u.Replace("https://tenor.com/view/", "https://media.tenor.com/")
                 .Replace("https://tenor.com/ru/view/", "https://media.tenor.com/");
        }
        // If page URL slipped through, leave it, fallback in sender will try mp4
        return u;
    }

    private void SetupDailySummaryTimer()
    {
        _dailySummaryTimer = new System.Timers.Timer();
        if (_dailySummaryTimer != null)
        {
            _dailySummaryTimer.Elapsed += async (sender, e) => await SendDailySummaryAsync();
            _dailySummaryTimer.AutoReset = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ 18:00 –ú–°–ö
            var now = DateTime.Now;
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var nowMsk = TimeZoneInfo.ConvertTime(now, mskTimeZone);

            var nextRun = nowMsk.Date.AddHours(18);
            if (nowMsk >= nextRun)
            {
                nextRun = nextRun.AddDays(1);
            }

            var timeUntilNextRun = nextRun - nowMsk;
            _dailySummaryTimer.Interval = timeUntilNextRun.TotalMilliseconds;

            _dailySummaryTimer.Start();
            Console.WriteLine($"‚è∞ Daily summary timer set to run in {timeUntilNextRun.TotalHours:F1} hours");
        }
    }

    private async Task SendDailySummaryAsync(long? targetChatId = null)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var (branchStats, authorStats) = await _gitHubService.GetDailyCommitStatsAsync();
            var (workflowSuccess, workflowFailure) = await _gitHubService.GetDailyWorkflowStatsAsync();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Chat ID: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            long chatId;
            if (targetChatId.HasValue)
            {
                chatId = targetChatId.Value;
            }
            else
            {
                var configChatId = Environment.GetEnvironmentVariable("TELEGRAM_CHAT_ID") ??
                                  throw new InvalidOperationException("TELEGRAM_CHAT_ID not configured");

                if (!long.TryParse(configChatId, out chatId))
                {
                    Console.WriteLine("‚ùå Invalid TELEGRAM_CHAT_ID format");
                    return;
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π —Å —É—á–µ—Ç–æ–º –ú–°–ö
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var yesterdayMsk = TimeZoneInfo.ConvertTime(DateTime.UtcNow.AddDays(-1), mskTimeZone);
            
            var title = targetChatId.HasValue
                ? $"üìä *–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {yesterdayMsk:dd.MM.yyyy}*"
                : $"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {yesterdayMsk:dd.MM.yyyy}*";
            var message = $"{title}\n\n";

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –≤–µ—Ç–∫–∞–º
            message += "üìù *–ö–æ–º–º–∏—Ç—ã –ø–æ –≤–µ—Ç–∫–∞–º:*\n";
            var totalCommits = 0;

            foreach (var (branch, count) in branchStats.OrderByDescending(x => x.Value))
            {
                if (count > 0)
                {
                    message += $"üåø `{branch}`: {count} –∫–æ–º–º–∏—Ç{(count != 1 ? "–æ–≤" : "")}\n";
                    totalCommits += count;
                }
            }

            if (totalCommits == 0)
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–≤—ã—Ö–æ–¥–Ω–æ–π" —Å –≥–∏—Ñ–∫–æ–π
                message = $"üç∫ *–í—ã—Ö–æ–¥–Ω–æ–π! {yesterdayMsk:dd.MM.yyyy}*\n\n";
                message += "–ù–∏–∫—Ç–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–ª ‚Äî –∑–Ω–∞—á–∏—Ç –æ—Ç–¥—ã—Ö–∞–µ–º! üéâ\n\n";
                message += "üçª –ü—å—ë–º –ø–∏–≤–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è –∂–∏–∑–Ω—å—é!";
                
                // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å Tenor (URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TENOR_WEEKEND_GIF)
                var weekendGif = Environment.GetEnvironmentVariable("TENOR_WEEKEND_GIF");
                if (!string.IsNullOrWhiteSpace(weekendGif))
                {
                    try
                    {
                        await _botClient.SendAnimationAsync(
                            chatId: chatId,
                            animation: InputFile.FromUri(NormalizeTenorUrl(weekendGif)),
                            caption: message,
                            parseMode: ParseMode.Markdown,
                            disableNotification: targetChatId.HasValue
                        );
                        var weekendSummaryType = targetChatId.HasValue ? "requested" : "automatic";
                        Console.WriteLine($"‚úÖ {weekendSummaryType} weekend summary sent to chat {chatId} (Tenor GIF)");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ö†Ô∏è Failed to send Tenor GIF: {ex.Message}. Sending text fallback.");
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: message,
                            parseMode: ParseMode.Markdown,
                            disableNotification: targetChatId.HasValue
                        );
                    }
                }
                else
                {
                    // Fallback —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ö–æ—Å—Ç–æ–≤
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: message,
                        parseMode: ParseMode.Markdown,
                        disableNotification: targetChatId.HasValue
                    );
                    var weekendSummaryType = targetChatId.HasValue ? "requested" : "automatic";
                    Console.WriteLine($"‚úÖ {weekendSummaryType} weekend summary sent to chat {chatId} (text only)");
                }

                // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫
                if (_dailySummaryTimer != null && !targetChatId.HasValue)
                {
                    _dailySummaryTimer.Stop();
                    _dailySummaryTimer.Interval = 24 * 60 * 60 * 1000;
                    _dailySummaryTimer.Start();
                }
                return;
            }
            else
            {
                message += $"\nüìà *–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤:* {totalCommits}\n\n";

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
                message += "üë• *–ö–æ–º–º–∏—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä–∞–º:*\n";
                foreach (var (author, stats) in authorStats.OrderByDescending(x => x.Value.Commits))
                {
                    var commitsText = stats.Commits == 1 ? "–∫–æ–º–º–∏—Ç" : "–∫–æ–º–º–∏—Ç–æ–≤";
                    var changesText = stats.TotalChanges == 1 ? "–∏–∑–º–µ–Ω–µ–Ω–∏–µ" : 
                                     stats.TotalChanges < 5 ? "–∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–∏–∑–º–µ–Ω–µ–Ω–∏–π";
                    
                    message += $"üë§ {author}: {stats.Commits} {commitsText}\n";
                    if (stats.TotalChanges > 0)
                    {
                        message += $"   üìä +{stats.Additions} -{stats.Deletions} ({stats.TotalChanges} {changesText})\n";
                    }
                }
                message += "\n";
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CI/CD
            message += "‚öôÔ∏è *CI/CD —Å—Ç–∞—Ç—É—Å—ã:*\n";
            if (workflowSuccess > 0 || workflowFailure > 0)
            {
                message += $"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {workflowSuccess}\n";
                message += $"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {workflowFailure}\n";
                var totalWorkflows = workflowSuccess + workflowFailure;
                var successRate = totalWorkflows > 0 ? (double)workflowSuccess / totalWorkflows * 100 : 0;
                message += $"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successRate:F1}%\n";
            }
            else
            {
                message += "üò¥ CI/CD –∑–∞–ø—É—Å–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n";
            }

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableNotification: targetChatId.HasValue // –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–≤–æ–¥–æ–∫, —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö
            );

            var summaryType = targetChatId.HasValue ? "requested" : "automatic";
            Console.WriteLine($"‚úÖ {summaryType} summary sent to chat {chatId}");

            // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫
            if (_dailySummaryTimer != null && !targetChatId.HasValue)
            {
                _dailySummaryTimer.Stop();
                _dailySummaryTimer.Interval = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                _dailySummaryTimer.Start();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error sending daily summary: {ex.Message}");
        }
    }

    private async Task ShowBranchSelectionAsync(long chatId, string action)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesListAsync();
            
            if (!branches.Any())
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫", disableNotification: true);
                return;
            }

            var message = action switch
            {
                "commits" => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤:*",
                "workflows" => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ CI/CD:*",
                _ => "üåø *–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É:*"
            };

            var buttons = new List<InlineKeyboardButton[]>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–µ—Ç–æ–∫ (–º–∞–∫—Å–∏–º—É–º 8)
            foreach (var branch in branches.Take(8))
            {
                var callbackData = action switch
                {
                    "commits" => $"branch_commits:{branch}",
                    "workflows" => $"branch_workflows:{branch}",
                    _ => $"branch_select:{branch}"
                };
                
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"üåø {branch}", callbackData) });
            }

            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleSearchCommandAsync(long chatId, string query)
    {
        try
        {
            var results = await _gitHubService.SearchCommitsAsync(query);
            
            if (string.IsNullOrEmpty(results))
            {
                await _botClient.SendTextMessageAsync(chatId, $"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", disableNotification: true);
                return;
            }

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: results,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleAuthorsCommandAsync(long chatId)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var scheduledKey = "authors_main";
            var scheduledAuthors = _achievementService.GetScheduledStats(scheduledKey);
            
            if (scheduledAuthors != null)
            {
            var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: scheduledAuthors,
                    parseMode: ParseMode.Markdown,
                    disableNotification: true,
                    replyMarkup: keyboard);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var cacheKey = $"authors_{DateTime.UtcNow:yyyyMMddHH}";
            var cachedAuthors = _achievementService.GetCachedStats(cacheKey);
            
            if (cachedAuthors != null)
            {
                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: cachedAuthors,
                    parseMode: ParseMode.Markdown,
                    disableNotification: true,
                    replyMarkup: keyboard);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            var authors = await _gitHubService.GetActiveAuthorsAsync();
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _achievementService.CacheStats(cacheKey, authors, "authors");
            
            var keyboard2 = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: authors,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard2);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleFilesCommandAsync(long chatId, string commitSha)
    {
        try
        {
            var files = await _gitHubService.GetCommitFilesAsync(commitSha);
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üìã –î–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞", $"cd:{commitSha}:goodluckv2:details") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: files,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleBranchCallbackAsync(long chatId, string callbackData, int messageId)
    {
        try
        {
            var parts = callbackData.Split(':');
            if (parts.Length < 2) return;

            var action = parts[0];
            var branch = parts[1];

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–µ—Ç–∫–∏
            await DeleteMessageAsync(chatId, messageId);

            switch (action)
            {
                case "branch_commits":
                    await HandleCommitsCommandAsync(chatId, branch, 5);
                    break;
                case "branch_workflows":
                    await HandleWorkflowsCommandAsync(chatId, branch, 5);
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling branch callback: {ex.Message}");
        }
    }

    private async Task ShowSearchMenuAsync(long chatId, int messageId)
    {
        try
        {
            var message = "üîç *–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é*\n\n" +
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n" +
                         "üìù `/search <—Ç–µ–∫—Å—Ç>` - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–æ–º–º–∏—Ç–æ–≤\n" +
                         "üë§ `/authors` - –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã\n" +
                         "üìÅ `/files <sha>` - —Ñ–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç–µ";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã", "/authors") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: messageId,
                text: message,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error showing search menu: {ex.Message}");
        }
    }

    private async Task ShowWeekSelectionAsync(long chatId)
    {
        try
        {
            var message = "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*\n\n";
            
            var buttons = new List<InlineKeyboardButton[]>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 –Ω–µ–¥–µ–ª—å
            for (int i = 0; i < 4; i++)
            {
                var weekStart = DateTime.Now.AddDays(-7 * i - (int)DateTime.Now.DayOfWeek + 1);
                var weekEnd = weekStart.AddDays(6);
                var weekText = $"{weekStart:dd.MM} - {weekEnd:dd.MM}";
                
                if (i == 0) weekText += " (—Ç–µ–∫—É—â–∞—è)";
                
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"üìÖ {weekText}", $"week_stats:{i}") });
            }

            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") });

            var keyboard = new InlineKeyboardMarkup(buttons);

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–µ–¥–µ–ª—å: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleRatingCommandAsync(long chatId)
    {
        try
        {
            var rating = await _gitHubService.GetDeveloperRatingAsync();
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: rating,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleTrendsCommandAsync(long chatId)
    {
        try
        {
            var trends = await _gitHubService.GetActivityTrendsAsync();
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: trends,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleWeekStatsCallbackAsync(long chatId, string callbackData, int messageId)
    {
        try
        {
            var parts = callbackData.Split(':');
            if (parts.Length < 2) return;

            var weekOffset = int.Parse(parts[1]);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏
            await DeleteMessageAsync(chatId, messageId);

            var weekStats = await _gitHubService.GetWeeklyStatsAsync(weekOffset);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üìä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–µ–¥–µ–ª—é", "/weekstats") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/help") }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: weekStats,
                parseMode: ParseMode.Markdown,
                disableNotification: true,
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling week stats callback: {ex.Message}");
        }
    }

    private async Task HandleAchievementsCommandAsync(long chatId)
    {
        try
        {
            var achievements = _achievementService.GetAllAchievements();
            
            if (!achievements.Any())
            {
                await _botClient.SendTextMessageAsync(chatId, "üèÜ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –∞—á–∏–≤–æ–∫!\n\n–ù–∞—á–Ω–∏—Ç–µ –∫–æ–º–º–∏—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!", disableNotification: true);
                return;
            }

            var message = "üèÜ *–°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫*\n\n";
            
            foreach (var achievement in achievements.OrderBy(a => a.Name))
            {
                var status = achievement.IsUnlocked ? "‚úÖ" : "‚ùå";
                var holder = achievement.IsUnlocked && !string.IsNullOrEmpty(achievement.HolderName) 
                    ? $" ({achievement.HolderName})" 
                    : "";
                var value = achievement.Value.HasValue ? $" [{achievement.Value}]" : "";
                
                message += $"{status} {achievement.Emoji} *{achievement.Name}*\n";
                message += $"   {achievement.Description}{holder}{value}\n\n";
            }

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—á–∏–≤–∫–∏ (Tenor URL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Telegram –±–µ–∑ API)
            foreach (var achievement in achievements.Where(a => a.IsUnlocked))
            {
                try
                {
                    await _botClient.SendAnimationAsync(
                        chatId: chatId,
                        animation: InputFile.FromUri(NormalizeTenorUrl(achievement.GifUrl)),
                        caption: $"{achievement.Emoji} *{achievement.Name}*\n{achievement.Description}",
                        parseMode: ParseMode.Markdown,
                        disableNotification: true
                    );
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–∏—Ñ–∫–∞–º–∏
                    await Task.Delay(1000);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –¥–ª—è –∞—á–∏–≤–∫–∏ {achievement.Name}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—á–∏–≤–æ–∫: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleLeaderboardCommandAsync(long chatId)
    {
        try
        {
            var topUsers = _achievementService.GetTopUsers(10);
            var topStreakUsers = _achievementService.GetTopUsersByStreak(5);
            
            if (!topUsers.Any())
            {
                await _botClient.SendTextMessageAsync(chatId, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n\n–ù–∞—á–Ω–∏—Ç–µ –∫–æ–º–º–∏—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤!", disableNotification: true);
                return;
            }

            var message = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤*\n\n";
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –∫–æ–º–º–∏—Ç–∞–º
            message += "üìä *–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤:*\n";
            for (int i = 0; i < topUsers.Count; i++)
            {
                var user = topUsers[i];
                var medal = i switch
                {
                    0 => "ü•á",
                    1 => "ü•à", 
                    2 => "ü•â",
                    _ => $"#{i + 1}"
                };
                
                var streakEmoji = _achievementService.GetStreakEmoji(user.LongestStreak);
                
                message += $"{medal} *{user.DisplayName}*\n";
                message += $"   üìä –ö–æ–º–º–∏—Ç–æ–≤: {user.TotalCommits}\n";
                message += $"   ‚ö° –ú–∞–∫—Å. —Å—Ç—Ä–æ–∫: {user.MaxLinesChanged}\n";
                message += $"   {streakEmoji} –°—Ç—Ä–∏–∫: {user.LongestStreak} –¥–Ω.\n";
                message += $"   üß™ –¢–µ—Å—Ç—ã: {user.TestCommits} | üöÄ –†–µ–ª–∏–∑—ã: {user.ReleaseCommits}\n";
                message += $"   üêõ –ë–∞–≥–∏: {user.BugFixCommits} | ‚ú® –§–∏—á–∏: {user.FeatureCommits}\n\n";
            }

            // –¢–æ–ø –ø–æ —Å—Ç—Ä–∏–∫–∞–º
            if (topStreakUsers.Any())
            {
                message += "üî• *–¢–æ–ø —Å—Ç—Ä–∏–∫–æ–≤:*\n";
                for (int i = 0; i < topStreakUsers.Count; i++)
                {
                    var user = topStreakUsers[i];
                    var streakEmoji = _achievementService.GetStreakEmoji(user.LongestStreak);
                    message += $"{streakEmoji} *{user.DisplayName}* - {user.LongestStreak} –¥–Ω.\n";
                }
            }

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleStreaksCommandAsync(long chatId)
    {
        try
        {
            var topStreakUsers = _achievementService.GetTopUsersByStreak(10);
            
            if (!topStreakUsers.Any())
            {
                await _botClient.SendTextMessageAsync(chatId, "üî• –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç—Ä–∏–∫–æ–≤!\n\n–ù–∞—á–Ω–∏—Ç–µ –∫–æ–º–º–∏—Ç–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–∫!", disableNotification: true);
                return;
            }

            var message = "üî• *–¢–æ–ø —Å—Ç—Ä–∏–∫–æ–≤*\n\n";
            message += "–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–µ–º –±–æ–ª—å—à–µ —Å—Ç—Ä–∏–∫, —Ç–µ–º –±–æ–ª—å—à–µ üî•\n\n";
            
            for (int i = 0; i < topStreakUsers.Count; i++)
            {
                var user = topStreakUsers[i];
                var medal = i switch
                {
                    0 => "ü•á",
                    1 => "ü•à", 
                    2 => "ü•â",
                    _ => $"#{i + 1}"
                };
                
                var streakEmoji = _achievementService.GetStreakEmoji(user.LongestStreak);
                message += $"{medal} *{user.DisplayName}* ‚Äî {user.LongestStreak} –¥–Ω. {streakEmoji}\n";
            }

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleRecalcCommandAsync(long chatId)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            var (remaining, limit, resetTime) = await _gitHubService.GetRateLimitAsync();
            
            if (remaining < 500)
            {
                var timeUntilReset = resetTime - DateTime.UtcNow;
                var message = $"‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö GitHub API*\n\n" +
                             $"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{limit}\n" +
                             $"‚è∞ –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: {timeUntilReset.Minutes} –º–∏–Ω\n\n" +
                             $"‚ö° –ü–µ—Ä–µ—Å—á—ë—Ç –º–æ–∂–µ—Ç –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å –¥–æ 2000+ –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n" +
                             $"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" +
                             $"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞\n" +
                             $"‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recalc light (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞)";
                
                await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }

            await _botClient.SendTextMessageAsync(chatId, $"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ—Å—á—ë—Ç –∞—á–∏–≤–æ–∫...\n\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{limit}", disableNotification: true);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            _achievementService.ResetAllData();

            // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ç–∫–∏; –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É
            var branches = await _gitHubService.GetBranchesListAsync();
            if (!branches.Any())
            {
                var def = await _gitHubService.TryGetDefaultBranchAsync();
                if (!string.IsNullOrEmpty(def)) branches = new List<string> { def };
            }

            var totalProcessed = 0;
            var branchCount = 0;
            var startTime = DateTime.UtcNow;
            
            foreach (var branch in branches)
            {
                branchCount++;
                await _botClient.SendTextMessageAsync(chatId, $"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–µ—Ç–∫—É {branchCount}/{branches.Count}: `{branch}`...", parseMode: ParseMode.Markdown, disableNotification: true);
                
                var history = await _gitHubService.GetAllCommitsWithStatsForBranchAsync(branch, 2000);
                foreach (var c in history)
                {
                    _achievementService.ProcessCommitBatch(c.Author, c.Email, c.Message, c.Date, c.Additions, c.Deletions);
                }
                totalProcessed += history.Count;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                var (currentRemaining, _, _) = await _gitHubService.GetRateLimitAsync();
                var used = remaining - currentRemaining;
                Console.WriteLine($"üìä Branch {branch}: {history.Count} commits, API calls used: {used}");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ
            _achievementService.SaveAll();

            var duration = DateTime.UtcNow - startTime;
            var (finalRemaining, _, _) = await _gitHubService.GetRateLimitAsync();
            var totalUsed = remaining - finalRemaining;

            await _botClient.SendTextMessageAsync(chatId, 
                $"‚úÖ *–ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n" +
                $"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤: {totalProcessed}\n" +
                $"üåø –í–µ—Ç–æ–∫: {branchCount}\n" +
                $"‚è±Ô∏è –í—Ä–µ–º—è: {duration.TotalSeconds:F1} —Å–µ–∫\n" +
                $"üìà API –∑–∞–ø—Ä–æ—Å–æ–≤: {totalUsed}\n" +
                $"üíæ –û—Å—Ç–∞–ª–æ—Å—å: {finalRemaining}/{limit}\n\n" +
                $"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 
                parseMode: ParseMode.Markdown, 
                disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞: {ex.Message}", disableNotification: true);
        }
    }

    private void InitializeSwearWords()
    {
        // –•—É–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("—Ö—É–π");
        _swearWords.Add("—Ö—É–π–Ω—è");
        _swearWords.Add("—Ö—É–µ–≤");
        _swearWords.Add("—Ö—É–µ–≤—ã–π");
        _swearWords.Add("—Ö—É—è—Ä–∏—Ç—å");
        _swearWords.Add("—Ö—É—è—á–∏—Ç—å");
        _swearWords.Add("—Ö—É—è–∫");
        
        // –ï–±–∞—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–µ–±–∞—Ç—å");
        _swearWords.Add("–µ–±–∞—Ç—å—Å—è");
        _swearWords.Add("–µ–±–∞–Ω–æ–µ");
        _swearWords.Add("–µ–±–∞–Ω—É—Ç—ã–π");
        _swearWords.Add("–µ–±–∞—à–∏—Ç—å");
        _swearWords.Add("–µ–±–∞–Ω—å–∫–æ");
        _swearWords.Add("–µ–±—É—á–∏–π");
        _swearWords.Add("–µ–±–∞–Ω—É–ª—Å—è");
        _swearWords.Add("–µ–±–∞–Ω—É—à–∫–∞");
        _swearWords.Add("–µ–±–∞–Ω–∞—Ç");
        _swearWords.Add("–µ–±–∞–ª–æ");
        _swearWords.Add("–µ–±–∞—Ç–µ–ª—å");
        
        // –ë–ª—è–¥—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–±–ª—è–¥—å");
        _swearWords.Add("–±–ª—è–¥—Å–∫–∏–π");
        _swearWords.Add("–±–ª—è–¥—Å—Ç–≤–æ");
        _swearWords.Add("–±–ª—è–¥–æ–≤–∞—Ç—å");
        _swearWords.Add("–±–ª—è–¥—é–≥–∞");
        _swearWords.Add("–±–ª—è–¥–Ω—è");
        _swearWords.Add("–±–ª—è–¥—é—à–∫–∞");
        
        // –°—É–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("—Å—É–∫–∞");
        _swearWords.Add("—Å—É–∫–∏–Ω");
        _swearWords.Add("—Å—É—á–∏–π");
        _swearWords.Add("—Å—É—á–∞—Ä–∞");
        _swearWords.Add("—Å—É—á–∞—Ç–∏–Ω–∞");
        _swearWords.Add("—Å—É—á–∏—Ç—å—Å—è");
        _swearWords.Add("—Å—É–∫");
        
        // –£–µ–±–∏—â –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("—É–µ–±–∏—â");
        _swearWords.Add("—É–µ–±–æ–∫");
        _swearWords.Add("—É–µ–±–∞–Ω");
        _swearWords.Add("—É–µ–±–∞—Ç—å");
        _swearWords.Add("—É–µ–±–∞—Ç—å—Å—è");
        _swearWords.Add("—É–µ–±–∏—â–µ");
        _swearWords.Add("—É–µ–±–∞—à–∏—Ç—å");
        
        // –ê—Ö—É–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–∞—Ö—É–π");
        _swearWords.Add("–∞—Ö—É–µ—Ç—å");
        _swearWords.Add("–∞—Ö—É–µ–Ω–Ω—ã–π");
        _swearWords.Add("–∞—Ö—É–µ–≤—à–∏–π");
        _swearWords.Add("–∞—Ö—É–µ–≤–∞—Ç—å");
        _swearWords.Add("–∞—Ö—É–µ–≤—à–∏–π");
        _swearWords.Add("–∞—Ö—É–∏—Ç–µ–ª—å–Ω—ã–π");
        
        // –ü–∏–∑–¥–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–ø–∏–∑–¥–∞");
        _swearWords.Add("–ø–∏–∑–¥–µ—Ü");
        _swearWords.Add("–ø–∏–∑–¥–∞—Ç—ã–π");
        _swearWords.Add("–ø–∏–∑–¥–µ—Ü–∫–∏–π");
        _swearWords.Add("–ø–∏–∑–¥–∏—Ç—å");
        _swearWords.Add("–ø–∏–∑–¥–æ–±–æ–ª");
        _swearWords.Add("–ø–∏–∑–¥—é–∫");
        _swearWords.Add("–ø–∏–∑–¥–∞–Ω—É—Ç—å");
        _swearWords.Add("–ø–∏–∑–¥–∞–Ω—É—Ç—ã–π");
        _swearWords.Add("–ø—Ä–∏–ø–∏–∑–¥–Ω—É—Ç—ã–π");
        _swearWords.Add("–ø—Ä–∏–ø–∏–∑–¥—è—á–∏—Ç—å");
        _swearWords.Add("–ø–∏–∑–¥–∞–±–æ–ª");
        _swearWords.Add("–ø–∏–∑–¥—é–ª–∏–Ω–∞");
        _swearWords.Add("–ø–∏–∑–¥—é–ª—å");
        
        // –ü–æ—Ö—É–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–ø–æ—Ö—É–π");
        _swearWords.Add("–ø–æ—Ö—É—è–º");
        _swearWords.Add("–ø–æ–∞—Ö—É–µ–≤–∞–ª–∏");
        _swearWords.Add("–ø–æ—Ö—É–∏—Å—Ç");
        _swearWords.Add("–ø–æ—Ö—É–∏—Å—Ç–∏–∫–∞");
        _swearWords.Add("–ø–æ—Ö—É–π—â–∏–Ω–∞");
        _swearWords.Add("–ø–æ—Ö—É–π—Å—Ç–≤–æ–≤–∞—Ç—å");
        
        // –•—É–π–ª–∞–Ω –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("—Ö—É–π–ª–∞–Ω");
        _swearWords.Add("—Ö—É–∏–ª–∞");
        _swearWords.Add("—Ö—É–π–ª—É—à–∞");
        _swearWords.Add("—Ö—É–π–ª–æ");
        _swearWords.Add("—Ö—É–π–Ω—è");
        _swearWords.Add("—Ö—É–π–º–∞–Ω");
        _swearWords.Add("—Ö—É–π–º–∞");
        
        // –ë–ª—è–¥–æ—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        _swearWords.Add("–±–ª—è–¥–æ—Ç–∞");
        _swearWords.Add("–±–ª—è–¥–∏–Ω–∞");
        _swearWords.Add("–±–ª—è–¥—é–∫");
        _swearWords.Add("–±–ª—è–¥—é—à–∫–∞");
        _swearWords.Add("–±–ª—è–¥—Å—Ç–≤–æ");
        _swearWords.Add("–±–ª—è–¥–æ–≤–∞—Ç—å");
    }

    private async Task CheckSwearWordsAsync(long chatId, long userId, string text)
    {
        var lowerText = text.ToLower();
        var swearCount = 0;

        foreach (var swearWord in _swearWords)
        {
            if (lowerText.Contains(swearWord))
            {
                swearCount++;
            }
        }

        if (swearCount > 0)
        {
            if (!_swearWordCounters.ContainsKey(userId))
            {
                _swearWordCounters[userId] = 0;
            }

            _swearWordCounters[userId] += swearCount;

            if (_swearWordCounters[userId] >= 100)
            {
                var shameMessage = "–ü–æ–∑–æ—Ä! –ü–æ–∑–æ—Ä! –ü–æ–∑–æ—Ä! –£–∂–µ 100 –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –≤ —á–∞—Ç–µ –æ—Ç —Ç–µ–±—è!";
                var gifUrl = "https://media1.tenor.com/m/5t7dwIkeSioAAAAC/shame-bell.gif";
                
                await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(gifUrl), caption: shameMessage);
                _swearWordCounters[userId] = 0;
            }
        }
    }

    private async Task ShowGameMenuAsync(long chatId)
    {
        var menu = "üéÆ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n\n" +
                  "1Ô∏è‚É£ `/gamememe` - –ß—Ç–æ? –ì–¥–µ? –ú–µ–º? (—Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –º–µ–º—ã)\n" +
                  "2Ô∏è‚É£ `/gamelol` - –ß—Ç–æ? –ì–¥–µ? –õ–æ–ª? (League of Legends)\n" +
                  "3Ô∏è‚É£ `/gameprogramming` - If? Else? True? (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)\n\n" +
                  "üõë `/gamestop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n" +
                  "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞!";
        
        await _botClient.SendTextMessageAsync(chatId, menu, parseMode: ParseMode.Markdown, disableNotification: true);
    }

    private async Task StartGameAsync(long chatId, string gameType)
    {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (_gameStates.ContainsKey(chatId) && _gameStates[chatId].IsActive)
        {
            await StopGameAsync(chatId);
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç AI –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        _geminiManager.ClearContext(chatId);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        _gameStates[chatId] = new GameState
        {
            IsActive = true,
            GameType = gameType,
            Difficulty = "medium", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            CurrentQuestion = 0,
            CorrectAnswers = 0,
            WrongAnswers = 0,
            HasUsedLifeline = false,
            StartTime = DateTime.UtcNow
        };

        var gameName = GamePrompts.GameNames[gameType];
        var prompt = GamePrompts.GetPromptWithDifficulty(gameType, _gameStates[chatId].Difficulty);

        try
        {
            await _botClient.SendTextMessageAsync(chatId, $"üéÆ **{gameName}**\n\n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! AI –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã...", disableNotification: true);
            
            var aiResponse = await _geminiManager.GenerateResponseWithContextAsync(prompt, chatId);
            await _botClient.SendTextMessageAsync(chatId, aiResponse, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:** {ex.Message}", disableNotification: true);
            _gameStates[chatId].IsActive = false;
        }
    }

    private async Task StopGameAsync(long chatId)
    {
        if (_gameStates.ContainsKey(chatId) && _gameStates[chatId].IsActive)
        {
            var gameState = _gameStates[chatId];
            var gameName = GamePrompts.GameNames[gameState.GameType];
            
            await _botClient.SendTextMessageAsync(chatId, $"üõë **{gameName} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {gameState.CorrectAnswers}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {gameState.WrongAnswers}", disableNotification: true);
            
            _gameStates[chatId].IsActive = false;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º AI —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            if (_geminiMode.ContainsKey(chatId) && _geminiMode[chatId])
            {
                _geminiMode[chatId] = false;
                await _botClient.SendTextMessageAsync(chatId, "ü§ñ **AI —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã!**", disableNotification: true);
            }
        }
        else
        {
            await _botClient.SendTextMessageAsync(chatId, "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!**", disableNotification: true);
        }
    }

    private async Task ProcessGameAnswerAsync(long chatId, string answer)
    {
        if (!_gameStates.ContainsKey(chatId) || !_gameStates[chatId].IsActive)
            return;

        var gameState = _gameStates[chatId];
        var gameName = GamePrompts.GameNames[gameState.GameType];

        try
        {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
            var normalizedAnswer = NormalizeAnswer(answer);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            var prompt = $@"Player answered: '{normalizedAnswer}'

IMPORTANT: Respond ONLY in Russian language!

Process the answer:
1. If correct - start response with ""‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!"" and give next question
2. If wrong - start response with ""‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!"" and say correct answer, then give next question  
3. If this was the last (10th) question - finish game with ""üéâ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!""
4. Follow format: –í–æ–ø—Ä–æ—Å: [text] A) [option] B) [option] C) [option] D) [option] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [letter] - [text]

Remember: 
- Start with ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û! or ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!
- ALL responses must be in Russian!
- Current question: {gameState.CurrentQuestion + 1}/10
- Wrong answers: {gameState.WrongAnswers}/2";
            
            var aiResponse = await _geminiManager.GenerateResponseWithContextAsync(prompt, chatId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
            await _botClient.SendTextMessageAsync(chatId, aiResponse, disableNotification: true);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä–∞ —Å –º–µ–º–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º GIF
            if (gameState.GameType == "meme" && answer != "start")
            {
                await AddGifToMemeGameAsync(chatId, aiResponse, gameState);
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (answer != "start") // –ù–µ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
            {
                gameState.CurrentQuestion++;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ –Ω–∞—á–∞–ª—É –æ—Ç–≤–µ—Ç–∞ AI
                var isCorrect = aiResponse.StartsWith("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!") || aiResponse.Contains("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!");
                
                if (isCorrect)
                {
                    gameState.CorrectAnswers++;
                }
                else
                {
                    gameState.WrongAnswers++;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
            var shouldEndGame = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)
            if (gameState.CurrentQuestion >= 10)
            {
                shouldEndGame = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2)
            if (gameState.WrongAnswers >= 2)
            {
                shouldEndGame = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç AI –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            if (aiResponse.Contains("üéâ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!") || aiResponse.Contains("–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê"))
            {
                shouldEndGame = true;
            }
            
            if (shouldEndGame)
            {
                _gameStates[chatId].IsActive = false;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                var finalStats = $"üéÆ **–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n" +
                               $"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n" +
                               $"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {gameState.CorrectAnswers}\n" +
                               $"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {gameState.WrongAnswers}\n" +
                               $"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {gameState.CurrentQuestion}\n" +
                               $"‚è±Ô∏è –í—Ä–µ–º—è –∏–≥—Ä—ã: {DateTime.UtcNow - gameState.StartTime:mm\\:ss}";
                
                await _botClient.SendTextMessageAsync(chatId, finalStats, disableNotification: true);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º AI —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
                if (_geminiMode.ContainsKey(chatId) && _geminiMode[chatId])
                {
                    _geminiMode[chatId] = false;
                    await _botClient.SendTextMessageAsync(chatId, "ü§ñ **AI —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã!**", disableNotification: true);
                }
                
                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–∞–ª—å—à–µ
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:** {ex.Message}", disableNotification: true);
        }
    }

    private string NormalizeAnswer(string answer)
    {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        var normalized = answer.Trim().ToUpper();
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É
        if (normalized.Length == 1 && "ABCD".Contains(normalized))
        {
            return normalized;
        }
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã
        if (normalized.Length > 1 && "ABCD".Contains(normalized[0]))
        {
            return normalized[0].ToString();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return answer.Trim();
    }

    private async Task TestGamePromptAsync(long chatId)
    {
        try
        {
            await _botClient.SendTextMessageAsync(chatId, "üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–≥—Ä—ã...**", disableNotification: true);
            
            var testPrompt = @"You are the host of a ""What? Where? When?"" quiz game about Russian internet memes.

IMPORTANT: All questions, answers, and responses must be in RUSSIAN language only!

RULES:
- 10 questions with 4 answer options each
- Difficulty progression: 3 easy ‚Üí 3 medium ‚Üí 3 hard ‚Üí 1 very hard
- Player has 1 lifeline (can make 1 mistake)
- Only real popular Russian memes, no fictional ones

RESPONSE FORMAT (MUST be in Russian):
–í–æ–ø—Ä–æ—Å: [question text]
A) [option 1]
B) [option 2] 
C) [option 3]
D) [option 4]

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [letter] - [answer text]

Start with the first easy question. Remember: everything must be in Russian!";

            var aiResponse = await _geminiManager.GenerateResponseWithContextAsync(testPrompt, chatId);
            await _botClient.SendTextMessageAsync(chatId, aiResponse, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {ex.Message}", disableNotification: true);
        }
    }
    private async Task HandleRateLimitCommandAsync(long chatId)
    {
        try
        {
            var (remaining, limit, resetTime) = await _gitHubService.GetRateLimitAsync();
            var timeUntilReset = resetTime - DateTime.UtcNow;
            var usedPercent = limit > 0 ? ((limit - remaining) * 100.0 / limit) : 0;

            string status;
            string emoji;
            
            if (remaining > 3000)
            {
                status = "–û—Ç–ª–∏—á–Ω–æ";
                emoji = "‚úÖ";
            }
            else if (remaining > 1000)
            {
                status = "–•–æ—Ä–æ—à–æ";
                emoji = "üü¢";
            }
            else if (remaining > 500)
            {
                status = "–£–º–µ—Ä–µ–Ω–Ω–æ";
                emoji = "üü°";
            }
            else if (remaining > 100)
            {
                status = "–ù–∏–∑–∫–∏–π";
                emoji = "üü†";
            }
            else
            {
                status = "–ö—Ä–∏—Ç–∏—á–Ω–æ";
                emoji = "üî¥";
            }

            var message = $"{emoji} *GitHub API Rate Limit*\n\n" +
                         $"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n" +
                         $"üìà *–î–æ—Å—Ç—É–ø–Ω–æ:* {remaining}/{limit} ({usedPercent:F1}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)\n" +
                         $"‚è∞ *–°–±—Ä–æ—Å —á–µ—Ä–µ–∑:* {(timeUntilReset.TotalMinutes > 0 ? $"{timeUntilReset.Minutes} –º–∏–Ω {timeUntilReset.Seconds} —Å–µ–∫" : "—Å–∫–æ—Ä–æ")}\n" +
                         $"üïê *–í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞:* {resetTime.ToLocalTime():HH:mm:ss}\n\n" +
                         $"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n";

            if (remaining < 500)
            {
                message += "‚Ä¢ ‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ /recalc –¥–æ —Å–±—Ä–æ—Å–∞\n";
                message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã\n";
            }
            else if (remaining < 1000)
            {
                message += "‚Ä¢ ‚ö° /recalc –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ\n";
                message += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–æ–º\n";
            }
            else
            {
                message += "‚Ä¢ ‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n";
                message += "‚Ä¢ /recalc –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n";
            }

            message += $"\nüìù *–û–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:*\n" +
                      $"‚Ä¢ /status, /commits, /branches: 1-5 –∑–∞–ø—Ä–æ—Å–æ–≤\n" +
                      $"‚Ä¢ /recalc: ~2000+ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ç–æ–∫)\n" +
                      $"‚Ä¢ –í–µ–±—Ö—É–∫–∏ GitHub: 1 –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–º–∏—Ç";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleCacheInfoCommandAsync(long chatId)
    {
        try
        {
            var (userStatsCount, achievementsCount, processedShasCount, totalSizeBytes) = _achievementService.GetCacheInfo();
            
            var sizeKB = totalSizeBytes / 1024.0;
            var sizeMB = sizeKB / 1024.0;
            
            string sizeText;
            if (sizeMB >= 1)
                sizeText = $"{sizeMB:F2} MB";
            else
                sizeText = $"{sizeKB:F1} KB";

            var message = $"üíæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ*\n\n" +
                         $"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {userStatsCount}\n" +
                         $"üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* {achievementsCount}\n" +
                         $"üìù *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SHA:* {processedShasCount}\n" +
                         $"üíø *–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:* {sizeText}\n\n" +
                         $"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏:*\n" +
                         $"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º SHA: 10,000\n" +
                         $"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: >90 –¥–Ω–µ–π\n" +
                         $"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: 50\n\n" +
                         $"üßπ *–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:*\n" +
                         $"‚Ä¢ –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n" +
                         $"‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ (/recalc)\n" +
                         $"‚Ä¢ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: /cleancache\n\n" +
                         $"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n" +
                         $"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cleancache\n" +
                         $"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞\n" +
                         $"‚Ä¢ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", "/cleancache"),
                    InlineKeyboardButton.WithCallbackData("üìà API –ª–∏–º–∏—Ç—ã", "/ratelimit"),
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")
                }
            });

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true, replyMarkup: keyboard);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleCleanCacheCommandAsync(long chatId)
    {
        try
        {
            await _botClient.SendTextMessageAsync(chatId, "üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...", disableNotification: true);
            
            var beforeInfo = _achievementService.GetCacheInfo();
            _achievementService.ForceCleanup();
            var afterInfo = _achievementService.GetCacheInfo();
            
            var usersRemoved = beforeInfo.userStatsCount - afterInfo.userStatsCount;
            var shasRemoved = beforeInfo.processedShasCount - afterInfo.processedShasCount;
            var sizeSaved = beforeInfo.totalSizeBytes - afterInfo.totalSizeBytes;
            
            var sizeKB = sizeSaved / 1024.0;
            var sizeMB = sizeKB / 1024.0;
            
            string sizeText;
            if (sizeMB >= 1)
                sizeText = $"{sizeMB:F2} MB";
            else
                sizeText = $"{sizeKB:F1} KB";

            var message = $"‚úÖ *–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n" +
                         $"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n" +
                         $"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {usersRemoved}\n" +
                         $"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ SHA: {shasRemoved}\n" +
                         $"‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {sizeText}\n\n" +
                         $"üìà *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n" +
                         $"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {afterInfo.userStatsCount}\n" +
                         $"‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {afterInfo.achievementsCount}\n" +
                         $"‚Ä¢ SHA: {afterInfo.processedShasCount}\n\n" +
                         $"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleSubmenuAsync(long chatId, int messageId, string menuData)
    {
        try
        {
            var menuType = menuData.Split(':')[1];

            switch (menuType)
            {
                case "main":
                    await SendHelpMessageAsync(chatId);
                    break;
                case "git":
                    await ShowGitMenuAsync(chatId, messageId);
                    break;
                case "stats":
                    await ShowStatsMenuAsync(chatId, messageId);
                    break;
                case "gemini":
                    await ShowGeminiMenuAsync(chatId, messageId);
                    break;
                case "games":
                    await ShowGamesMenuAsync(chatId, messageId);
                    break;
                case "gif":
                    await ShowGifMenuAsync(chatId, messageId);
                    break;
                case "cursor":
                    await ShowCursorMenuAsync(chatId, messageId);
                    break;
            }
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            await DeleteMessageAsync(chatId, messageId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling submenu: {ex.Message}");
        }
    }

    private async Task ShowGitMenuAsync(long chatId, int messageId)
    {
        var message = "üì¶ *Git - –†–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º*\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å", "/status"),
                InlineKeyboardButton.WithCallbackData("üìù –ö–æ–º–º–∏—Ç—ã", "/commits"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåø –í–µ—Ç–∫–∏", "/branches"),
                InlineKeyboardButton.WithCallbackData("üîÑ PR", "/prs"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è CI/CD", "/ci"),
                InlineKeyboardButton.WithCallbackData("üöÄ –î–µ–ø–ª–æ–π", "/deploy"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîç –ü–æ–∏—Å–∫", "search_menu"),
                InlineKeyboardButton.WithCallbackData("üë• –ê–≤—Ç–æ—Ä—ã", "/authors"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: keyboard
        );
    }

    private async Task ShowStatsMenuAsync(long chatId, int messageId)
    {
        var message = "üìä *Stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/laststats"),
                InlineKeyboardButton.WithCallbackData("üìä –ü–æ –Ω–µ–¥–µ–ª—è–º", "/weekstats"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèÜ –†–µ–π—Ç–∏–Ω–≥", "/rating"),
                InlineKeyboardButton.WithCallbackData("üìâ –¢—Ä–µ–Ω–¥—ã", "/trends"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üèÖ –ê—á–∏–≤–∫–∏", "/achivelist"),
                InlineKeyboardButton.WithCallbackData("ü•á –õ–∏–¥–µ—Ä—ã", "/leaderboard"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üî• –°—Ç—Ä–∏–∫–∏", "/streaks"),
                InlineKeyboardButton.WithCallbackData("üìà API –ª–∏–º–∏—Ç—ã", "/ratelimit"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üíæ –ö—ç—à", "/cache"),
                InlineKeyboardButton.WithCallbackData("üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç", "/recalc"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: keyboard
        );
    }

    private async Task ShowCursorMenuAsync(long chatId, int messageId)
    {
        var message = "üñ±Ô∏è *Cursor - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º*\n\n" +
                     "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cursor:\n\n" +
                     "üìù `/deep <–ø—É—Ç—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞>` - –°–æ–∑–¥–∞—Ç—å –¥–∏–ø–ª–∏–Ω–∫\n" +
                     "–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:\n" +
                     "‚Ä¢ `/deep src/App.tsx`\n" +
                     "‚Ä¢ `/deep src/App.tsx:42`\n" +
                     "‚Ä¢ `/deep src/App.tsx:42:10`\n\n" +
                     "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n" +
                     "‚Ä¢ `/deep –ó–∞–ø—É—Å—Ç–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –±–∏–ª–¥`\n" +
                     "‚Ä¢ `/deep –°–æ–∑–¥–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Button`\n" +
                     "‚Ä¢ `/deep –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ`\n\n" +
                     "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: /info";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ", "/info"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: keyboard
        );
    }

    private async Task ShowGeminiMenuAsync(long chatId, int messageId)
    {
        var message = "ü§ñ *Gemini AI - –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç*\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å AI", "/glaistart"),
                InlineKeyboardButton.WithCallbackData("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å AI", "/glaistop"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤", "/glaistats"),
                InlineKeyboardButton.WithCallbackData("üîç –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç", "/glaicurrent"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", "/glaiswitch"),
                InlineKeyboardButton.WithCallbackData("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", "/glaiclear"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu:main")
            }
        });

        await _botClient.EditMessageTextAsync(chatId, messageId, message, parseMode: ParseMode.Markdown, replyMarkup: keyboard);
    }

    private async Task ShowGamesMenuAsync(long chatId, int messageId)
    {
        var message = "üéÆ *–ò–≥—Ä—ã*\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üéØ –ú–µ–Ω—é –∏–≥—Ä", "/game"),
                InlineKeyboardButton.WithCallbackData("üòÑ –ú–µ–º—ã", "/gamememe"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öîÔ∏è League of Legends", "/gamelol"),
                InlineKeyboardButton.WithCallbackData("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "/gameprogramming"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "/gamestop"),
                InlineKeyboardButton.WithCallbackData("üß™ –¢–µ—Å—Ç", "/gametest"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            replyMarkup: keyboard,
            disableNotification: true
        );
    }

    private async Task SendInfoMessageAsync(long chatId)
    {
        var message = @"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

ü§ñ *GitHub Monitor Bot*
–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è RaspizDIYs/goodluckv2

üì¶ *Git —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤, PR, CI/CD
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ç–∫–∞–º –∏ –∞–≤—Ç–æ—Ä–∞–º
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞—á–∏–≤–æ–∫ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
‚Ä¢ –°—Ç—Ä–∏–∫–∏ –∫–æ–º–º–∏—Ç–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏–º–∏—Ç–æ–≤ GitHub API

üñ±Ô∏è *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor:*
–ö–æ–º–∞–Ω–¥–∞ `/deep` —Å–æ–∑–¥–∞—ë—Ç –¥–∏–ø–ª–∏–Ω–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ Cursor.

*–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:*
‚Ä¢ `/deep src/components/Button.tsx`
  –û—Ç–∫—Ä–æ–µ—Ç —Ñ–∞–π–ª Button.tsx

‚Ä¢ `/deep src/components/Button.tsx:150`
  –û—Ç–∫—Ä–æ–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å—Ç—Ä–æ–∫–µ 150

‚Ä¢ `/deep src/components/Button.tsx:150:10`
  –û—Ç–∫—Ä–æ–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å—Ç—Ä–æ–∫–µ 150, –∫–æ–ª–æ–Ω–∫–µ 10

*–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:*
‚Ä¢ `/deep –ó–∞–ø—É—Å—Ç–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –±–∏–ª–¥`
  –í—ã–ø–æ–ª–Ω–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤ Cursor

‚Ä¢ `/deep –°–æ–∑–¥–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Button`
  –ü–æ–ø—Ä–æ—Å–∏—Ç Cursor —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

‚Ä¢ `/deep –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ`
  –ü–æ–ø—Ä–æ—Å–∏—Ç Cursor –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏

*–§–æ—Ä–º–∞—Ç—ã –¥–∏–ø–ª–∏–Ω–∫–æ–≤:*
‚Ä¢ –§–∞–π–ª—ã: `cursor://file/{workspace}/{path}?line={line}&column={column}`
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: `cursor://anysphere.cursor-deeplink/prompt?text={command}`

*Workspace —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:*
goodluckv2 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ GOODLUCK_WORKSPACE_PATH)

üìà *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API:*
–ö–æ–º–∞–Ω–¥–∞ `/ratelimit` –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã GitHub API.

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
‚Ä¢ GitHub API: 5000 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å
‚Ä¢ `/recalc` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ~2000+ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—á—ë—Ç–æ–º
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –≤ JSON —Ñ–∞–π–ª–∞—Ö

*–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JSON —Ñ–∞–π–ª—ã –∫–∞–∫ –ø–∞–º—è—Ç—å
- user_stats.json - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- achievements.json - –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- processed_shas.json - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã

*–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞*
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ú–∞–∫—Å–∏–º—É–º 10,000 SHA –≤ –∫—ç—à–µ
- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª–µ–µ 90 –¥–Ω–µ–π)
- –ö–æ–º–∞–Ω–¥—ã cache, cleancache

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

*–°–ø—Ä–∞–≤–∫–∞*
help - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start"),
                InlineKeyboardButton.WithCallbackData("‚ùì –°–ø—Ä–∞–≤–∫–∞", "/help"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            disableWebPagePreview: true,
            disableNotification: true,
            replyMarkup: keyboard
        );
    }

    private async Task HandleDeeplinkCommandAsync(long chatId, string input)
    {
        try
        {
            string deeplink;
            string message;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ—à–∏ –∏ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
            if (!input.Contains('/') && !input.Contains('\\') && !input.Contains('.'))
            {
                // –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Cursor
                var encodedText = Uri.EscapeDataString(input);
                deeplink = $"cursor://anysphere.cursor-deeplink/prompt?text={encodedText}";
                
                message = "üîó *–î–∏–ø–ª–∏–Ω–∫ –¥–ª—è Cursor (–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)*\n\n";
                message += $"üí¨ –ö–æ–º–∞–Ω–¥–∞: `{input}`\n";
                message += $"üì¶ –¢–∏–ø: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Cursor\n";
                message += $"\nüîó –°—Å—ã–ª–∫–∞:\n`{deeplink}`\n\n";
                message += "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ Cursor";
            }
            else
            {
                // –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                var workspacePath = Environment.GetEnvironmentVariable("GOODLUCK_WORKSPACE_PATH") 
                                  ?? Environment.GetEnvironmentVariable("CURSOR_WORKSPACE_PATH")
                                  ?? "D:/Git/goodluckv2";
                
                string relativePath = input;
                int? line = null;
                int? column = null;

                if (input.Contains(':'))
                {
                    var parts = input.Split(':');
                    relativePath = parts[0];
                    
                    if (parts.Length > 1 && int.TryParse(parts[1], out var lineNum))
                    {
                        line = lineNum;
                    }
                    
                    if (parts.Length > 2 && int.TryParse(parts[2], out var colNum))
                    {
                        column = colNum;
                    }
                }

                relativePath = relativePath.Replace('\\', '/').TrimStart('/');
                workspacePath = workspacePath.Replace('\\', '/');
                
                deeplink = $"cursor://file/{workspacePath}/{relativePath}";
                
                if (line.HasValue)
                {
                    deeplink += $"?line={line.Value}";
                    if (column.HasValue)
                    {
                        deeplink += $"&column={column.Value}";
                    }
                }

                message = "üîó *–î–∏–ø–ª–∏–Ω–∫ –¥–ª—è Cursor (–§–∞–π–ª)*\n\n";
                message += $"üìÅ –§–∞–π–ª: `{relativePath}`\n";
                if (line.HasValue)
                {
                    message += $"üìç –°—Ç—Ä–æ–∫–∞: {line.Value}";
                    if (column.HasValue)
                    {
                        message += $", –ö–æ–ª–æ–Ω–∫–∞: {column.Value}";
                    }
                    message += "\n";
                }
                message += $"üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: goodluckv2\n";
                message += $"\nüîó –°—Å—ã–ª–∫–∞:\n`{deeplink}`\n\n";
                message += "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ Cursor";
            }

            // –ï—Å–ª–∏ Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç cursor:// –∫–∞–∫ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS-–º–æ—Å—Ç
            var bridgeBase = Environment.GetEnvironmentVariable("BRIDGE_BASE_URL");
            string buttonUrl;
            string buttonText;
            if (!string.IsNullOrWhiteSpace(bridgeBase))
            {
                // –ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ—Å—Ç
                if (!input.Contains('/') && !input.Contains('\\') && !input.Contains('.'))
                {
                    // prompt bridge
                    var enc = Uri.EscapeDataString(input);
                    buttonUrl = $"{bridgeBase.TrimEnd('/')}/?type=prompt&text={enc}";
                    buttonText = "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Cursor";
                }
                else
                {
                    // file bridge
                    var workspacePath = Environment.GetEnvironmentVariable("GOODLUCK_WORKSPACE_PATH") 
                                      ?? Environment.GetEnvironmentVariable("CURSOR_WORKSPACE_PATH")
                                      ?? "D:/Git/goodluckv2";
                    string relativePath = input;
                    string lineQs = string.Empty;
                    string columnQs = string.Empty;
                    if (input.Contains(':'))
                    {
                        var parts = input.Split(':');
                        relativePath = parts[0];
                        if (parts.Length > 1 && int.TryParse(parts[1], out var lineNum))
                        {
                            lineQs = $"&line={lineNum}";
                        }
                        if (parts.Length > 2 && int.TryParse(parts[2], out var colNum))
                        {
                            columnQs = $"&column={colNum}";
                        }
                    }
                    var encWs = Uri.EscapeDataString(workspacePath.Replace('\\','/'));
                    var encPath = Uri.EscapeDataString(relativePath.Replace('\\','/').TrimStart('/'));
                    buttonUrl = $"{bridgeBase.TrimEnd('/')}/?type=file&workspace={encWs}&path={encPath}{lineQs}{columnQs}";
                    buttonText = "üìÅ –û—Ç–∫—Ä—ã—Ç—å –≤ Cursor";
                }
            }
            else
            {
                // fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ callback
                buttonUrl = string.Empty;
                buttonText = !input.Contains('/') && !input.Contains('\\') && !input.Contains('.') 
                    ? "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Cursor" 
                    : "üìÅ –û—Ç–∫—Ä—ã—Ç—å –≤ Cursor";
            }

            InlineKeyboardMarkup keyboard;
            if (!string.IsNullOrEmpty(buttonUrl))
            {
                keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[] { InlineKeyboardButton.WithUrl(buttonText, buttonUrl) },
                    new[] { InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start") }
                });
            }
            else
            {
                // –ë–µ–∑ BRIDGE_BASE_URL –∏—Å–ø–æ–ª—å–∑—É–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData(buttonText, $"copy_deeplink:{input}") },
                    new[] { InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start") }
                });
            }

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true,
                replyMarkup: keyboard
            );

            Console.WriteLine($"‚úÖ Deeplink generated: {deeplink}");
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–ø–ª–∏–Ω–∫–∞: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleDeeplinkCopyAsync(long chatId, string input)
    {
        try
        {
            string deeplink;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ—à–∏ –∏ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
            if (!input.Contains('/') && !input.Contains('\\') && !input.Contains('.'))
            {
                // –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Cursor
                var encodedText = Uri.EscapeDataString(input);
                deeplink = $"cursor://anysphere.cursor-deeplink/prompt?text={encodedText}";
            }
            else
            {
                // –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                var workspacePath = Environment.GetEnvironmentVariable("GOODLUCK_WORKSPACE_PATH") 
                                  ?? Environment.GetEnvironmentVariable("CURSOR_WORKSPACE_PATH")
                                  ?? "D:/Git/goodluckv2";
                
                string relativePath = input;
                int? line = null;
                int? column = null;

                if (input.Contains(':'))
                {
                    var parts = input.Split(':');
                    relativePath = parts[0];
                    
                    if (parts.Length > 1 && int.TryParse(parts[1], out var lineNum))
                    {
                        line = lineNum;
                    }
                    
                    if (parts.Length > 2 && int.TryParse(parts[2], out var colNum))
                    {
                        column = colNum;
                    }
                }

                relativePath = relativePath.Replace('\\', '/').TrimStart('/');
                workspacePath = workspacePath.Replace('\\', '/');
                
                deeplink = $"cursor://file/{workspacePath}/{relativePath}";
                
                if (line.HasValue)
                {
                    deeplink += $"?line={line.Value}";
                    if (column.HasValue)
                    {
                        deeplink += $"&column={column.Value}";
                    }
                }
            }

            var message = "üìã *–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞*\n\n";
            message += $"üîó –î–∏–ø–ª–∏–Ω–∫ –¥–ª—è Cursor:\n`{deeplink}`\n\n";
            message += "üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n";
            message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
            message += "2. –û—Ç–∫—Ä–æ–π—Ç–µ Cursor\n";
            message += "3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞\n";
            message += "4. Cursor –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç —Ñ–∞–π–ª\n\n";
            message += "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Cursor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º `cursor://`";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")
                }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: message,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                disableNotification: true,
                replyMarkup: keyboard
            );

            Console.WriteLine($"üìã Deeplink copy requested: {deeplink}");
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {ex.Message}", disableNotification: true);
        }
    }
    
    private Task StartScheduledUpdatesTimer()
    {
        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        var scheduledTimer = new System.Timers.Timer(TimeSpan.FromMinutes(30).TotalMilliseconds);
        scheduledTimer.Elapsed += async (sender, e) => 
        {
            try
            {
                await CheckScheduledUpdates();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ex.Message}");
            }
        };
        scheduledTimer.AutoReset = true;
        scheduledTimer.Start();
        
        Console.WriteLine("‚è∞ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)");
        return Task.CompletedTask;
    }
    
    private async Task CheckScheduledUpdates()
    {
        try
        {
            if (!_achievementService.ShouldUpdateScheduledStats())
            {
                return;
            }
            
            Console.WriteLine("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ª–∏–º–∏—Ç—ã
            var (remaining, limit, resetTime) = await _gitHubService.GetRateLimitAsync();
            
            if (remaining < _achievementService.GetMinApiCallsThreshold())
            {
                Console.WriteLine($"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –º–∞–ª–æ API –≤—ã–∑–æ–≤–æ–≤: {remaining}/{limit}");
                Console.WriteLine($"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å –∏–ª–∏ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            _achievementService.CreateBackup();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
            var success = await UpdateAllScheduledStatsSequentially();
            
            if (success)
            {
                // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                _achievementService.MarkScheduledUpdate();
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                _achievementService.ClearOldScheduledStats();
                
                // –û—á–∏—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                _achievementService.ClearBackup();
                
                Console.WriteLine($"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            }
            else
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ —Å–±–æ–µ
                Console.WriteLine("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...");
                _achievementService.RestoreFromBackup();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            var (finalRemaining, _, _) = await _gitHubService.GetRateLimitAsync();
            Console.WriteLine($"üìä API –≤—ã–∑–æ–≤–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {finalRemaining}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}");
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            if (_achievementService.IsBackupValid())
            {
                Console.WriteLine("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...");
                _achievementService.RestoreFromBackup();
            }
        }
    }
    
    private async Task<bool> UpdateAllScheduledStatsSequentially()
    {
        try
        {
            var updateTasks = new List<(string key, string type, string parameters, Func<Task<string>> getData)>();
            
            var task1 = ("status_main", "status", "", (Func<Task<string>>)(() => _gitHubService.GetRepositoryStatusAsync()));
            var task2 = ("authors_main", "authors", "", (Func<Task<string>>)(() => _gitHubService.GetActiveAuthorsAsync()));
            var task3 = ("weekly_0", "weekly", "", (Func<Task<string>>)(() => _gitHubService.GetWeeklyStatsAsync()));
            var task4 = ("achievements_main", "achievements", "", (Func<Task<string>>)(() => Task.FromResult(_achievementService.GetAchievementStats())));
            var task5 = ("streaks_main", "streaks", "", (Func<Task<string>>)(() => Task.FromResult(_achievementService.GetStreaks())));
            var task6 = ("rating_main", "rating", "", (Func<Task<string>>)(() => Task.FromResult(_achievementService.GetRating())));
            var task7 = ("leaderboard_main", "leaderboard", "", (Func<Task<string>>)(() => Task.FromResult(_achievementService.GetLeaderboard())));
            
            updateTasks.Add(task1);
            updateTasks.Add(task2);
            updateTasks.Add(task3);
            updateTasks.Add(task4);
            updateTasks.Add(task5);
            updateTasks.Add(task6);
            updateTasks.Add(task7);
            
            var successCount = 0;
            var totalTasks = updateTasks.Count;
            
            foreach (var task in updateTasks)
            {
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                    var (remaining, limit, resetTime) = await _gitHubService.GetRateLimitAsync();
                    
                    if (remaining < _achievementService.GetMinApiCallsThreshold())
                    {
                        Console.WriteLine($"‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –º–∞–ª–æ API –≤—ã–∑–æ–≤–æ–≤: {remaining}/{limit}");
                        Console.WriteLine($"‚è∞ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –≤: {resetTime:HH:mm dd.MM.yyyy}");
                        break;
                    }
                    
                    Console.WriteLine($"üîÑ –û–±–Ω–æ–≤–ª—è—é {task.type}...");
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    var data = await task.getData();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
                    if (string.IsNullOrWhiteSpace(data))
                    {
                        Console.WriteLine($"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {task.type}, –ø—Ä–æ–ø—É—Å–∫–∞—é");
                        continue;
                    }
                    
                    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    var saved = _achievementService.SafeSaveScheduledStats(task.key, data, task.type, task.parameters);
                    
                    if (saved)
                    {
                        successCount++;
                        Console.WriteLine($"‚úÖ {task.type} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {task.type}");
                    }
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                    await Task.Delay(1000);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {task.type}: {ex.Message}");
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–∏—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å API –≤—ã–∑–æ–≤—ã)
            try
            {
                var (remaining, _, _) = await _gitHubService.GetRateLimitAsync();
                if (remaining >= _achievementService.GetMinApiCallsThreshold())
                {
                    var branches = await _gitHubService.GetBranchesListAsync();
                    foreach (var branch in branches.Take(3))
                    {
                        var commits = await _gitHubService.GetRecentCommitsAsync(branch, 10);
                        if (!string.IsNullOrWhiteSpace(commits))
                        {
                            var saved = _achievementService.SafeSaveScheduledStats($"commits_{branch}_10", commits, "commits", branch);
                            if (saved) successCount++;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
                        var (currentRemaining, _, _) = await _gitHubService.GetRateLimitAsync();
                        if (currentRemaining < _achievementService.GetMinApiCallsThreshold())
                        {
                            Console.WriteLine($"‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ - –º–∞–ª–æ API –≤—ã–∑–æ–≤–æ–≤: {currentRemaining}");
                            break;
                        }
                        
                        await Task.Delay(1000);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}");
            }
            
            var success = successCount >= totalTasks * 0.7; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ 70% –∑–∞–¥–∞—á
            
            Console.WriteLine($"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {successCount}/{totalTasks} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            var isValid = _achievementService.ValidateDataIntegrity();
            if (!isValid)
            {
                Console.WriteLine("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö");
                return false;
            }
            
            return success;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}");
            return false;
        }
    }
    
    private async Task HandleScheduledInfoCommandAsync(long chatId)
    {
        try
        {
            var (count, sizeBytes, byType) = _achievementService.GetScheduledStatsInfo();
            var mskTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time");
            var nowMsk = TimeZoneInfo.ConvertTime(DateTime.UtcNow, mskTimeZone);
            
            var message = $"‚è∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö*\n\n" +
                         $"üïê *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:*\n" +
                         $"‚Ä¢ 09:00 –ú–°–ö\n" +
                         $"‚Ä¢ 18:00 –ú–°–ö\n" +
                         $"‚Ä¢ 00:00 –ú–°–ö\n\n" +
                         $"üìä *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n" +
                         $"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {count}\n" +
                         $"‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {FormatBytes(sizeBytes)}\n" +
                         $"‚Ä¢ –ü–æ —Ç–∏–ø–∞–º:\n";
            
            foreach (var type in byType)
            {
                message += $"  - {type.Key}: {type.Value}\n";
            }
            
            message += $"\nüîÑ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è:*\n" +
                      $"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n" +
                      $"‚Ä¢ –ê–≤—Ç–æ—Ä—ã –∏ –∫–æ–º–º–∏—Ç—ã\n" +
                      $"‚Ä¢ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                      $"‚Ä¢ –ê—á–∏–≤–∫–∏ –∏ —Å—Ç—Ä–∏–∫–∏\n" +
                      $"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥\n\n" +
                      $"üíæ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏:*\n" +
                      $"‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON\n" +
                      $"‚Ä¢ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n" +
                      $"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n" +
                      $"‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {nowMsk:HH:mm dd.MM.yyyy}";
            
            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {ex.Message}", disableNotification: true);
        }
    }
    
    private async Task HandleDataProtectionCommandAsync(long chatId)
    {
        try
        {
            var (remaining, limit, resetTime) = await _gitHubService.GetRateLimitAsync();
            var isValid = _achievementService.ValidateDataIntegrity();
            var hasBackup = _achievementService.IsBackupValid();
            var (count, sizeBytes, byType) = _achievementService.GetScheduledStatsInfo();
            
            var message = $"üõ°Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö*\n\n" +
                         $"üîí *–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç—ã:*\n" +
                         $"‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {(isValid ? "‚úÖ –í –ø–æ—Ä—è–¥–∫–µ" : "‚ùå –ù–∞—Ä—É—à–µ–Ω–∞")}\n" +
                         $"‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {(hasBackup ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")}\n" +
                         $"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {count}\n" +
                         $"‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {FormatBytes(sizeBytes)}\n\n" +
                         $"üìä *API –ª–∏–º–∏—Ç—ã:*\n" +
                         $"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {remaining}/{limit}\n" +
                         $"‚Ä¢ –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {_achievementService.GetMinApiCallsThreshold()}\n" +
                         $"‚Ä¢ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤: {resetTime:HH:mm dd.MM.yyyy}\n\n" +
                         $"üîÑ *–ú–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã:*\n" +
                         $"‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º\n" +
                         $"‚Ä¢ –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤\n" +
                         $"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö\n" +
                         $"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n" +
                         $"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n" +
                         $"üí° *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n" +
                         $"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö –ª–∏–º–∏—Ç–∞—Ö\n" +
                         $"‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö\n" +
                         $"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n" +
                         $"‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π";
            
            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—â–∏—Ç–µ: {ex.Message}", disableNotification: true);
        }
    }
    
    private static string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }

    private async Task ShowDifficultyMenuAsync(long chatId, string gameType)
    {
        var gameName = GamePrompts.GameNames[gameType];
        var message = $"üéÆ **{gameName}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üü¢ –õ–µ–≥–∫–∞—è", $"difficulty:{gameType}:easy"),
                InlineKeyboardButton.WithCallbackData("üü° –°—Ä–µ–¥–Ω—è—è", $"difficulty:{gameType}:medium"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üî¥ –°–ª–æ–∂–Ω–∞—è", $"difficulty:{gameType}:hard"),
                InlineKeyboardButton.WithCallbackData("‚ö´ –≠–∫—Å–ø–µ—Ä—Ç", $"difficulty:{gameType}:expert"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º", "/game")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            parseMode: ParseMode.Markdown,
            replyMarkup: keyboard,
            disableNotification: true
        );
    }

    private async Task HandleDifficultySelectionAsync(long chatId, int messageId, string data)
    {
        try
        {
            var parts = data.Split(':');
            if (parts.Length >= 3)
            {
                var gameType = parts[1];
                var difficulty = parts[2];
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await DeleteMessageAsync(chatId, messageId);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
                await StartGameWithDifficultyAsync(chatId, gameType, difficulty);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling difficulty selection: {ex.Message}");
        }
    }

    #region GIF Methods

    private async Task ShowGifMenuAsync(long chatId, int messageId)
    {
        var message = @"üé¨ *GIF –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üîç –ü–æ–∏—Å–∫ GIF", "/gifsearch"),
                InlineKeyboardButton.WithCallbackData("üé≤ –°–ª—É—á–∞–π–Ω—ã–π", "/gifrandom"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üòä –ü–æ —ç–º–æ—Ü–∏–∏", "/gifemotion"),
                InlineKeyboardButton.WithCallbackData("üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", "/giftext"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/gifsettings"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu:main"),
            }
        });

        await _botClient.EditMessageTextAsync(chatId, messageId, message, parseMode: ParseMode.Markdown, replyMarkup: keyboard);
    }

    private async Task HandleGifSearchAsync(long chatId, string text)
    {
        var query = text.Replace("/gifsearch", "").Trim();
        if (string.IsNullOrWhiteSpace(query))
        {
            await _botClient.SendTextMessageAsync(chatId, "üîç **–ü–æ–∏—Å–∫ GIF**\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ GIF:\n`/gifsearch –∫–æ—Ç–∏–∫–∏`", parseMode: ParseMode.Markdown, disableNotification: true);
            return;
        }

        Console.WriteLine($"üîç GIF Search request: {query}");
        await _botClient.SendTextMessageAsync(chatId, $"üîç –ò—â—É GIF –ø–æ –∑–∞–ø—Ä–æ—Å—É: **{query}**...", parseMode: ParseMode.Markdown, disableNotification: true);

        try
        {
            var gifs = await _tenorService.SearchGifsAsync(query, 5);
            Console.WriteLine($"üé¨ SearchGifsAsync returned {gifs.Count} GIFs");
            
            if (gifs.Count == 0)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå GIF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + query, disableNotification: true);
                return;
            }

            foreach (var gif in gifs.Take(3))
            {
                try
                {
                    Console.WriteLine($"üì§ Sending GIF: {gif.Url}");
                    await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(gif.Url), caption: $"üé¨ {gif.Title}", disableNotification: true);
                    await Task.Delay(500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É GIF
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Error sending GIF: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error in HandleGifSearchAsync: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ GIF: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleRandomGifAsync(long chatId)
    {
        Console.WriteLine($"üé≤ Random GIF request for chat {chatId}");
        await _botClient.SendTextMessageAsync(chatId, "üé≤ –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π GIF...", disableNotification: true);

        try
        {
            var gif = await _tenorService.GetRandomGifAsync("memes");
            Console.WriteLine($"üé¨ GetRandomGifAsync returned: {(gif != null ? "GIF found" : "null")}");
            
            if (gif == null)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π GIF", disableNotification: true);
                return;
            }

            Console.WriteLine($"üì§ Sending random GIF: {gif.Url}");
            await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(gif.Url), caption: $"üé≤ –°–ª—É—á–∞–π–Ω—ã–π GIF: {gif.Title}", disableNotification: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error in HandleRandomGifAsync: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ GIF: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleGifEmotionAsync(long chatId, string text)
    {
        var emotion = text.Replace("/gifemotion", "").Trim();
        if (string.IsNullOrWhiteSpace(emotion))
        {
            var message = @"üòä **GIF –ø–æ —ç–º–æ—Ü–∏—è–º**

–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ—Ü–∏–∏:
‚Ä¢ –∑–ª–æ—Å—Ç—å, –∑–ª–æ–π
‚Ä¢ —Å—á–∞—Å—Ç—å–µ, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π  
‚Ä¢ –≥—Ä—É—Å—Ç—å, –≥—Ä—É—Å—Ç–Ω—ã–π
‚Ä¢ —É–¥–∏–≤–ª–µ–Ω–∏–µ, —É–¥–∏–≤–ª–µ–Ω–Ω—ã–π
‚Ä¢ —Å—Ç—Ä–∞—Ö, –∏—Å–ø—É–≥
‚Ä¢ –ª—é–±–æ–≤—å, –ª—é–±–æ–≤–Ω—ã–π
‚Ä¢ —Å–º–µ—Ö, —Å–º–µ—à–Ω–æ–π

–ü—Ä–∏–º–µ—Ä: `/gifemotion —Å—á–∞—Å—Ç—å–µ`";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
            return;
        }

        await _botClient.SendTextMessageAsync(chatId, $"üòä –ò—â—É GIF –¥–ª—è —ç–º–æ—Ü–∏–∏: **{emotion}**...", parseMode: ParseMode.Markdown, disableNotification: true);

        try
        {
            var gifs = await _tenorService.GetGifsByEmotionAsync(emotion);
            if (gifs.Count == 0)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå GIF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç–º–æ—Ü–∏–∏: " + emotion, disableNotification: true);
                return;
            }

            foreach (var gif in gifs.Take(2))
            {
                try
                {
                    await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(gif.Url), caption: $"üòä {emotion}: {gif.Title}", disableNotification: true);
                    await Task.Delay(500);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Error sending emotion GIF: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ GIF –ø–æ —ç–º–æ—Ü–∏–∏: {ex.Message}", disableNotification: true);
        }
    }

    private async Task HandleGifTextCommandAsync(long chatId)
    {
        var message = @"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ GIF**

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç
2. –Ø –¥–æ–±–∞–≤–ª—é –Ω–∞ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞:
‚Ä¢ –¶–≤–µ—Ç: –±–µ–ª—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: —Å–Ω–∏–∑—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...";

        await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è GIF
        _pendingGifTexts[chatId] = "default";
    }

    private async Task HandleGifWithTextAsync(long chatId, string fileId, string textSettings)
    {
        try
        {
            await _botClient.SendTextMessageAsync(chatId, "üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é GIF...", disableNotification: true);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª GIF
            var file = await _botClient.GetFileAsync(fileId);
            var token = Environment.GetEnvironmentVariable("TELEGRAM_BOT_TOKEN") ?? "";
            var fileUrl = $"https://api.telegram.org/file/bot{token}/{file.FilePath}";

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ GIF
#pragma warning disable CA1416 // Validate platform compatibility
            var editedGifBytes = await _gifTextEditorService.AddTextToGifAsync(fileUrl, "–¢–µ–∫—Å—Ç –Ω–∞ GIF", TextPosition.Bottom, System.Drawing.Color.White);
#pragma warning restore CA1416 // Validate platform compatibility
            
            if (editedGifBytes == null)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GIF", disableNotification: true);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π GIF
            using var stream = new MemoryStream(editedGifBytes);
            await _botClient.SendAnimationAsync(chatId, InputFile.FromStream(stream, "edited.gif"), caption: "üìù GIF —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º", disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GIF: {ex.Message}", disableNotification: true);
        }
    }

    private async Task ShowGifSettingsAsync(long chatId)
    {
        var message = @"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GIF*

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: –±–µ–ª—ã–π
‚Ä¢ –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: —Å–Ω–∏–∑—É
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –≤—ã—Å–æ–∫–æ–µ

üìù **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/giftext` - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ GIF
‚Ä¢ `/gifsearch <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ GIF
‚Ä¢ `/gifemotion <—ç–º–æ—Ü–∏—è>` - GIF –ø–æ —ç–º–æ—Ü–∏–∏
‚Ä¢ `/gifrandom` - –°–ª—É—á–∞–π–Ω—ã–π GIF";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", "/giftext"),
                InlineKeyboardButton.WithCallbackData("üîç –ü–æ–∏—Å–∫", "/gifsearch"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu:gif"),
            }
        });

        await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, replyMarkup: keyboard, disableNotification: true);
    }

    private async Task HandleAiResponseWithGifAsync(long chatId, string aiResponse, string userMessage)
    {
        try
        {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown
            if (aiResponse.Contains("**–°—Ç–∞—Ç—É—Å**") || aiResponse.Contains("**–õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã**") || aiResponse.Contains("**–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç**"))
            {
                await _botClient.SendTextMessageAsync(chatId, aiResponse, parseMode: ParseMode.Markdown, disableNotification: true);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await _botClient.SendTextMessageAsync(chatId, aiResponse, disableNotification: true);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å GIF –∫ –æ—Ç–≤–µ—Ç—É
            var shouldAddGif = ShouldAddGifToResponse(aiResponse, userMessage);
            if (shouldAddGif)
            {
                await AddEmotionalGifToResponseAsync(chatId, aiResponse, userMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling AI response with GIF: {ex.Message}");
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await _botClient.SendTextMessageAsync(chatId, aiResponse, disableNotification: true);
        }
    }

    private bool ShouldAddGifToResponse(string aiResponse, string userMessage)
    {
        // –î–æ–±–∞–≤–ª—è–µ–º GIF –µ—Å–ª–∏:
        // 1. –û—Ç–≤–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
        // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –º–µ–º –∏–ª–∏ GIF
        // 3. –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        
        var emotionalWords = new[] { "—Å–º–µ—à–Ω–æ", "–≤–µ—Å–µ–ª–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–∑–ª–æ", "—Ä–∞–¥–æ—Å—Ç—å", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ", "—Å—Ç—Ä–∞—à–Ω–æ", "–ª—é–±–æ–≤—å", "–º–µ–º", "gif", "–∞–Ω–∏–º–∞—Ü–∏—è" };
        var userWords = userMessage.ToLower();
        var responseWords = aiResponse.ToLower();

        return emotionalWords.Any(word => userWords.Contains(word) || responseWords.Contains(word)) ||
               userWords.Contains("–º–µ–º") || userWords.Contains("gif") || userWords.Contains("–∞–Ω–∏–º–∞—Ü–∏—è") ||
               responseWords.Contains("üòÑ") || responseWords.Contains("üòÇ") || responseWords.Contains("üò¢") ||
               responseWords.Contains("üò°") || responseWords.Contains("üòç") || responseWords.Contains("ü§î");
    }

    private async Task AddEmotionalGifToResponseAsync(long chatId, string aiResponse, string userMessage)
    {
        try
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é –ø–æ –æ—Ç–≤–µ—Ç—É
            var emotion = DetermineEmotionFromResponse(aiResponse);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π GIF
            var gifs = await _tenorService.GetGifsByEmotionAsync(emotion);
            if (gifs.Count > 0)
            {
                var randomGif = gifs[new Random().Next(gifs.Count)];
                await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(randomGif.Url), 
                    caption: $"üé¨ {emotion}: {randomGif.Title}", disableNotification: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error adding emotional GIF: {ex.Message}");
        }
    }

    private string DetermineEmotionFromResponse(string response)
    {
        var lowerResponse = response.ToLower();
        
        if (lowerResponse.Contains("—Å–º–µ—à–Ω–æ") || lowerResponse.Contains("–≤–µ—Å–µ–ª–æ") || lowerResponse.Contains("üòÇ") || lowerResponse.Contains("üòÑ"))
            return "—Å–º–µ—Ö";
        if (lowerResponse.Contains("–≥—Ä—É—Å—Ç–Ω–æ") || lowerResponse.Contains("–ø–µ—á–∞–ª—å–Ω–æ") || lowerResponse.Contains("üò¢"))
            return "–≥—Ä—É—Å—Ç—å";
        if (lowerResponse.Contains("–∑–ª–æ") || lowerResponse.Contains("–∑–ª–æ–π") || lowerResponse.Contains("üò°"))
            return "–∑–ª–æ—Å—Ç—å";
        if (lowerResponse.Contains("—Ä–∞–¥–æ—Å—Ç—å") || lowerResponse.Contains("—Å—á–∞—Å—Ç—å–µ") || lowerResponse.Contains("üòç"))
            return "—Å—á–∞—Å—Ç—å–µ";
        if (lowerResponse.Contains("—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ") || lowerResponse.Contains("ü§î") || lowerResponse.Contains("?"))
            return "—É–¥–∏–≤–ª–µ–Ω–∏–µ";
        if (lowerResponse.Contains("—Å—Ç—Ä–∞—à–Ω–æ") || lowerResponse.Contains("–±–æ—é—Å—å"))
            return "—Å—Ç—Ä–∞—Ö";
        if (lowerResponse.Contains("–ª—é–±–æ–≤—å") || lowerResponse.Contains("‚ù§Ô∏è"))
            return "–ª—é–±–æ–≤—å";
            
        return "–º–µ–º—ã"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    private async Task ShowChatActivityAsync(long chatId)
    {
        try
        {
            var activity = _chatActivityTracker.GetActivity(chatId);
            
            if (activity == null || activity.Messages.Count == 0)
            {
                await _botClient.SendTextMessageAsync(chatId, 
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞**\n\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!", 
                    parseMode: ParseMode.Markdown, 
                    disableNotification: true);
                return;
            }

            var uniqueUsers = activity.Messages.Select(m => m.UserId).Distinct().Count();
            var totalMessages = activity.Messages.Count;
            var oldestMessage = activity.Messages.Min(m => m.Timestamp);
            var newestMessage = activity.Messages.Max(m => m.Timestamp);
            var timeSpan = newestMessage - oldestMessage;
            
            var status = activity.AIActivated ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ";
            var memeStatus = activity.MemeSent ? "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω" : "‚è≥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω";

            var message = $@"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞**

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {uniqueUsers}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {totalMessages}
‚è∞ **–ü–µ—Ä–∏–æ–¥:** {timeSpan.TotalMinutes:F1} –º–∏–Ω—É—Ç
ü§ñ **AI —Å—Ç–∞—Ç—É—Å:** {status}
üé¨ **–ú–µ–º —Å—Ç–∞—Ç—É—Å:** {memeStatus}

**–£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚úÖ
‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π {(totalMessages >= 5 ? "‚úÖ" : "‚ùå")}
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚â§ 5 –º–∏–Ω—É—Ç {(timeSpan.TotalMinutes <= 5 ? "‚úÖ" : "‚ùå")}

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**";
            
            var recentMessages = activity.Messages
                .OrderByDescending(m => m.Timestamp)
                .Take(5)
                .Select(m => $"‚Ä¢ {m.Username}: {m.Text.Substring(0, Math.Min(50, m.Text.Length))}...")
                .ToArray();
            
            message += "\n" + string.Join("\n", recentMessages);

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown, disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}", disableNotification: true);
        }
    }

    private async Task ResetChatActivityAsync(long chatId)
    {
        try
        {
            _chatActivityTracker.ResetActivity(chatId);
            await _botClient.SendTextMessageAsync(chatId, 
                "üîÑ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞!**\n\n–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.", 
                parseMode: ParseMode.Markdown, 
                disableNotification: true);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {ex.Message}", disableNotification: true);
        }
    }

    private async Task AddGifToMemeGameAsync(long chatId, string aiResponse, GameState gameState)
    {
        try
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø GIF –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            string gifCategory = DetermineGifCategoryForMemeGame(aiResponse, gameState);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π GIF
            var gifs = await _tenorService.SearchGifsAsync(gifCategory, 3);
            if (gifs.Count > 0)
            {
                var randomGif = gifs[new Random().Next(gifs.Count)];
                await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(randomGif.Url), 
                    caption: $"üé¨ –ú–µ–º-–∏–≥—Ä–∞: {randomGif.Title}", disableNotification: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error adding GIF to meme game: {ex.Message}");
        }
    }

    private string DetermineGifCategoryForMemeGame(string aiResponse, GameState gameState)
    {
        var lowerResponse = aiResponse.ToLower();
        
        // –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (lowerResponse.Contains("–ø—Ä–∞–≤–∏–ª—å–Ω–æ") || lowerResponse.Contains("–≤–µ—Ä–Ω–æ") || lowerResponse.Contains("–æ—Ç–ª–∏—á–Ω–æ"))
        {
            return "celebration success victory";
        }
        
        // –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (lowerResponse.Contains("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ") || lowerResponse.Contains("–Ω–µ–≤–µ—Ä–Ω–æ") || lowerResponse.Contains("–æ—à–∏–±–∫–∞"))
        {
            return "fail mistake wrong";
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (lowerResponse.Contains("–ø–æ–∑–¥—Ä–∞–≤–ª—è—é") || lowerResponse.Contains("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") || lowerResponse.Contains("—Ñ–∏–Ω–∞–ª"))
        {
            return "congratulations finish game over";
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ–º—ã
        return "memes funny";
    }

    private async Task TestTenorApiAsync(long chatId)
    {
        try
        {
            await _botClient.SendTextMessageAsync(chatId, "üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tenor API**\n\n–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", parseMode: ParseMode.Markdown, disableNotification: true);
            
            Console.WriteLine("üß™ Testing Tenor API...");
            
            // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ GIF
            var searchGifs = await _tenorService.SearchGifsAsync("test", 3);
            Console.WriteLine($"üîç Search test: {searchGifs.Count} GIFs found");
            
            // –¢–µ—Å—Ç 2: –¢—Ä–µ–Ω–¥–æ–≤—ã–µ GIF
            var trendingGifs = await _tenorService.GetTrendingGifsAsync(3);
            Console.WriteLine($"üìà Trending test: {trendingGifs.Count} GIFs found");
            
            // –¢–µ—Å—Ç 3: –°–ª—É—á–∞–π–Ω—ã–π GIF
            var randomGif = await _tenorService.GetRandomGifAsync("memes");
            Console.WriteLine($"üé≤ Random test: {(randomGif != null ? "GIF found" : "null")}");
            
            var result = $@"üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tenor API**

üîç **–ü–æ–∏—Å–∫:** {searchGifs.Count} GIF –Ω–∞–π–¥–µ–Ω–æ
üìà **–¢—Ä–µ–Ω–¥—ã:** {trendingGifs.Count} GIF –Ω–∞–π–¥–µ–Ω–æ  
üé≤ **–°–ª—É—á–∞–π–Ω—ã–π:** {(randomGif != null ? "–ù–∞–π–¥–µ–Ω" : "–ù–µ –Ω–∞–π–¥–µ–Ω")}

**–°—Ç–∞—Ç—É—Å:** {(searchGifs.Count > 0 || trendingGifs.Count > 0 || randomGif != null ? "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")}";

            await _botClient.SendTextMessageAsync(chatId, result, parseMode: ParseMode.Markdown, disableNotification: true);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π GIF –µ—Å–ª–∏ –µ—Å—Ç—å
            if (searchGifs.Count > 0)
            {
                await _botClient.SendAnimationAsync(chatId, InputFile.FromUri(searchGifs[0].Url), caption: "üß™ –¢–µ—Å—Ç–æ–≤—ã–π GIF", disableNotification: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Tenor API test error: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tenor API**\n\n{ex.Message}", parseMode: ParseMode.Markdown, disableNotification: true);
        }
    }

    #endregion

    private async Task StartGameWithDifficultyAsync(long chatId, string gameType, string difficulty)
    {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (_gameStates.ContainsKey(chatId) && _gameStates[chatId].IsActive)
        {
            await StopGameAsync(chatId);
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç AI –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        _geminiManager.ClearContext(chatId);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        _gameStates[chatId] = new GameState
        {
            IsActive = true,
            GameType = gameType,
            Difficulty = difficulty,
            CurrentQuestion = 0,
            CorrectAnswers = 0,
            WrongAnswers = 0,
            StartTime = DateTime.UtcNow
        };

        var gameName = GamePrompts.GameNames[gameType];
        var difficultyName = GetDifficultyName(difficulty);
        
        await _botClient.SendTextMessageAsync(chatId, $"üéÆ **{gameName}** ({difficultyName})\n\n–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.", disableNotification: true);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        await ProcessGameAnswerAsync(chatId, "start");
    }

    private string GetDifficultyName(string difficulty)
    {
        return difficulty switch
        {
            "easy" => "üü¢ –õ–µ–≥–∫–∞—è",
            "medium" => "üü° –°—Ä–µ–¥–Ω—è—è", 
            "hard" => "üî¥ –°–ª–æ–∂–Ω–∞—è",
            "expert" => "‚ö´ –≠–∫—Å–ø–µ—Ä—Ç",
            _ => "üü° –°—Ä–µ–¥–Ω—è—è"
        };
    }
}
