using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace TelegramGitHubBot.Services;

public class TelegramBotService
{
    private readonly ITelegramBotClient _botClient;
    private readonly GitHubService _gitHubService;

    public TelegramBotService(ITelegramBotClient botClient, GitHubService gitHubService)
    {
        _botClient = botClient;
        _gitHubService = gitHubService;
    }

    public async Task HandleUpdateAsync(HttpContext context)
    {
        try
        {
            var update = await context.Request.ReadFromJsonAsync<Update>();
            if (update == null) return;

            if (update.Message is { } message)
            {
                await HandleMessageAsync(message);
            }
            else if (update.CallbackQuery is { } callbackQuery)
            {
                await HandleCallbackQueryAsync(callbackQuery);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling Telegram update: {ex.Message}");
        }
    }

    public async Task HandleMessageAsync(Message message)
    {
        if (message.Text == null) return;

        var chatId = message.Chat.Id;
        var text = message.Text.Trim();

        // –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
        if (text.StartsWith("/"))
        {
            await HandleCommandAsync(chatId, text, message.From?.Username);
        }
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    }

    private async Task HandleCommandAsync(long chatId, string command, string? username)
    {
        try
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var cmd = parts[0].ToLower();

            switch (cmd)
            {
                case "/start":
                    await SendWelcomeMessageAsync(chatId);
                    break;

                case "/help":
                    await SendHelpMessageAsync(chatId);
                    break;

                case "/status":
                    await HandleStatusCommandAsync(chatId);
                    break;

                case "/commits":
                    var branch = parts.Length > 1 ? parts[1] : "main";
                    var count = parts.Length > 2 && int.TryParse(parts[2], out var c) ? c : 5;
                    await HandleCommitsCommandAsync(chatId, branch, count);
                    break;

                case "/branches":
                    await HandleBranchesCommandAsync(chatId);
                    break;

                case "/prs":
                case "/pulls":
                    await HandlePullRequestsCommandAsync(chatId);
                    break;

                case "/ci":
                case "/workflows":
                    var wfBranch = parts.Length > 1 ? parts[1] : null;
                    var wfCount = parts.Length > 2 && int.TryParse(parts[2], out var wc) ? wc : 5;
                    await HandleWorkflowsCommandAsync(chatId, wfBranch, wfCount);
                    break;

                case "/deploy":
                    if (parts.Length > 1)
                    {
                        await HandleDeployCommandAsync(chatId, parts[1], username);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è: /deploy staging –∏–ª–∏ /deploy production");
                    }
                    break;

                default:
                    await _botClient.SendTextMessageAsync(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    break;
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {ex.Message}");
        }
    }

    private async Task SendWelcomeMessageAsync(long chatId)
    {
        var message = @"
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub Monitor Bot!*

–Ø —Å–ª–µ–∂—É –∑–∞ –≤–∞—à–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º goodluckv2 –∏ —É–≤–µ–¥–æ–º–ª—è—é –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
/commits [–≤–µ—Ç–∫–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
/branches - –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
/prs - –û—Ç–∫—Ä—ã—Ç—ã–µ pull requests
/ci [–≤–µ—Ç–∫–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - CI/CD —Å—Ç–∞—Ç—É—Å
/deploy [—Å—Ä–µ–¥–∞] - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –ù–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã
‚Ä¢ Pull requests
‚Ä¢ CI/CD —Å—Ç–∞—Ç—É—Å
‚Ä¢ –†–µ–ª–∏–∑—ã
";
        await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown);
    }

    private async Task SendHelpMessageAsync(long chatId)
    {
        var message = @"
üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

*/status* - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
*/commits [–≤–µ—Ç–∫–∞] [—á–∏—Å–ª–æ]* - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é main, 5 —à—Ç)
*/branches* - –í—Å–µ –≤–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
*/prs* - –û—Ç–∫—Ä—ã—Ç—ã–µ pull requests

*–ü—Ä–∏–º–µ—Ä—ã:*
`/commits` - 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ main
`/commits develop 10` - 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤ develop
`/commits feature/new-ui` - –∫–æ–º–º–∏—Ç—ã –≤ feature –≤–µ—Ç–∫–µ

*/ci [–≤–µ—Ç–∫–∞] [—á–∏—Å–ª–æ]* - –°—Ç–∞—Ç—É—Å CI/CD
`/ci` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—É—Å–∫–æ–≤
`/ci main 10` - 10 –∑–∞–ø—É—Å–∫–æ–≤ –≤ main

*/deploy [—Å—Ä–µ–¥–∞]* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π
`/deploy staging` - –¥–µ–ø–ª–æ–π –≤ staging
`/deploy production` - –¥–µ–ø–ª–æ–π –≤ production
";
        await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown);
    }

    private async Task HandleWorkflowsCommandAsync(long chatId, string? branch, int count)
    {
        try
        {
            var workflows = await _gitHubService.GetWorkflowRunsAsync(branch ?? string.Empty, count);
            await _botClient.SendTextMessageAsync(chatId, workflows, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}");
        }
    }

    private async Task HandleDeployCommandAsync(long chatId, string environment, string? username)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (string.IsNullOrEmpty(username))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }

            var allowedUsers = new[] { "your_username" }; // –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (!allowedUsers.Contains(username.ToLower()))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è");
                return;
            }

            if (environment.ToLower() != "staging" && environment.ToLower() != "production")
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: staging, production");
                return;
            }

            var message = $"üöÄ *–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ {environment}*\n\n" +
                         $"üë§ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª: {username}\n" +
                         $"‚è∞ –í—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm}\n" +
                         $"üîÑ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflow
            // await _gitHubService.TriggerDeploymentAsync(environment, username);

            var successMessage = $"‚úÖ *–î–µ–ø–ª–æ–π –≤ {environment} –∑–∞–ø—É—â–µ–Ω!*\n\n" +
                               $"üë§ {username}\n" +
                               $"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /ci";

            await _botClient.SendTextMessageAsync(chatId, successMessage, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è: {ex.Message}");
        }
    }

    private async Task HandleStatusCommandAsync(long chatId)
    {
        try
        {
            var status = await _gitHubService.GetRepositoryStatusAsync();
            await _botClient.SendTextMessageAsync(chatId, status, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
        }
    }

    private async Task HandleCommitsCommandAsync(long chatId, string branch, int count)
    {
        try
        {
            var commits = await _gitHubService.GetRecentCommitsAsync(branch, count);
            await _botClient.SendTextMessageAsync(chatId, commits, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}");
        }
    }

    private async Task HandleBranchesCommandAsync(long chatId)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesAsync();
            await _botClient.SendTextMessageAsync(chatId, branches, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}");
        }
    }

    private async Task HandlePullRequestsCommandAsync(long chatId)
    {
        try
        {
            var prs = await _gitHubService.GetPullRequestsAsync();
            await _botClient.SendTextMessageAsync(chatId, prs, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PR: {ex.Message}");
        }
    }

    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
    }
}
