using System.Collections.Generic;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace TelegramGitHubBot.Services;

public class TelegramBotService
{
    private readonly ITelegramBotClient _botClient;
    private readonly GitHubService _gitHubService;

    public TelegramBotService(ITelegramBotClient botClient, GitHubService gitHubService)
    {
        _botClient = botClient;
        _gitHubService = gitHubService ?? throw new ArgumentNullException(nameof(gitHubService));
    }

    public async Task HandleUpdateAsync(HttpContext context)
    {
        try
        {
            var update = await context.Request.ReadFromJsonAsync<Update>();
            if (update == null) return;

            if (update.Message is { } message)
            {
                await HandleMessageAsync(message);
            }
            else if (update.CallbackQuery is { } callbackQuery)
            {
                await HandleCallbackQueryAsync(callbackQuery);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling Telegram update: {ex.Message}");
        }
    }

    public async Task HandleMessageAsync(Message message)
    {
        if (message.Text == null) return;

        var chatId = message.Chat.Id;
        var text = message.Text.Trim();

        // –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
        if (text.StartsWith("/"))
        {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–≥–æ–º –±–æ—Ç–∞ (/command@BotName)
            var cleanCommand = text.Split('@')[0]; // –£–±–∏—Ä–∞–µ–º @BotName –µ—Å–ª–∏ –µ—Å—Ç—å
            await HandleCommandAsync(chatId, cleanCommand, message.From?.Username);
        }
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    }

    private async Task HandleCommandAsync(long chatId, string command, string? username)
    {
        try
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var cmd = parts[0].ToLower();

            switch (cmd)
            {
                case "/start":
                    await SendWelcomeMessageAsync(chatId);
                    break;

                case "/help":
                    await SendHelpMessageAsync(chatId);
                    break;

                case "/status":
                    await HandleStatusCommandAsync(chatId);
                    break;

                case "/commits":
                    var branch = parts.Length > 1 ? parts[1] : "main";
                    var count = parts.Length > 2 && int.TryParse(parts[2], out var c) ? c : 5;
                    await HandleCommitsCommandAsync(chatId, branch, count);
                    break;

                case "/branches":
                    await HandleBranchesCommandAsync(chatId);
                    break;

                case "/prs":
                case "/pulls":
                    await HandlePullRequestsCommandAsync(chatId);
                    break;

                case "/ci":
                case "/workflows":
                    var wfBranch = parts.Length > 1 ? parts[1] : null;
                    var wfCount = parts.Length > 2 && int.TryParse(parts[2], out var wc) ? wc : 5;
                    await HandleWorkflowsCommandAsync(chatId, wfBranch, wfCount);
                    break;

                case "/deploy":
                    if (parts.Length > 1)
                    {
                        await HandleDeployCommandAsync(chatId, parts[1], username);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è: /deploy staging –∏–ª–∏ /deploy production");
                    }
                    break;

                case "/–ø–µ–¥–∏–∫":
                    await _botClient.SendTextMessageAsync(chatId, "–°–∞–º —Ç—ã –ø–µ–¥–∏–∫");
                    break;

                default:
                    
                    break;
            }
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {ex.Message}");
        }
    }

    private async Task SendWelcomeMessageAsync(long chatId)
    {
        var message = @"ü§ñ GitHub Monitor Bot
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è goodluckv2

üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ö–æ–º–º–∏—Ç–∞—Ö
‚Ä¢ PR/MR
‚Ä¢ CI/CD
‚Ä¢ –†–µ–ª–∏–∑–∞—Ö";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å", "/status"),
                InlineKeyboardButton.WithCallbackData("üìù –ö–æ–º–º–∏—Ç—ã", "/commits"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåø –í–µ—Ç–∫–∏", "/branches"),
                InlineKeyboardButton.WithCallbackData("üîÑ PR", "/prs"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è CI/CD", "/ci"),
                InlineKeyboardButton.WithCallbackData("üöÄ –î–µ–ø–ª–æ–π", "/deploy"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚ùì –°–ø—Ä–∞–≤–∫–∞", "/help"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task SendHelpMessageAsync(long chatId)
    {
        var message = @"üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/status - –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
/commits [–≤–µ—Ç–∫–∞] - –ö–æ–º–º–∏—Ç—ã
/branches - –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫
/prs - –û—Ç–∫—Ä—ã—Ç—ã–µ PR
/ci [–≤–µ—Ç–∫–∞] - CI/CD —Å—Ç–∞—Ç—É—Å
/deploy [—Å—Ä–µ–¥–∞] - –î–µ–ø–ª–æ–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç—É—Å", "/status"),
                InlineKeyboardButton.WithCallbackData("üìù –ö–æ–º–º–∏—Ç—ã", "/commits"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üåø –í–µ—Ç–∫–∏", "/branches"),
                InlineKeyboardButton.WithCallbackData("üîÑ PR", "/prs"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚öôÔ∏è CI/CD", "/ci"),
                InlineKeyboardButton.WithCallbackData("üöÄ –î–µ–ø–ª–æ–π", "/deploy"),
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start"),
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId: chatId,
            text: message,
            replyMarkup: inlineKeyboard
        );
    }

    private async Task HandleWorkflowsCommandAsync(long chatId, string? branch, int count)
    {
        try
        {
            var workflows = await _gitHubService.GetWorkflowRunsAsync(branch ?? string.Empty, count);
            await _botClient.SendTextMessageAsync(chatId, workflows, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CI/CD —Å—Ç–∞—Ç—É—Å–æ–≤: {ex.Message}");
        }
    }

    private async Task HandleDeployCommandAsync(long chatId, string environment, string? username)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (string.IsNullOrEmpty(username))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return;
            }

            var allowedUsers = new[] { "your_username" }; // –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (!allowedUsers.Contains(username.ToLower()))
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è");
                return;
            }

            if (environment.ToLower() != "staging" && environment.ToLower() != "production")
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—ã: staging, production");
                return;
            }

            var message = $"üöÄ *–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ {environment}*\n\n" +
                         $"üë§ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª: {username}\n" +
                         $"‚è∞ –í—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm}\n" +
                         $"üîÑ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...";

            await _botClient.SendTextMessageAsync(chatId, message, parseMode: ParseMode.Markdown);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflow
            // await _gitHubService.TriggerDeploymentAsync(environment, username);

            var successMessage = $"‚úÖ *–î–µ–ø–ª–æ–π –≤ {environment} –∑–∞–ø—É—â–µ–Ω!*\n\n" +
                               $"üë§ {username}\n" +
                               $"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /ci";

            await _botClient.SendTextMessageAsync(chatId, successMessage, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è: {ex.Message}");
        }
    }

    private async Task HandleStatusCommandAsync(long chatId)
    {
        try
        {
            var status = await _gitHubService.GetRepositoryStatusAsync();
            await _botClient.SendTextMessageAsync(chatId, status, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
        }
    }

    private async Task HandleCommitsCommandAsync(long chatId, string branch, int count)
    {
        try
        {
            var commits = await _gitHubService.GetRecentCommitsAsync(branch, count);
            await _botClient.SendTextMessageAsync(chatId, commits, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {ex.Message}");
        }
    }

    private async Task HandleBranchesCommandAsync(long chatId)
    {
        try
        {
            var branches = await _gitHubService.GetBranchesAsync();
            await _botClient.SendTextMessageAsync(chatId, branches, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {ex.Message}");
        }
    }

    private async Task HandlePullRequestsCommandAsync(long chatId)
    {
        try
        {
            var prs = await _gitHubService.GetPullRequestsAsync();
            await _botClient.SendTextMessageAsync(chatId, prs, parseMode: ParseMode.Markdown);
        }
        catch (Exception ex)
        {
            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PR: {ex.Message}");
        }
    }

    private readonly HashSet<string> _processedCallbacks = new HashSet<string>();

    public async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        Console.WriteLine($"üéØ HandleCallbackQueryAsync called with data: '{callbackQuery.Data}'");

        var chatId = callbackQuery.Message?.Chat.Id ?? 0;
        var data = callbackQuery.Data;
        var messageId = callbackQuery.Message?.MessageId ?? 0;

        Console.WriteLine($"üìç ChatId: {chatId}, Data: '{data}', MessageId: {messageId}");

        if (chatId == 0 || string.IsNullOrEmpty(data) || messageId == 0)
        {
            Console.WriteLine("‚ùå Invalid callback query data");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
            return;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        var callbackKey = $"{callbackQuery.Id}:{data}";
        if (_processedCallbacks.Contains(callbackKey))
        {
            Console.WriteLine("‚ö†Ô∏è Callback already processed, ignoring");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ");
            return;
        }

        _processedCallbacks.Add(callbackKey);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        if (_processedCallbacks.Count > 1000)
        {
            _processedCallbacks.Clear();
        }

        try
        {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
            Console.WriteLine("‚úÖ Callback query answered");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            if (data.StartsWith("cd:") || data.StartsWith("commit_details:"))
            {
                Console.WriteLine("üìã Processing commit details request");
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await DeleteMessageAsync(chatId, messageId);
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
                await HandleCommitDetailsCallbackAsync(chatId, data);
            }
            else
            {
                Console.WriteLine("üìù Processing regular command");
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ callback data
                await HandleCommandAsync(chatId, data, callbackQuery.From?.Username);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Callback query error: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        }
    }

    private async Task DeleteMessageAsync(long chatId, int messageId)
    {
        try
        {
            await _botClient.DeleteMessageAsync(chatId, messageId);
            Console.WriteLine($"üóëÔ∏è Deleted message {messageId} from chat {chatId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to delete message {messageId}: {ex.Message}");
        }
    }

    private async Task RestorePushMessageAsync(long chatId, string commitSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞
            var author = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
            var message = "–ö–æ–º–º–∏—Ç";
            var shortSha = commitSha[..8];

            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            var lines = commitDetails.Split('\n');
            foreach (var line in lines)
            {
                if (line.StartsWith("üë§ –ê–≤—Ç–æ—Ä: "))
                {
                    author = line.Replace("üë§ –ê–≤—Ç–æ—Ä: ", "").Trim();
                }
                else if (line.StartsWith("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:"))
                {
                    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "üìù –°–æ–æ–±—â–µ–Ω–∏–µ:" —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
                    var messageIndex = Array.IndexOf(lines, line) + 1;
                    if (messageIndex < lines.Length)
                    {
                        message = lines[messageIndex].Trim('`', '*').Replace("```\n", "").Split('\n')[0];
                        if (message.Length > 50)
                        {
                            message = message[..47] + "...";
                        }
                    }
                    break;
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ
            var pushMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ RaspizDIYs/{repoName}*\n\n" +
                             $"üåø –í–µ—Ç–∫–∞: `main`\n" + // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é main, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ç–∫–µ
                             $"üì¶ –ö–æ–º–º–∏—Ç–æ–≤: 1\n\n" +
                             $"üîπ `{shortSha}` - {author}\n" +
                             $"   {message}\n\n" +
                             $"üë§ –ê–≤—Ç–æ—Ä: {author}";

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–æ"
            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìã –ü–æ–¥—Ä–æ–±–Ω–æ", $"cd:{shortSha}:{repoName}:details")
                }
            });

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: pushMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true,
                replyMarkup: inlineKeyboard
            );

            Console.WriteLine($"üîÑ Restored push message for commit {shortSha}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Failed to restore push message: {ex.Message}");

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var fallbackMessage = $"üöÄ *–ù–æ–≤—ã–π –ø—É—à –≤ RaspizDIYs/{repoName}*\n\n" +
                                 $"üì¶ –ö–æ–º–º–∏—Ç: `{commitSha[..8]}`\n" +
                                 $"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ GitHub](https://github.com/RaspizDIYs/goodluckv2/commit/{commitSha})";

            await _botClient.SendTextMessageAsync(
                chatId: chatId,
                text: fallbackMessage,
                parseMode: ParseMode.Markdown,
                disableWebPagePreview: true
            );
        }
    }

    private async Task HandleCommitDetailsCallbackAsync(long chatId, string callbackData)
    {
        try
        {
            // –†–∞–∑–±–∏—Ä–∞–µ–º callback data: cd:shortSha:repo:action
            var parts = callbackData.Split(':');
            if (parts.Length < 4)
            {
                await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                return;
            }

            var shortSha = parts[1];
            var repoName = parts[2];
            var action = parts[3];

            // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ SHA –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ GitHub API –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É
            var commitSha = await GetFullShaFromShortAsync(shortSha, repoName);

            if (action == "details")
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞
                var commitDetails = await _gitHubService.GetCommitDetailsAsync(commitSha);

                var callbackShortSha = commitSha[..8]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è callback
                var backKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", $"cd:{callbackShortSha}:{repoName}:back")
                    }
                });

                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: commitDetails,
                    parseMode: ParseMode.Markdown,
                    disableWebPagePreview: true,
                    replyMarkup: backKeyboard
                );
            }
            else if (action == "back")
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—à–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await RestorePushMessageAsync(chatId, commitSha, repoName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling commit details: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞");
        }
    }

    private async Task<string> GetFullShaFromShortAsync(string shortSha, string repoName)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º main –≤–µ—Ç–∫—É)
            var commitMessage = await _gitHubService.GetRecentCommitsAsync("main", 20);

            // –ò—â–µ–º –∫–æ–º–º–∏—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º SHA
            // GetRecentCommitsAsync –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç string, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ-–¥—Ä—É–≥–æ–º—É
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π SHA –∫–∞–∫ –ø–æ–ª–Ω—ã–π
            return shortSha;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting full SHA: {ex.Message}");
            return shortSha; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }
}
