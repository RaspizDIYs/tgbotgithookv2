using System.Collections.Concurrent;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace TelegramGitHubBot.Services;

public class ChatActivityTracker
{
    private readonly ConcurrentDictionary<long, ChatActivity> _chatActivities = new();
    private readonly TenorService _tenorService;
    private readonly GeminiManager _geminiManager;
    private readonly ITelegramBotClient _botClient;

    public ChatActivityTracker(TenorService tenorService, GeminiManager geminiManager, ITelegramBotClient botClient)
    {
        _tenorService = tenorService;
        _geminiManager = geminiManager;
        _botClient = botClient;
    }

    public async Task TrackMessageAsync(long chatId, long userId, string username, string messageText, DateTime timestamp)
    {
        var activity = _chatActivities.GetOrAdd(chatId, _ => new ChatActivity());
        
        lock (activity)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            activity.Messages.Add(new ChatActivityMessage
            {
                UserId = userId,
                Username = username,
                Text = messageText,
                Timestamp = timestamp
            });

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            var cutoffTime = timestamp.AddMinutes(-5);
            activity.Messages.RemoveAll(m => m.Timestamp < cutoffTime);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI
            if (ShouldActivateAI(activity))
            {
                activity.AIActivated = true;
                activity.AIActivationTime = timestamp;
            }
        }

        // –ï—Å–ª–∏ AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º
        if (activity.AIActivated && !activity.MemeSent)
        {
            await AnalyzeAndSendMemeAsync(chatId, activity);
        }
    }

    private bool ShouldActivateAI(ChatActivity activity)
    {
        if (activity.AIActivated) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º—É–º 2)
        var uniqueUsers = activity.Messages.Select(m => m.UserId).Distinct().Count();
        if (uniqueUsers < 2) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∏–Ω–∏–º—É–º 5)
        if (activity.Messages.Count < 5) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç)
        var oldestMessage = activity.Messages.Min(m => m.Timestamp);
        var newestMessage = activity.Messages.Max(m => m.Timestamp);
        var timeSpan = newestMessage - oldestMessage;
        
        return timeSpan.TotalMinutes <= 5;
    }

    private async Task AnalyzeAndSendMemeAsync(long chatId, ChatActivity activity)
    {
        try
        {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            var context = AnalyzeMessageContext(activity);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–º
            var meme = await GetContextualMemeAsync(context);
            
            if (meme != null)
            {
                await _botClient.SendAnimationAsync(chatId, 
                    InputFile.FromUri(meme.Url), 
                    caption: $"üé¨ {meme.Title}", 
                    disableNotification: true);
                
                activity.MemeSent = true;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É
                await _botClient.SendTextMessageAsync(chatId, 
                    "ü§ñ *AI –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É!*\n\n–û–±–Ω–∞—Ä—É–∂–∏–ª –æ–∂–∏–≤–ª–µ–Ω–Ω—É—é –±–µ—Å–µ–¥—É –∏ —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –º–µ–º üòÑ", 
                    parseMode: ParseMode.Markdown, 
                    disableNotification: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error analyzing and sending meme: {ex.Message}");
        }
    }

    private string AnalyzeMessageContext(ChatActivity activity)
    {
        var allText = string.Join(" ", activity.Messages.Select(m => m.Text));
        var lowerText = allText.ToLower();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞
        if (lowerText.Contains("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ") || lowerText.Contains("–∫–æ–¥") || lowerText.Contains("—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"))
            return "programming coding development";
        
        if (lowerText.Contains("–∏–≥—Ä–∞") || lowerText.Contains("–≥–µ–π–º") || lowerText.Contains("–∏–≥—Ä–æ–≤–æ–π"))
            return "gaming video games";
        
        if (lowerText.Contains("–º–µ–º") || lowerText.Contains("–ø—Ä–∏–∫–æ–ª") || lowerText.Contains("—Å–º–µ—à–Ω–æ"))
            return "memes funny humor";
        
        if (lowerText.Contains("—Ä–∞–±–æ—Ç–∞") || lowerText.Contains("–æ—Ñ–∏—Å") || lowerText.Contains("–ø—Ä–æ–µ–∫—Ç"))
            return "work office business";
        
        if (lowerText.Contains("–µ–¥–∞") || lowerText.Contains("–≥–æ—Ç–æ–≤–∏—Ç—å") || lowerText.Contains("—Ä–µ—Ü–µ–ø—Ç"))
            return "food cooking recipe";
        
        if (lowerText.Contains("–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ") || lowerText.Contains("–æ—Ç–ø—É—Å–∫") || lowerText.Contains("–ø–æ–µ–∑–¥–∫–∞"))
            return "travel vacation trip";
        
        if (lowerText.Contains("—Å–ø–æ—Ä—Ç") || lowerText.Contains("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞") || lowerText.Contains("—Ñ–∏—Ç–Ω–µ—Å"))
            return "sports fitness workout";
        
        if (lowerText.Contains("–º—É–∑—ã–∫–∞") || lowerText.Contains("–ø–µ—Å–Ω—è") || lowerText.Contains("–∫–æ–Ω—Ü–µ—Ä—Ç"))
            return "music concert song";
        
        if (lowerText.Contains("—Ñ–∏–ª—å–º") || lowerText.Contains("–∫–∏–Ω–æ") || lowerText.Contains("—Å–µ—Ä–∏–∞–ª"))
            return "movie film series";
        
        if (lowerText.Contains("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏") || lowerText.Contains("–≥–∞–¥–∂–µ—Ç") || lowerText.Contains("—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"))
            return "technology gadgets devices";
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—â–∏–µ –º–µ–º—ã
        return "memes funny general";
    }

    private async Task<TenorGif?> GetContextualMemeAsync(string context)
    {
        try
        {
            var gifs = await _tenorService.SearchGifsAsync(context, 10);
            if (gifs.Count > 0)
            {
                var random = new Random();
                return gifs[random.Next(gifs.Count)];
            }
            
            // Fallback –Ω–∞ –æ–±—â–∏–µ –º–µ–º—ã
            var fallbackGifs = await _tenorService.SearchGifsAsync("memes funny", 5);
            if (fallbackGifs.Count > 0)
            {
                var random = new Random();
                return fallbackGifs[random.Next(fallbackGifs.Count)];
            }
            
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error getting contextual meme: {ex.Message}");
            return null;
        }
    }

    public void ResetActivity(long chatId)
    {
        _chatActivities.TryRemove(chatId, out _);
    }

    public ChatActivity? GetActivity(long chatId)
    {
        _chatActivities.TryGetValue(chatId, out var activity);
        return activity;
    }
}

public class ChatActivity
{
    public List<ChatActivityMessage> Messages { get; set; } = new();
    public bool AIActivated { get; set; } = false;
    public DateTime AIActivationTime { get; set; }
    public bool MemeSent { get; set; } = false;
}

public class ChatActivityMessage
{
    public long UserId { get; set; }
    public string Username { get; set; } = "";
    public string Text { get; set; } = "";
    public DateTime Timestamp { get; set; }
}
