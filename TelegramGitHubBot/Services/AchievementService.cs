using TelegramGitHubBot.Models;
using System.Text.Json;

namespace TelegramGitHubBot.Services;

public class AchievementService
{
    private readonly Dictionary<long, UserStats> _userStats = new();
    private readonly Dictionary<string, Achievement> _achievements = new();
    private readonly List<AchievementDefinition> _achievementDefinitions;
    private readonly string _dataFilePath = "user_stats.json";

    public AchievementService()
    {
        _achievementDefinitions = InitializeAchievementDefinitions();
        LoadUserStats();
    }

    private List<AchievementDefinition> InitializeAchievementDefinitions()
    {
        return new List<AchievementDefinition>
        {
            new()
            {
                Id = "commits_emperor",
                Name = "Commits Emperor",
                Description = "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–º–∏—Ç–æ–≤ - –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ",
                GifUrl = "https://tenor.com/ru/view/joaquin-phoenix-commodus-gladiator-gif-12708896",
                Emoji = "üëë",
                Type = AchievementType.TotalCommits,
                IsRecordBased = true
            },
            new()
            {
                Id = "speedster",
                Name = "Speedster",
                Description = "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–¥–µ—Ä - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º –∫–æ–º–º–∏—Ç–µ",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "‚ö°",
                Type = AchievementType.MaxLinesChanged,
                IsRecordBased = true
            },
            new()
            {
                Id = "motivating_leader",
                Name = "Motivating Leader",
                Description = "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ª–∏–¥–µ—Ä - —Å–∞–º–æ–µ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –∫–æ–º–º–∏—Ç–æ–≤",
                GifUrl = "https://tenor.com/ru/view/just-do-it-shia-la-beouf-do-it-flame-fire-gif-5621394",
                Emoji = "üî•",
                Type = AchievementType.LongestBreak,
                IsRecordBased = true
            },
            new()
            {
                Id = "weekend_warrior",
                Name = "Weekend Warrior",
                Description = "–í—ã—Ö–æ–¥–Ω–æ–π –≤–æ–∏–Ω - –∫–æ–º–º–∏—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "üèÜ",
                Type = AchievementType.WeekendWarrior,
                IsRecordBased = false,
                RequiredValue = 1
            },
            new()
            {
                Id = "night_owl",
                Name = "Night Owl",
                Description = "–ù–æ—á–Ω–∞—è —Å–æ–≤–∞ - –∫–æ–º–º–∏—Ç—ã –ø–æ—Å–ª–µ 22:00",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "ü¶â",
                Type = AchievementType.NightOwl,
                IsRecordBased = false,
                RequiredValue = 1
            },
            new()
            {
                Id = "early_bird",
                Name = "Early Bird",
                Description = "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ - –∫–æ–º–º–∏—Ç—ã –¥–æ 8:00",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "üê¶",
                Type = AchievementType.EarlyBird,
                IsRecordBased = false,
                RequiredValue = 1
            },
            new()
            {
                Id = "bug_hunter",
                Name = "Bug Hunter",
                Description = "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –±–∞–≥–∏ - –∫–æ–º–º–∏—Ç—ã —Å 'fix', 'bug', 'error'",
                GifUrl = "https://tenor.com/ru/view/joaquin-phoenix-commodus-gladiator-gif-12708896",
                Emoji = "üêõ",
                Type = AchievementType.BugHunter,
                IsRecordBased = false,
                RequiredValue = 5
            },
            new()
            {
                Id = "feature_master",
                Name = "Feature Master",
                Description = "–ú–∞—Å—Ç–µ—Ä —Ñ–∏—á - –∫–æ–º–º–∏—Ç—ã —Å 'feat', 'feature', 'add'",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "‚ú®",
                Type = AchievementType.FeatureMaster,
                IsRecordBased = false,
                RequiredValue = 10
            },
            new()
            {
                Id = "refactor_king",
                Name = "Refactor King",
                Description = "–ö–æ—Ä–æ–ª—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ - –∫–æ–º–º–∏—Ç—ã —Å 'refactor', 'clean', 'optimize'",
                GifUrl = "https://tenor.com/ru/view/just-do-it-shia-la-beouf-do-it-flame-fire-gif-5621394",
                Emoji = "‚ôªÔ∏è",
                Type = AchievementType.RefactorKing,
                IsRecordBased = false,
                RequiredValue = 3
            },
            new()
            {
                Id = "streak_master",
                Name = "Streak Master",
                Description = "–ú–∞—Å—Ç–µ—Ä —Å—Ç—Ä–∏–∫–æ–≤ - –∫–æ–º–º–∏—Ç—ã –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞",
                GifUrl = "https://tenor.com/ru/view/just-do-it-shia-la-beouf-do-it-flame-fire-gif-5621394",
                Emoji = "üî•",
                Type = AchievementType.StreakMaster,
                IsRecordBased = true
            },
            new()
            {
                Id = "test_champion",
                Name = "Test Champion",
                Description = "–ß–µ–º–ø–∏–æ–Ω —Ç–µ—Å—Ç–æ–≤ - –∫–æ–º–º–∏—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏",
                GifUrl = "https://tenor.com/ru/view/coding-typing-pc-laptop-power-gif-21599707",
                Emoji = "üß™",
                Type = AchievementType.TestChampion,
                IsRecordBased = false,
                RequiredValue = 5
            },
            new()
            {
                Id = "release_genius",
                Name = "Release Genius",
                Description = "–ì–µ–Ω–∏–π —Ä–µ–ª–∏–∑–æ–≤ - –∫–æ–º–º–∏—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏",
                GifUrl = "https://tenor.com/ru/view/joaquin-phoenix-commodus-gladiator-gif-12708896",
                Emoji = "üöÄ",
                Type = AchievementType.ReleaseGenius,
                IsRecordBased = false,
                RequiredValue = 3
            }
            ,
            new()
            {
                Id = "druid_branch_master",
                Name = "Druid",
                Description = "–î—Ä—É–∏–¥ - –±–æ–ª—å—à–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–ª –≤–µ—Ç–æ–∫",
                GifUrl = "https://tenor.com/ru/view/druid-of-the-talon-druid-storm-crow-flight-form-night-elf-gif-13611705726058255097",
                Emoji = "üåø",
                Type = AchievementType.BranchCreator,
                IsRecordBased = true
            }
        };
    }

    public void ProcessCommit(string author, string email, string commitMessage, DateTime commitDate, int linesAdded, int linesDeleted)
    {
        var userId = GetOrCreateUserId(author, email);
        var stats = GetOrCreateUserStats(userId, author);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.TotalCommits++;
        stats.MaxLinesChanged = Math.Max(stats.MaxLinesChanged, linesAdded + linesDeleted);
        
        if (stats.FirstCommitDate == null)
            stats.FirstCommitDate = commitDate;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
        UpdateStreak(stats, commitDate);
        
        stats.LastCommitDate = commitDate;
        stats.LastUpdated = DateTime.UtcNow;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞
        AnalyzeCommitType(stats, commitMessage, commitDate);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º—ã–π –¥–æ–ª–≥–∏–π –ø–µ—Ä–µ—Ä—ã–≤
        RecalculateLongestBreak(stats);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
        CheckAchievements(stats);
        
        SaveUserStats();
    }

    public void RegisterBranchCreated(string author, string email, DateTime createdAt)
    {
        var userId = GetOrCreateUserId(author, email);
        var stats = GetOrCreateUserStats(userId, author);

        stats.BranchesCreated++;
        stats.LastUpdated = DateTime.UtcNow;

        CheckAchievements(stats);
        SaveUserStats();
    }

    public void ResetAllData()
    {
        _userStats.Clear();
        _achievements.Clear();
        SaveUserStats();
    }

    private long GetOrCreateUserId(string author, string email)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ID –∏–∑ email
        return Math.Abs(email.GetHashCode());
    }

    private UserStats GetOrCreateUserStats(long userId, string author)
    {
        if (!_userStats.TryGetValue(userId, out var stats))
        {
            stats = new UserStats
            {
                TelegramUserId = userId,
                Username = author,
                DisplayName = author
            };
            _userStats[userId] = stats;
        }
        return stats;
    }

    private void UpdateStreak(UserStats stats, DateTime commitDate)
    {
        if (stats.LastCommitDate == null)
        {
            stats.CurrentStreak = 1;
            stats.LongestStreak = 1;
            return;
        }

        var daysDifference = (commitDate.Date - stats.LastCommitDate.Value.Date).Days;
        
        if (daysDifference == 1)
        {
            // –ö–æ–º–º–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫
            stats.CurrentStreak++;
        }
        else if (daysDifference == 0)
        {
            // –ö–æ–º–º–∏—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å - —Å—Ç—Ä–∏–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
        }
        else
        {
            // –ü–µ—Ä–µ—Ä—ã–≤ –±–æ–ª—å—à–µ –¥–Ω—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
            stats.CurrentStreak = 1;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Å—Ç—Ä–∏–∫
        stats.LongestStreak = Math.Max(stats.LongestStreak, stats.CurrentStreak);
    }

    private void AnalyzeCommitType(UserStats stats, string commitMessage, DateTime commitDate)
    {
        var message = commitMessage.ToLower();
        var hour = commitDate.Hour;
        var dayOfWeek = commitDate.DayOfWeek;
        
        // –¢–µ—Å—Ç—ã
        if (message.Contains("test") || message.Contains("spec") || message.Contains("specs"))
        {
            stats.TestCommits++;
        }
        
        // –†–µ–ª–∏–∑—ã
        if (message.Contains("release") || message.Contains("version") || message.Contains("v1.") || 
            message.Contains("v2.") || message.Contains("v3.") || message.Contains("v4.") || 
            message.Contains("v5.") || message.Contains("v6.") || message.Contains("v7.") || 
            message.Contains("v8.") || message.Contains("v9.") || message.Contains("v0."))
        {
            stats.ReleaseCommits++;
        }
        
        // –í—ã—Ö–æ–¥–Ω—ã–µ
        if (dayOfWeek == DayOfWeek.Saturday || dayOfWeek == DayOfWeek.Sunday)
        {
            stats.WeekendCommits++;
        }
        
        // –ù–æ—á–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã (22:00 - 06:00)
        if (hour >= 22 || hour < 6)
        {
            stats.NightCommits++;
        }
        
        // –†–∞–Ω–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã (06:00 - 08:00)
        if (hour >= 6 && hour < 8)
        {
            stats.EarlyCommits++;
        }
        
        // –ë–∞–≥—Ñ–∏–∫—Å—ã
        if (message.Contains("fix") || message.Contains("bug") || message.Contains("error") || 
            message.Contains("issue") || message.Contains("resolve"))
        {
            stats.BugFixCommits++;
        }
        
        // –§–∏—á–∏
        if (message.Contains("feat") || message.Contains("feature") || message.Contains("add") || 
            message.Contains("implement") || message.Contains("new"))
        {
            stats.FeatureCommits++;
        }
        
        // –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        if (message.Contains("refactor") || message.Contains("clean") || message.Contains("optimize") || 
            message.Contains("improve") || message.Contains("restructure"))
        {
            stats.RefactorCommits++;
        }
    }

    private void RecalculateLongestBreak(UserStats stats)
    {
        if (stats.FirstCommitDate == null || stats.LastCommitDate == null)
            return;

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var totalDays = (stats.LastCommitDate.Value - stats.FirstCommitDate.Value).Days;
        stats.LongestBreakDays = Math.Max(stats.LongestBreakDays, totalDays / 10); // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    }

    private void CheckAchievements(UserStats stats)
    {
        foreach (var definition in _achievementDefinitions)
        {
            var achievementId = definition.Id;
            
            if (_achievements.ContainsKey(achievementId) && definition.IsRecordBased)
            {
                // –î–ª—è —Ä–µ–∫–æ—Ä–¥–Ω—ã—Ö –∞—á–∏–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–∏—Ç –ª–∏ —Ä–µ–∫–æ—Ä–¥
                var currentAchievement = _achievements[achievementId];
                var newValue = GetValueForAchievement(stats, definition.Type);
                
                if (newValue > (currentAchievement.Value ?? 0))
                {
                    // –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!
                    _achievements[achievementId] = new Achievement
                    {
                        Id = achievementId,
                        Name = definition.Name,
                        Description = definition.Description,
                        GifUrl = definition.GifUrl,
                        Emoji = definition.Emoji,
                        IsUnlocked = true,
                        UnlockedAt = DateTime.UtcNow,
                        HolderUserId = stats.TelegramUserId,
                        HolderName = stats.DisplayName,
                        Value = newValue
                    };
                }
            }
            else if (!_achievements.ContainsKey(achievementId))
            {
                // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–∫–∏
                var value = GetValueForAchievement(stats, definition.Type);
                var shouldUnlock = definition.IsRecordBased ? 
                    value > 0 : 
                    value >= definition.RequiredValue;

                if (shouldUnlock)
                {
                    _achievements[achievementId] = new Achievement
                    {
                        Id = achievementId,
                        Name = definition.Name,
                        Description = definition.Description,
                        GifUrl = definition.GifUrl,
                        Emoji = definition.Emoji,
                        IsUnlocked = true,
                        UnlockedAt = DateTime.UtcNow,
                        HolderUserId = stats.TelegramUserId,
                        HolderName = stats.DisplayName,
                        Value = value
                    };
                }
            }
        }
    }

    private int GetValueForAchievement(UserStats stats, AchievementType type)
    {
        return type switch
        {
            AchievementType.TotalCommits => stats.TotalCommits,
            AchievementType.MaxLinesChanged => stats.MaxLinesChanged,
            AchievementType.LongestBreak => stats.LongestBreakDays,
            AchievementType.StreakMaster => stats.LongestStreak,
            AchievementType.WeekendWarrior => stats.WeekendCommits,
            AchievementType.NightOwl => stats.NightCommits,
            AchievementType.EarlyBird => stats.EarlyCommits,
            AchievementType.BugHunter => stats.BugFixCommits,
            AchievementType.FeatureMaster => stats.FeatureCommits,
            AchievementType.RefactorKing => stats.RefactorCommits,
            AchievementType.TestChampion => stats.TestCommits,
            AchievementType.ReleaseGenius => stats.ReleaseCommits,
            AchievementType.BranchCreator => stats.BranchesCreated,
            _ => 0
        };
    }

    public List<Achievement> GetAllAchievements()
    {
        return _achievements.Values.OrderBy(a => a.Name).ToList();
    }

    public List<UserStats> GetTopUsers(int count = 10)
    {
        return _userStats.Values
            .OrderByDescending(u => u.TotalCommits)
            .Take(count)
            .ToList();
    }

    public string GetStreakEmoji(int streak)
    {
        return streak switch
        {
            >= 30 => "üî•üî•üî•üî•", // –ú–µ—Å—è—Ü –∏ –±–æ–ª—å—à–µ
            >= 21 => "üî•üî•üî•",   // 21+ –¥–Ω–µ–π
            >= 14 => "üî•üî•",     // 14+ –¥–Ω–µ–π
            >= 7 => "üî•",        // 7+ –¥–Ω–µ–π
            _ => ""
        };
    }

    public List<UserStats> GetTopUsersByStreak(int count = 10)
    {
        return _userStats.Values
            .OrderByDescending(u => u.LongestStreak)
            .Take(count)
            .ToList();
    }

    private void LoadUserStats()
    {
        try
        {
            if (File.Exists(_dataFilePath))
            {
                var json = File.ReadAllText(_dataFilePath);
                var data = JsonSerializer.Deserialize<Dictionary<long, UserStats>>(json);
                if (data != null)
                {
                    foreach (var kvp in data)
                    {
                        _userStats[kvp.Key] = kvp.Value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
        }
    }

    private void SaveUserStats()
    {
        try
        {
            var json = JsonSerializer.Serialize(_userStats, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(_dataFilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
        }
    }
}
